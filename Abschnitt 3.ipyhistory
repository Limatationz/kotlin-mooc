{
 "checkpoints": [
  {
   "timestamp": 1619004012983,
   "notebook": 0,
   "targetCells": [
    {
     "cell": "m.0.0",
     "changeType": "added",
     "index": 0
    },
    {
     "cell": "c.0.0",
     "changeType": "added",
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1619166384323,
   "notebook": 1,
   "targetCells": [
    {
     "cell": "m.1.0",
     "changeType": "added",
     "index": 0
    },
    {
     "cell": "c.1.0",
     "changeType": "added",
     "index": 1
    },
    {
     "cell": "m.2.0",
     "changeType": "added",
     "index": 2
    },
    {
     "cell": "c.2.0",
     "changeType": "added",
     "index": 3
    },
    {
     "cell": "m.3.0",
     "changeType": "added",
     "index": 4
    },
    {
     "cell": "c.3.0",
     "changeType": "added",
     "index": 5
    },
    {
     "cell": "m.4.0",
     "changeType": "added",
     "index": 6
    },
    {
     "cell": "c.4.0",
     "changeType": "added",
     "index": 7
    },
    {
     "cell": "m.5.0",
     "changeType": "added",
     "index": 8
    },
    {
     "cell": "c.5.0",
     "changeType": "added",
     "index": 9
    },
    {
     "cell": "m.6.0",
     "changeType": "added",
     "index": 10
    },
    {
     "cell": "c.6.0",
     "changeType": "added",
     "index": 11
    },
    {
     "cell": "m.7.0",
     "changeType": "added",
     "index": 12
    },
    {
     "cell": "c.7.0",
     "changeType": "added",
     "index": 13
    },
    {
     "cell": "m.8.0",
     "changeType": "added",
     "index": 14
    },
    {
     "cell": "c.8.0",
     "changeType": "added",
     "index": 15
    },
    {
     "cell": "m.9.0",
     "changeType": "added",
     "index": 16
    },
    {
     "cell": "c.9.0",
     "changeType": "added",
     "index": 17
    },
    {
     "cell": "c.10.0",
     "changeType": "added",
     "index": 18
    },
    {
     "cell": "m.10.0",
     "changeType": "added",
     "index": 19
    },
    {
     "cell": "c.11.0",
     "changeType": "added",
     "index": 20
    }
   ]
  },
  {
   "timestamp": 1619166409884,
   "notebook": 2,
   "targetCells": [
    {
     "cell": "c.1.0",
     "changeType": "output changed",
     "output": [
      "o.0.1"
     ],
     "index": 1
    },
    {
     "cell": "c.12.0",
     "changeType": "added",
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167416345,
   "notebook": 3,
   "targetCells": [
    {
     "cell": "c.12.1",
     "changeType": "edited",
     "output": [
      "o.8.0"
     ],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167430512,
   "notebook": 4,
   "targetCells": [
    {
     "cell": "c.12.2",
     "changeType": "edited",
     "output": [],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167469117,
   "notebook": 5,
   "targetCells": [
    {
     "cell": "c.12.2",
     "changeType": "output changed",
     "output": [
      "o.9.0"
     ],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167519480,
   "notebook": 6,
   "targetCells": [
    {
     "cell": "c.12.3",
     "changeType": "edited",
     "output": [],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167525913,
   "notebook": 7,
   "targetCells": [
    {
     "cell": "c.12.4",
     "changeType": "edited",
     "output": [
      "o.10.0"
     ],
     "index": 17
    },
    {
     "cell": "m.9.1",
     "changeType": "edited",
     "index": 16
    }
   ]
  },
  {
   "timestamp": 1619273398309,
   "notebook": 8,
   "targetCells": [
    {
     "cell": "c.13.0",
     "changeType": "added",
     "index": 1
    },
    {
     "cell": "c.14.0",
     "changeType": "added",
     "index": 17
    },
    {
     "cell": "m.11.0",
     "changeType": "added",
     "index": 18
    },
    {
     "cell": "c.15.0",
     "changeType": "added",
     "index": 19
    },
    {
     "cell": "c.16.0",
     "changeType": "added",
     "index": 20
    },
    {
     "cell": "m.12.0",
     "changeType": "added",
     "index": 21
    },
    {
     "cell": "c.17.0",
     "changeType": "added",
     "index": 22
    },
    {
     "cell": "m.13.0",
     "changeType": "added",
     "index": 23
    },
    {
     "cell": "c.18.0",
     "changeType": "added",
     "index": 24
    },
    {
     "cell": "m.14.0",
     "changeType": "added",
     "index": 25
    },
    {
     "cell": "c.19.0",
     "changeType": "added",
     "index": 26
    },
    {
     "cell": "m.15.0",
     "changeType": "added",
     "index": 27
    },
    {
     "cell": "c.20.0",
     "changeType": "added",
     "index": 28
    },
    {
     "cell": "m.16.0",
     "changeType": "added",
     "index": 29
    },
    {
     "cell": "c.21.0",
     "changeType": "added",
     "index": 30
    },
    {
     "cell": "m.17.0",
     "changeType": "added",
     "index": 31
    },
    {
     "cell": "m.18.0",
     "changeType": "added",
     "index": 32
    },
    {
     "cell": "c.22.0",
     "changeType": "added",
     "index": 33
    },
    {
     "cell": "m.19.0",
     "changeType": "added",
     "index": 34
    },
    {
     "cell": "m.20.0",
     "changeType": "added",
     "index": 35
    },
    {
     "cell": "c.23.0",
     "changeType": "added",
     "index": 36
    },
    {
     "cell": "m.21.0",
     "changeType": "added",
     "index": 37
    },
    {
     "cell": "c.24.0",
     "changeType": "added",
     "index": 38
    },
    {
     "cell": "m.22.0",
     "changeType": "added",
     "index": 39
    },
    {
     "cell": "c.25.0",
     "changeType": "added",
     "index": 40
    },
    {
     "cell": "m.23.0",
     "changeType": "added",
     "index": 41
    },
    {
     "cell": "c.26.0",
     "changeType": "added",
     "index": 42
    },
    {
     "cell": "m.24.0",
     "changeType": "added",
     "index": 43
    },
    {
     "cell": "m.25.0",
     "changeType": "added",
     "index": 44
    },
    {
     "cell": "c.27.0",
     "changeType": "added",
     "index": 45
    },
    {
     "cell": "m.26.0",
     "changeType": "added",
     "index": 46
    },
    {
     "cell": "c.28.0",
     "changeType": "added",
     "index": 47
    },
    {
     "cell": "m.27.0",
     "changeType": "added",
     "index": 48
    },
    {
     "cell": "c.29.0",
     "changeType": "added",
     "index": 49
    },
    {
     "cell": "m.28.0",
     "changeType": "added",
     "index": 50
    },
    {
     "cell": "c.30.0",
     "changeType": "added",
     "index": 51
    },
    {
     "cell": "c.31.0",
     "changeType": "added",
     "index": 53
    }
   ]
  },
  {
   "timestamp": 1619273440670,
   "notebook": 9,
   "targetCells": [
    {
     "cell": "c.32.0",
     "changeType": "added",
     "index": 50
    }
   ]
  },
  {
   "timestamp": 1619273462931,
   "notebook": 10,
   "targetCells": [
    {
     "cell": "c.32.1",
     "changeType": "edited",
     "output": [
      "o.29.0"
     ],
     "index": 50
    }
   ]
  }
 ],
 "notebook": {
  "artifact_name": "n.0",
  "versions": [
   {
    "start_checkpoint": 1619004012983,
    "cells": [
     "m.0.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1619166384323,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619166409884,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.0",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167416345,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.1",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167430512,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.2",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167469117,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.2",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167519480,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.3",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167525913,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.12.4",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619273398309,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.19.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.27.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.10.0",
     "c.31.0"
    ]
   },
   {
    "start_checkpoint": 1619273440670,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.19.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.27.0",
     "c.29.0",
     "c.32.0",
     "m.28.0",
     "c.30.0",
     "m.10.0",
     "c.31.0"
    ]
   },
   {
    "start_checkpoint": 1619273462931,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.19.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.27.0",
     "c.29.0",
     "c.32.1",
     "m.28.0",
     "c.30.0",
     "m.10.0",
     "c.31.0"
    ]
   }
  ]
 },
 "codeCells": [
  {
   "output_histories": {},
   "artifact_name": "c.0",
   "versions": [
    {
     "start_checkpoint": 1619004012983,
     "parent": "n.0.0",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.0"
   },
   "artifact_name": "c.1",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "literal": "class Person (val name: String, var alter: Int)\n\nval p1 = Person(\"Max Mustermann\", 21)\nprintln(\"Person 1, $p1: \\nName: ${p1.name}, Alter: ${p1.alter}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 63
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.1"
   },
   "artifact_name": "c.2",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "literal": "class Auto (\n    val marke: String, //Es wird ein Feld mit dem Namen marke und ein Getter hinzugefügt und bei Erzeugung mit dem übergebenen Wert gefüllt.\n    var farbe: String, //Es wird ein Feld mit dem Namen farbe und einem Getter sowie Setter hinzugefügt und bei Erzeugung mit dem übergebenen Wert gefüllt.\n    ps: Int //Dies ist lediglich ein Übergabeparameter, der im Konstruktor verwendet werden kann.\n)\n\nval a1 = Auto (\"BMW\", \"Gelb\", 220)\nprintln(\"Marke von a1: ${a1.marke}, Farbe von a1: ${a1.farbe}.\") //Benutzung der Getter von marke und farbe\n//println(a1.ps) -> Error, da ps kein Feld sondern nur ein Übergabeparameter ist\n//a1.marke = \"Audi\" -> Error, da das Feld marke nicht verändert werden kann und auch keinen Setter besitzt\na1.farbe = \"Rot\" //Aufruf des Setters von farbe. Das Feld farbe kann verändert werden, da ein Setter vorhanden ist und das Feld den Typ var besitzt\nprintln(\"Farbe von a1 nach Umlackierung: ${a1.farbe}.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 11,
      "ch": 54
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.2"
   },
   "artifact_name": "c.3",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "literal": "class Computer (){\n    val marke: String = \"Fuhitsu\"\n    var istAn: Boolean = false\n}\n\nval c1 = Computer ()\nprintln(\"Marke von c1: ${c1.marke}, ist c1 an?: ${c1.istAn}.\") //Benutzung der Getter von marke und istAn\n// c1.marke = \"LD\" -> Error, da das Feld marke nicht verändert werden kann und auch keinen Setter besitzt\nc1.istAn = true //Aufruf des Setters von istAn. Das Feld istAn kann verändert werden, da ein Setter vorhanden ist und das Feld den Typ var besitzt\nprintln(\"ist c1 an?: ${c1.istAn}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 9,
      "ch": 33
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.3"
   },
   "artifact_name": "c.4",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "literal": "class Flasche (val farbe: String, var füllung: Int)\nval f1 = Flasche (\"Grau\", 20)\nprintln(\"Die Flasche mit der Farbe ${f1.farbe} ist zu ${f1.füllung}% gefüllt.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 78
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.4"
   },
   "artifact_name": "c.5",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "literal": "class Bett (\n    laenge: Int, breite: Int, belegt: Boolean //Übergabeparameter bei Objekterzeugung. Können im init-Block verwendet werden.\n){\n    val laenge: Int\n    val breite: Int\n    var belegt: Boolean\n    \n    init { //primärer Konstruktor mit init-Block. In diesem kann auf die Parameter zugegriffen werden.\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = if (breite > 0) breite else 0\n        this.belegt = belegt\n    }\n}\nval b1 = Bett (160, 200, false)\nval b2 = Bett (-100, 50, true)\nprintln(\"Bett b1: Länge ${b1.laenge}, Breite ${b1.breite}, belegt ${b1.belegt}\")\nprintln(\"Bett b2: Länge ${b2.laenge}, Breite ${b2.breite}, belegt ${b2.belegt}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 16,
      "ch": 79
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.5"
   },
   "artifact_name": "c.6",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "literal": "class Tisch (\n    laenge: Int, breite: Int, farbe: String //Übergabeparameter bei Objekterzeugung. Können den Feldern direkt zugewiesen werden.\n){\n    val laenge: Int = if (laenge > 0) laenge else 0\n    val breite = if (breite > 0) breite else 0 //Kurzschreibweise ist zulässig. Dabei wird der Datentyp des Parameters übernommen\n    var farbe: String = farbe\n}\n\nval t1 = Tisch (100, 100, \"Braun\")\nval t2 = Tisch (-100, 50, \"Weiß\")\nprintln(\"Tisch t1: Länge ${t1.laenge}, Breite ${t1.breite}, Farbe ${t1.farbe}\")\nprintln(\"Tisch t2: Länge ${t2.laenge}, Breite ${t2.breite}, Farbe ${t2.farbe}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 11,
      "ch": 78
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.6"
   },
   "artifact_name": "c.7",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "literal": "class Stuhl (laenge: Int, breite: Int, var belegt: Boolean){\n    val laenge = if (laenge > 0) laenge else 0\n    val breite: Int\n    \n    init {\n        this.breite = if (breite > 0) breite else 0\n    }\n}\nval s1 = Stuhl (20, 20, true)\nval s2 = Stuhl (-20, 30, false)\nprintln(\"Stuhl s1: Länge ${s1.laenge}, Breite ${s1.breite}, belegt ${s1.belegt}\")\nprintln(\"Stuhl s2: Länge ${s2.laenge}, Breite ${s2.breite}, belegt ${s2.belegt}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 11,
      "ch": 80
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.7"
   },
   "artifact_name": "c.8",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "literal": "class Fenster { //Parameterklammern fehlen\n    val laenge: Int\n    val breite: Int\n    var zustand: String\n    \n    //Konstruktor eines normalen Fensters\n    constructor (laenge: Int, breite: Int, zustand: String){\n        println(\"Konstruktor eines normalen Fensters\")\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = if (breite > 0) breite else 0\n        this.zustand = zustand\n    }\n    //Konstruktor eines quadratischen Fensters\n    constructor (laenge: Int, zustand: String){\n        println(\"Konstruktor eines quadratischen Fensters\")\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = laenge\n        this.zustand = zustand\n    }\n    //Konstruktor eines neuen Fensters\n    constructor (laenge: Int, breite: Int){\n        println(\"Konstruktor eines neuen Fensters\")\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = if (breite > 0) breite else 0\n        this.zustand = \"Neu\"\n    }\n}\n\nval fensterNormal = Fenster (50, -80, \"Gebraucht\")\nprintln(\"Fenster fensterNormal: Länge ${fensterNormal.laenge}, Breite ${fensterNormal.breite}, Zustand ${fensterNormal.zustand} \\n\")\nval fensterQuadrat = Fenster (60, \"Schmutzig\")\nprintln(\"Fenster fensterQuadrat: Länge ${fensterQuadrat.laenge}, Breite ${fensterQuadrat.breite}, Zustand ${fensterQuadrat.zustand} \\n\")\nval fensterNeu = Fenster (100, 120)\nprintln(\"Fenster fensterNeu: Länge ${fensterNeu.laenge}, Breite ${fensterNeu.breite}, Zustand ${fensterNeu.zustand}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 33,
      "ch": 116
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.9",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.10",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.11",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.8",
    "2": "o.9",
    "4": "o.10"
   },
   "artifact_name": "c.12",
   "versions": [
    {
     "start_checkpoint": 1619166409884,
     "parent": "n.0.2",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1619167416345,
     "parent": "n.0.3",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\")\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false, 0, \"Neu\")\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\")\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false)\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie()\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")"
    },
    {
     "start_checkpoint": 1619167430512,
     "parent": "n.0.4",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\")\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false)\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\")\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false)\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie()\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")"
    },
    {
     "start_checkpoint": 1619167519480,
     "parent": "n.0.6",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\") //Benutzt den primären Konstruktor\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false) //Benutzt den anderen sekundären Konstruktor\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\") //primärer Konstruktor\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false) //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie() //sekundärer Konstruktor: Neue BB Einmalbatterie\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")"
    },
    {
     "start_checkpoint": 1619167525913,
     "parent": "n.0.7",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\") //Benutzt den primären Konstruktor\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false) //Benutzt den anderen sekundären Konstruktor\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\") //primärer Konstruktor\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}.\")\nval neueBatterie = Batterie(3000, false) //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}.\")\nval BBBatterie = Batterie() //sekundärer Konstruktor: Neue BB Einmalbatterie\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}.\")"
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.11"
   },
   "artifact_name": "c.13",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "class Person (val name: String, var alter: Int)\n\nval p1 = Person(\"Max Mustermann\", 21)\nprintln(\"Person p1, $p1: \\nName: ${p1.name}, Alter: ${p1.alter}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 64
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.12"
   },
   "artifact_name": "c.14",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\") //Benutzt den primären Konstruktor\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false) //Benutzt den anderen sekundären Konstruktor\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\") //primärer Konstruktor\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false) //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie() //sekundärer Konstruktor: Neue BB Einmalbatterie\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 178
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.13"
   },
   "artifact_name": "c.15",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "//TODO\n\n//Tests\nvar fehler = 0\nval test1 = Pizza(25, listOf(\"Schinken\"), false)\nif( test1.groeße != 25 || test1.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test1.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 1! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test1.groeße}, Beläge ${test1.belaege}, Geschnitten ${test1.geschnitten}\")\n}\nval test2 = Pizza(31, listOf(\"Schinken\"), false)\nif( test2.groeße != -1 || test2.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test2.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 2! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test2.groeße}, Beläge ${test2.belaege}, Geschnitten ${test2.geschnitten}\")\n}\nval test3 = Pizza(14, listOf(\"Schinken\"), false)\nif( test3.groeße != -1 || test3.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test3.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 3! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test3.groeße}, Beläge ${test3.belaege}, Geschnitten ${test3.geschnitten}\")\n}\nval test4 = Pizza(31, listOf(\"Schinken\"), false)\nif( test4.groeße != -1 || test4.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test4.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 4! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test4.groeße}, Beläge ${test4.belaege}, Geschnitten ${test4.geschnitten}\")\n}\nval test5 = Pizza(28, emptyList(), true)\nif( test5.groeße != 28 || test5.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test5.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 5! Richtig wäre: Größe 28, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test5.groeße}, Beläge ${test5.belaege}, Geschnitten ${test5.geschnitten}\")\n}\nval test6 = Pizza(15)\nif( test6.groeße != 15 || test6.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test6.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 6! Richtig wäre: Größe 15, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test6.groeße}, Beläge ${test6.belaege}, Geschnitten ${test6.geschnitten}\")\n}\nval test7 = Pizza()\nif( test7.groeße != 25 || test7.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Thunfisch\", \"Zwiebeln\", \"Peperoni\") || test7.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 7! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Thunfisch, Zwiebeln, Peperoni], Geschnitten false \\n  Ist: Größe ${test7.groeße}, Beläge ${test7.belaege}, Geschnitten ${test7.geschnitten}\")\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 42,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.14"
   },
   "artifact_name": "c.16",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "//Lösung\nclass Pizza (groeße: Int, belaege: List<String>, geschnitten: Boolean){\n    val groeße: Int\n    val belaege: MutableList<String>\n    val geschnitten: Boolean\n    \n    init {\n        this.groeße = if (15 <= groeße && groeße <= 30) groeße else -1\n        this.belaege = mutableListOf(\"Tomatensoße\", \"Mozzarella\")\n        this.belaege += belaege\n        this.geschnitten = geschnitten\n    }\n    \n    constructor (groeße: Int) : this(groeße, emptyList(), true)\n    constructor () : this(25, listOf(\"Thunfisch\", \"Zwiebeln\", \"Peperoni\"), true)\n}\n\n//Tests\nvar fehler = 0\nval test1 = Pizza(25, listOf(\"Schinken\"), false)\nif( test1.groeße != 25 || test1.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test1.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 1! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test1.groeße}, Beläge ${test1.belaege}, Geschnitten ${test1.geschnitten}\")\n}\nval test2 = Pizza(31, listOf(\"Schinken\"), false)\nif( test2.groeße != -1 || test2.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test2.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 2! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test2.groeße}, Beläge ${test2.belaege}, Geschnitten ${test2.geschnitten}\")\n}\nval test3 = Pizza(14, listOf(\"Schinken\"), false)\nif( test3.groeße != -1 || test3.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test3.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 3! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test3.groeße}, Beläge ${test3.belaege}, Geschnitten ${test3.geschnitten}\")\n}\nval test4 = Pizza(31, listOf(\"Schinken\"), false)\nif( test4.groeße != -1 || test4.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test4.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 4! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test4.groeße}, Beläge ${test4.belaege}, Geschnitten ${test4.geschnitten}\")\n}\nval test5 = Pizza(28, emptyList(), true)\nif( test5.groeße != 28 || test5.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test5.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 5! Richtig wäre: Größe 28, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test5.groeße}, Beläge ${test5.belaege}, Geschnitten ${test5.geschnitten}\")\n}\nval test6 = Pizza(15)\nif( test6.groeße != 15 || test6.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test6.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 6! Richtig wäre: Größe 15, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test6.groeße}, Beläge ${test6.belaege}, Geschnitten ${test6.geschnitten}\")\n}\nval test7 = Pizza()\nif( test7.groeße != 25 || test7.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Thunfisch\", \"Zwiebeln\", \"Peperoni\") || test7.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 7! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Thunfisch, Zwiebeln, Peperoni], Geschnitten false \\n  Ist: Größe ${test7.groeße}, Beläge ${test7.belaege}, Geschnitten ${test7.geschnitten}\")\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 57,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.15"
   },
   "artifact_name": "c.17",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "public class Person (name: String, alter: Int){\n    val name: String = name\n        get() = \"Name: $field\" //Wird auf das Feld name zugegeriffen, wird der String \"Name: name\" zurückgegeben\n        //Kein Setter möglich, da val\n    var alter = if (alter > 0) alter else -1\n        get() = field //Standardgetter\n        set(value){ //Eigener Setter. Der neue Wert wird in value gespeichert\n            field = if (value > field) value else field //Das Feld wird auf den neuen Wert gesetzt, falls dieser größer als der Aktuelle ist.\n        }\n}\nval p1 = Person (\"Max Mustermann\", -10)\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}\")\np1.alter = 21\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}\")\np1.alter = -10\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 15,
      "ch": 50
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.16"
   },
   "artifact_name": "c.18",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "public class Person (name: String, alter: Int){\n    val name: String = name\n        get() = \"Name: $field\" //Wird auf das Feld name zugegeriffen, wird der String \"Name: name\" zurückgegeben\n        //Kein Setter möglich, da val\n    var alter = if (alter > 0) alter else -1\n        get() = field //Standardgetter\n        set(value){ //Eigener Setter. Der neue Wert wird in value gespeichert\n            field = if (value > field) value else field //Das Feld wird auf den neuen Wert gesetzt, falls dieser größer als der Aktuelle ist.\n        }\n    val istVolljaerig //Datentyp Boolean aus dem Getter\n        get() = alter > 17\n}\nval p1 = Person (\"Max Mustermann\", 21)\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}, Volljährig ${p1.istVolljaerig}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 13,
      "ch": 82
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.17"
   },
   "artifact_name": "c.19",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "public class Person (name: String, alter: Int){\n    val name = name\n    var alter = alter\n    val istVolljaehrig: Boolean by lazy {\n        println(\"Wird berechnet...\")\n        alter > 18\n    }\n}\nval p1 = Person(\"Erika Musterfrau\", 32)\nprintln(p1.istVolljaehrig)\nprintln(p1.istVolljaehrig)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 10,
      "ch": 25
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.18"
   },
   "artifact_name": "c.20",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "public class Person (name: String, alter: Int){\n    val name = name\n    var alter = alter\n    lateinit var istVolljaehrig: String\n    \n    fun berechneIstVolljaehrig(){\n        istVolljaehrig = if (alter > 17) \"Volljährig\" else \"Nicht Volljährig\"\n    }\n}\nval p1 = Person (\"Max Mustermann\", 30)\n//println(p1.istVolljaehrig) //Error: UninitializedPropertyAccessException: lateinit property istVolljaehrig has not been initialized\np1.berechneIstVolljaehrig() //istVolljaehrig wird berechnet\nprintln(p1.istVolljaehrig)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 25
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.19"
   },
   "artifact_name": "c.21",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "public class Person (name: String, alter: Int){\n    val name = name\n    var alter = alter\n    lateinit var istVolljaehrig: String\n    \n    fun berechneIstVolljaehrig(){\n        istVolljaehrig = if (alter > 17) \"Volljährig\" else \"Nicht Volljährig\"\n    }\n    fun istInitialisiert() = this::istVolljaehrig.isInitialized\n}\n\nval p1 = Person (\"Max Mustermann\", 30)\nprintln(p1.istInitialisiert())\np1.berechneIstVolljaehrig() //istVolljaehrig wird berechnet\nprintln(p1.istInitialisiert())",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 14,
      "ch": 29
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.20"
   },
   "artifact_name": "c.22",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "class Person(val name: String, var alter: Int){\n    fun hatGeburtstag() = alter++ //Objektmethode\n    override fun toString() = \"$name ist $alter Jahre alt.\" //Objektmethode die die Methode toString() überschreibt\n}\n\nval p1 = Person(\"Max Mustermann\", 30)\nprintln(\"Vor Geburtstag: $p1\")\np1.hatGeburtstag()\nprintln(\"Nach Geburtstag: $p1\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 8,
      "ch": 30
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.21"
   },
   "artifact_name": "c.23",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "data class Punkt(val x: Int, val y: Int, val z: Int)\nval p1 = Punkt (0,0,0)\nprintln(\"Punkt p1: $p1\") //Verwendung der automatisch generierten toString()-Methode\nval p2 = Punkt (1,1,1)\nif (p1 == p2) //Verwendung der automatisch generierten equals()-Methode\n    println(\"p1 und p2 sind gleich.\")\nelse\n    println(\"p1 und p2 sind ungleich.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 38
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.22"
   },
   "artifact_name": "c.24",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "val p1 = Punkt (0,1,2)\nprintln(\"p1.component1(): ${p1.component1()}\")\nval (x, y, z) = p1\nprintln(\"x: $x, y: $y, z: $z\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 29
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.23"
   },
   "artifact_name": "c.25",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "val p1 = Punkt (0,1,2)\nval p2 = p1.copy()\nprintln(\"p1: $p1\")\nprintln(\"p2: $p2\")\nval p3 = p1.copy(x=4)\nprintln(\"p3: $p3\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 5,
      "ch": 17
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.24"
   },
   "artifact_name": "c.26",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "data class Punkt (val x: Int, val y: Int, val z: Int){\n    val istUrsprung = x == 0 && y == 0 && z == 0\n}\nval p1 = Punkt (0,0,0)\nprintln(\"Punkt p1 ist im Ursprung: ${p1.istUrsprung}, $p1\")\nval p2 = Punkt (1,1,1)\nprintln(\"Punkt p2 ist im Ursprung: ${p2.istUrsprung}, $p2\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 6,
      "ch": 58
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.25"
   },
   "artifact_name": "c.27",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "private val satz = object {\n    val subjekt = \"Kotlin\"\n    val praedikat = \"ist\"\n    val objekt = \"Programmiersprache\"\n    val vollstaendig = \"Kotlin ist eine Programmiersprache\"\n}\n\nprintln(\"Das Subjekt des Satzes ${satz.vollstaendig} ist ${satz.subjekt} \")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 74
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.26"
   },
   "artifact_name": "c.28",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "object Rechner {\n    val zahl: Int\n    init {\n        println(\"Singleton Rechner wurde erzeugt.\")\n        zahl = (0..10).random()\n    }\n    \n    fun addieren(a: Int, b: Int) = a + b\n}\n\nval a = 5\nval b = 10\nprintln(\"Berechnung ohne Singleton: ${a+b}\")\nprintln(\"Berechnung mit Singleton: ${Rechner.addieren(a,b)}\")\nprintln(\"Zufallszahl des Singletons: ${Rechner.zahl}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 14,
      "ch": 53
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.27"
   },
   "artifact_name": "c.29",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "class Student(val name: String, var alter: Int){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    \n    var matrikelnummer: Int\n    \n    init {\n        matrikelnummer = zaehler\n    }\n}\n\nval s1 = Student (\"Max\", 21)\nval s2 = Student (\"Anna\", 25)\nval s3 = Student (\"Simon\", 26)\nval s4 = Student (\"Sophie\", 19)\nprintln(\"Die Marikelnummer von ${s1.name} ist ${s1.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s2.name} ist ${s2.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s3.name} ist ${s3.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s4.name} ist ${s4.matrikelnummer}.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 20,
      "ch": 68
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.28"
   },
   "artifact_name": "c.30",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "literal": "import java.time.LocalTime\n\nclass Zahlen(){\n    companion object {\n        var nummer = 1\n            get() = field\n    }\n    object Zwei {\n        var nummer = 2\n    }\n    object Drei {\n        var nummer = 3\n    }\n    object Zeit {\n        fun gibZeit() = LocalTime.now()\n    }\n}\n\nprintln(\"Die Nummer des Standard Companion Objects ist ${Zahlen.nummer}.\")\nprintln(\"Die Nummer des Companion Objects Zwei ist ${Zahlen.Zwei.nummer}.\")\nprintln(\"Die Nummer des Companion Objects Drei ist ${Zahlen.Drei.nummer}.\")\nprintln(\"Es ist aktuell ${Zahlen.Zeit.gibZeit()} Uhr.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 21,
      "ch": 54
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.31",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.29"
   },
   "artifact_name": "c.32",
   "versions": [
    {
     "start_checkpoint": 1619273440670,
     "parent": "n.0.9",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1619273462931,
     "parent": "n.0.10",
     "literal": "var zaehler = 0\n\nclass Student(val name: String, var alter: Int){\n    \n    var matrikelnummer: Int\n    \n    init {\n        matrikelnummer = zaehler++\n    }\n}\n\nval s1 = Student (\"Max\", 21)\nval s2 = Student (\"Anna\", 25)\nval s3 = Student (\"Simon\", 26)\nval s4 = Student (\"Sophie\", 19)\nprintln(\"Die Marikelnummer von ${s1.name} ist ${s1.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s2.name} ist ${s2.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s3.name} ist ${s3.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s4.name} ist ${s4.matrikelnummer}.\")"
    }
   ]
  }
 ],
 "markdownCells": [
  {
   "artifact_name": "m.0",
   "versions": [
    {
     "start_checkpoint": 1619004012983,
     "parent": "n.0.0",
     "markdown": "# Abschnitt 3\nThema dieses Abschnittes wird die objektorientierte Programmierung sein.\n\n## Lektion 1 - Einführung\nAufgrund der Kompatibilität mit Java ist Kotlin eine objektorientierte Sprache. Dabei werden alle Daten als Objekte behandelt. Es sind alle bekannten objektorientierte Konzepte vorhanden, jedoch angepasst und teilweise auch vereinfacht. Dazu ein Beispiel. Es soll eine Klasse `Person` implementiert werden, die zwei Felder besitzt, `name` vom Typ `String`, das nur bei Objekterzeugung gesetzt wird, und `alter` vom Typ `Int`, das immer verändert werden kann.\n\n\n<table style=\"font-size:16px\">\n<thead>\n  <tr>\n    <th>Kotlin</th>\n    <th>Java</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>class Person (val name: String, var alter: Int)</code></td>\n    <td><code>public class Person{<br>&nbsp;&nbsp;&nbsp;&nbsp;private String name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Person(String name, int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibName(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibAlter(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String setzeAlter(int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></td>\n  </tr>\n</tbody>\n</table>\n\nEs ist zu erkennen, dass der Kotlincode deutlich kürzer und auch übersichtlicher ist. Jedoch wird er Ihnen aktuell wenig aussagen. In den folgenden Lektionen wird das Beispiel Schritt für Schritt erklärt.\n\n## Lektion 2 - Felder"
    }
   ]
  },
  {
   "artifact_name": "m.1",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "# Abschnitt 3\nThema dieses Abschnittes wird die objektorientierte Programmierung sein.\n\n## Lektion 1 - Klassen\nAufgrund der Kompatibilität mit Java ist auch Kotlin eine objektorientierte Sprache. Deswegen werden im Hintergrund alle Daten als Objekte behandelt. In Kotlin sind alle bekannten objektorientierte Konzepte vorhanden, jedoch angepasst und teilweise auch vereinfacht. Dazu ein Einführungsbeispiel. Es soll eine Klasse `Person` implementiert werden, die zwei Felder besitzt: `name` vom Typ `String`, das nur bei Objekterzeugung gesetzt wird, und `alter` vom Typ `Int`, das immer verändert werden kann.\n\n\n<table style=\"font-size:16px\">\n<thead>\n  <tr>\n    <th>Kotlin</th>\n    <th>Java</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>class Person (val name: String, var alter: Int)</code></td>\n    <td><code>public class Person{<br>&nbsp;&nbsp;&nbsp;&nbsp;private String name;<br>&nbsp;&nbsp;&nbsp;&nbsp;private int alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Person(String name, int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibName(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibAlter(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String setzeAlter(int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></td>\n  </tr>\n</tbody>\n</table>"
    }
   ]
  },
  {
   "artifact_name": "m.2",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "Es ist zu erkennen, dass der Kotlincode deutlich kürzer und übersichtlicher ist. Warum er so aussieht wird in den folgenden Lektionen genauer besprochen.\n\n### Felder\nFelder können Klassen einfach Hinzugefügt werden. Die erste Möglichkeit ist durch die Übergabeparameter der Klasse. Diese entsprechen den Parametern des Konstruktors und sind im Kopf der Klasse angesiedelt. Wird diesen bei öffentlicher Sichtbarkeit eine Variablenart (`val` oder `var`) zugewiesen, werden die Parameter zu Feldern umgewandelt. Das heißt es wird im Hintergrund ein Feld mit dem Namen des Parameters angelegt, welches bei Objekterzeugung mit dem Wert des Übergabeparameters gefüllt wird. Außerdem wird immer ein unsichtbarer Standard-Getter erzeugt. Wird dem Parameter `var` zugeordnet, wird zusätzlich ein rudimentärer Setter der Klasse hinzugefügt."
    }
   ]
  },
  {
   "artifact_name": "m.3",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "Eine weitere Möglichkeit Felder zu definieren ist klassisch zu Beginn im Rumpf der Klasse. Diese werden jedoch nicht automatisch bei Objekterzeugung, sondern mit dem angegebenen Standardwert gefüllt. Diesen wird auch je nach Typ im Hintergrund ein Getter und Setter bei Seite gestellt."
    }
   ]
  },
  {
   "artifact_name": "m.4",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "### Konstruktor\nMit dem Konstruktor können die Felder mit Werten bestückt werden. Aufgrund des Konstruktorwirrars in Java, unterscheidet Kotlin zwischen 2 verschiedenenen Arten:\n* primärer Konstruktor: Dieser Konstruktor muss mindestens ein Mal in jeder Klasse enthalten sein. Falls er nicht explizit definiert wird, wird ein automatisch generierter Konstruktor implizit hinzugefügt.\n* sekundärer Konstruktor: Eine Anweisung, die auf den primären Konstruktor verweist und eine alternative Handhabung des primären Konstruktors ermöglicht.\n#### Primärer Konstruktor\nDer primäre Konstruktor besitzt drei verschiedene Erscheinungsformen:\n<ul>\n    <li>Defaultkonstruktor</li>\n    <li>Konstruktor mit <code>init</code>-Block</li>\n    <li>Konstruktor durch direkte Zuweisung</li>\n</ul>\n\nIm folgenden wird auf alle Arten Bezug genommen und im Anschluss ein Vergleich angestellt.\n##### Defaultkonstruktor\nDen Defaultkonstruktor wurde bereits bei den [Feldern](#Felder) kennengelernt. Dieser wird vom Compiler für alle Parameter, die einem Variablentyp zugewiesen sind, generiert.  "
    }
   ]
  },
  {
   "artifact_name": "m.5",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "##### Konstruktor mit `init`-Block\nNatürlich kann der Konstruktor auch selbst, wie in Java gewohnt, definiert werden. Dieser ist zwischen der Deklaration der Felder und den Objektmethoden anzusiedeln. Eingeleitet wird er mit dem Schlüsselwort `init` gefolgt von einem Methodenrumpf. Anders als von Java gewöhnt werden dessen Parameter nicht direkt im Kopf des Konstruktors angegeben, sondern im Kopf der Klasse. Die dort definierten Parameter können im Konstruktor benutzt werden. Bei Namenskonflikten findet wieder das Schlüsselwort `this` Anwendung, das das aktuelle Objekt referenziert."
    }
   ]
  },
  {
   "artifact_name": "m.6",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "##### Konstruktor durch direkte Initialisierung\nEine weitere Möglichkeit der Initialisierung ist die Felder direkt bei der Deklaration den Parametern oder festgelegten Werten zuzuweisen."
    }
   ]
  },
  {
   "artifact_name": "m.7",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "##### Vergleich\nJede Erscheinungsform des Konstruktors hat seine Vorteile und Anwendungsbereiche. Während der Defaultkonstruktor bei einfachen Klassen, bei denen nicht mit den Übergabedaten vor der Zuweisung gearbeitet werden, zu bevorzugen ist, bieten die expliziten Konstruktoren genau das. Auf dem ersten Blick scheint es so, als benötige man den Konstruktor mit einem `init`-Block nicht, da die Parameter scheinbar mit dem gleichen Ergebnis direkt zugewiesen werden können. Jedoch ist dieser bei komplexeren Klassen zu bevorzugen, da dort alle Daten erst auf Richtigkeit geprüft werden und so beispielweise auch mit `try` und `catch` gearbeitet werden kann (näheres dazu in [Lektion X](Lektion-X---Fehlerbehandlung)).\n\n##### Kombination\nDie verschiedenen Konstruktoren können auch beliebig miteinander kombiniert werden. "
    }
   ]
  },
  {
   "artifact_name": "m.8",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "##### Mehrere primäre Konstruktoren\nEine wichtige Eigenschaft einer Klasse fehlt aber noch: Die Erzeugung eines Objekts mit unterschiedlichen Parameterprofilen. Dazu können in der Klasse mehrere primäre Konstruktoren implementiert werden. Diesen wird das Schlüsselwort `constructor` vorangestellt. Außerdem bekommt jeder Konstruktor sein eigenes Parameterprofil, mit dem dieser dann in dessen Rumpf arbeiten kann. Die Konstruktoren ähnelm dabei dem `init`-Verfahren, da sie alle ihren eigenen Rumpf besitzen. Die Parameterklammern der Klasse werden weggelassen."
    }
   ]
  },
  {
   "artifact_name": "m.9",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "markdown": "#### Sekundärer Konstruktor"
    },
    {
     "start_checkpoint": 1619167525913,
     "parent": "n.0.8",
     "markdown": "#### Sekundärer Konstruktor\nMit Hilfe eines sekundären Konstruktors ist es einfach möglich alternative Objekterzeugungen zu implementierten. Dazu wird ein primärer Konstruktor mit `this()` mit zu bestimmenden Parametern aufgerufen. Auch kann ein anderer sekündärer Konstruktor aufgerufen, jedoch muss am Ende ein Primärer benutzt werden, da nur dieser das Objekt erzeugen kann. Die Implementierung eines sekundären Konstruktors ähnelt der bei Benutzung mehrerer primärer Konstruktoren. Jedoch ist nur eine Anweisung erlaubt, die von den Parametern mit `:` getrennt wird. Diese muss einen Konstruktor aufrufen (`this()` oder `super()`)."
    }
   ]
  },
  {
   "artifact_name": "m.10",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "## Lektion X - Fehlerbehandlung"
    }
   ]
  },
  {
   "artifact_name": "m.11",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Aufgabe\nImplementieren Sie eine Klasse `Pizza`. Jede Pizza soll eine Größe `groeße` (zwischen 15 und 30 [cm], ansonsten -1) und eine Liste aus Belägen `belaege` (Standardmäßig bereits mit Tomatensoße und Käse befüllt) enthalten. Außerdem soll gespeichert werden, ob sie geschnitten `geschnitten` werden soll. Wählen Sie einen passenden primären Konstruktor, der für jedes Feld einen Übergabeparameter besitzt. Fügen Sie außerdem weitere (sekundäre) Konstruktoren hinzu, die eine Pizza Magaritha (Tomatensoße, Mozzarella) und eine 25cm Pizza al Tonno (Tomatensoße, Mozzarella, Thunfisch, Zwiebeln, Peperoni) initialisieren. Beide Pizzas sollen geschnitten werden."
    }
   ]
  },
  {
   "artifact_name": "m.12",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Getter und Setter\nEs können aber auch eigene Getter und Setter für jedes Feld definiert werden, falls der Variablentyp dies zulässt. Sie müssen direkt nach den Feld definiert werden. Auf der aktuelle Wert des Feldes kann mit `field` zugegriffen werden. Der Setter bekommt den neuen Wert als Parameter übergeben. Der Datentyp des Parameters muss nicht angegeben werden, da dieser durch das Feld gegeben ist, jedoch muss ihm ein Name zugewiesen werden, der im Rumpf den neuen Wert repräsentiert. Ein Wert wird dem Feld mit einer Zuweisung an `field` geändert. Es sind immer die Datentypen der Felder zu beachten."
    }
   ]
  },
  {
   "artifact_name": "m.13",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "#### Computed Properties\nDurch die Definition eigener Getter können Felder auch kleine Methoden darstellen ohne einen eigenen Wert zu speichern. So können beispielsweise berechnete Wahrheitswerte zurückgegeben werden. Diese Handhabung kann rudimentäre Methoden ersetzen. Als Beispiel wird die bereits kennengelernte Klasse `Person` mit einem berechnetem Feld `istVolljaerig` ergänzt."
    }
   ]
  },
  {
   "artifact_name": "m.14",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "#### Lazy Properties\nEine Variable oder ein Feld des Typs `val` kann mit dem Schlüsselwort `by lazy` träge gemacht werden. Das heißt, dass der Wert erst bei Verwendung berechnet wird. Dazu ist ein Lambda-Ausdruck nötig, dessen Ergebnis der Wert des Feldes oder der Variable ist. Wird die Variable danach noch einmal verwendet, wird der Wert jedoch nicht noch einmal berechnet, sondern der gespeicherte Wert wird verwendet.\n\nQuiz: Wie oft wird \"Wird berechnet...\" ausgegeben?"
    }
   ]
  },
  {
   "artifact_name": "m.15",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "#### `lateinit`\nEin weiteres ähnliches Konstrukt ist `lateinit`. Dies findet Anwendung, wenn ein Feld erst nach der Objekterzeugung einen Wert zurgewiesen bekommt. Dieses Feld kann dann im Konstruktor ignoriert werden.<br />\nVorraussetzungen:\n* Das Feld ist vom Typ `var`\n* Der Datentyp des Feldes ist nonnullable\n* Der Datentyp des Feldes ist nicht primitiv"
    }
   ]
  },
  {
   "artifact_name": "m.16",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "Einem `lateinit` Feld ist zusätzlich gespeichert, ob es bereits initialisiert wurde. Diese Information kann mit `this::name.isInitialized` abgerufen werden."
    }
   ]
  },
  {
   "artifact_name": "m.17",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Sichtbarkeiten\nBis jetzt wurden alle Variablen, Felder und Klassen öffentlich implementiert. Jedoch gibt es in Kotlin wie auch in Java Sichtbarkeiten, mit denen der Zugriff eingeschränkt werden kann.\n* `private`: Das Element kann nur in der Klasse verwendet werden. \n* `protected`: Erweitertung von `private`. Zusätzlich können auf die Elemente auch in Unterklassen zugegriffen werden.\n* `internal`: Erweiterung von `protected`. Das Element kann im ganzen Modul verwendet werden. Module können sich als größere Pakete vorgestellt werden.\n* `public`: Das Element kann überall benutzt werden."
    }
   ]
  },
  {
   "artifact_name": "m.18",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Methoden\nObjektmethoden sind mit normalen statischen Methoden zu vergleichen. Es kann die Kurzschreibweise angewendet und eine Sichtbarkeit zugewiesen werden. Auf Objektmethoden kann, wie in Java, mit der Punktnotation zugegriffen werden. Soll eine bereits generierte Methode, zum Beispiel `toString()`, überschrieben werden, muss der Methode das Schlüsselwort `override` vorangestellt werden."
    }
   ]
  },
  {
   "artifact_name": "m.19",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Aufgabe ??"
    }
   ]
  },
  {
   "artifact_name": "m.20",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "## Lektion 2 - Datenklassen\nZusätzlich zu normalen Klassen bietet Kotlin auch die Möglichkeit Klassen zu erstellen, die nur die Aufgabe der Speicherung von Daten haben. Auf den ersten Blick könnte dies auch mit normalen Klassen bewerkstelligt werden. Jedoch müssen dann alle Methoden per Hand implementiert werden. Beispielsweise `toString()`oder auch `equals()`. Um dem aus dem Weg zu gehen, gibt es Datenklassen. Für diese generiert der Kotlin-Compiler im Hintergrund folgende Methoden: `componentN()`, `copy()`, `equals()`, `hashCode()`, `toString()`. Gekennzeichnet werden Datenklassen mit dem Schlüsselwort `data class`."
    }
   ]
  },
  {
   "artifact_name": "m.21",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "Durch die Verwendung der `componentN()`-Methode kann auf mehrere Felder der Datenklasse zugeggriffen werden. Dabei bekommt jedes Feld eine eigene Nummer, beispielsweise x die Nummer 1, zugewisen. Wird `N` durch die Nummer ersetzt und auf dem Objekt aufgerufen, wird das Feld zurückgegeben. Auch können dadurch mehrere Felder abgerufen werden, indem eine Folge als Rückgabe erwartet wird."
    }
   ]
  },
  {
   "artifact_name": "m.22",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "Mit Hilfe von `copy()` kann ein neues Objekt mit den gleichen Daten erzeugt werden. Sollen bestimmte Felder aber einen anderen Wert bekommen, kann dies der Methode mit Namen des Feldes und dem gewünschten Wert übergeben werden."
    }
   ]
  },
  {
   "artifact_name": "m.23",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "Zusätzlich können auch weitere Felder in der Datenklasse hinzugefügt werden. Diese werden jedoch nicht bei den automatisch generierten Methoden berücksichtigt. Außerdem darf der primäre Konstruktor keine Parameter besitzen. Somit können die eigens erstellten Felder in der Klasse nur berechnet und nicht mit einem Parameter gefüllt werden."
    }
   ]
  },
  {
   "artifact_name": "m.24",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Aufgabe - TODO"
    }
   ]
  },
  {
   "artifact_name": "m.25",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "## Lektion 3 - Objekte\nEine Besonderheit von Kotlin ist, dass nicht jedes Objekt eine Klasse benötigt. Dadurch kann beispielsweise ein statisches Feld simuliert werden oder unkompliziert mehrere Daten an einem Ort zusammengefasst werden.\n### Ad-hoc Objekte\nMit sogeannten Ad-hoc Objekten können Daten ähnlich einer Map komprimiert werden. Es kann ein Objekt erzeugt werden ohne vorher eine Klasse angelegt zu haben. Dies ist mit dem Schlüsselwort `object` einzuleiten. Wie auch einer Klasse können dem Ad-hoch Objekt Felder zugewiesen werden."
    }
   ]
  },
  {
   "artifact_name": "m.26",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Singletons\nSingletons sind Objekte, die nur ein Mal erzeugt werden können und bis zum Ende der Ausführung bestehen. Ein solches Objekt wird mit dem Schlüsselwort `object` gekennzeichnet und kann nicht einer Variable zugewiesen werden, da es erst bei der ersten Benutzung erzeugt wird. Deswegen kann es auch nicht erzeugt werden. Dies wird automatisch beim ersten Aufruf, der in der Punktnotation mit dem Namen des Singletons erfolgt. Ein Singleton kann aus Feldern und Methoden bestehen. Ein Konstruktor kann jedoch nicht angewendet werden, da die Erzeugung ohne Übergabeparameter stattfindet."
    }
   ]
  },
  {
   "artifact_name": "m.27",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Companion Objekte\nEiner Klasse können sogenannte Companion Objekte angehängt werden. Diese sind für alle Objekte der Klasse gleich und ähneln somit statischen Variablen oder Methoden. Sie können nur in einer Klasse implementiert werden und besitzen das Schlüsselwort `companion object`. Im Hintergrund ist ein solches Konstrukt nichts weiter als ein Singleton einer Klasse das alle Objekte verwenden können. In dem Objekt können Felder und Methoden implementiert werden."
    }
   ]
  },
  {
   "artifact_name": "m.28",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "Falls in einer Klasse mehrere Companion Objekte gewünscht sind, ist ab dem Zweiten das Schlüsselwort `companion` wegzulassen und außerdem ein Name anzugeben. Außerhalb der Klasse kann auf das Objekt nur durch die Klasse und nicht einem Objekt der Klasse zugegriffen werden."
    }
   ]
  }
 ],
 "rawCells": [],
 "snippets": [],
 "output": [
  {
   "artifact_name": "o.0",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.1.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_6.jupyter.kts (4:57 - 62) Cannot access 'alter': it is private in 'Person'"
      }
     ]
    },
    {
     "start_checkpoint": 1619166409884,
     "parent": "c.1.0",
     "raw": [
      {
       "name": "stdout",
       "text": "Person 1, Line_0_jupyter$Person@642b2176: \nName: Max Mustermann, Alter: 21\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.1",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.2.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Marke von a1: BMW, Farbe von a1: Gelb.\nFarbe von a1 nach Umlackierung: Rot.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.2",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.3.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Marke von c1: Fuhitsu, ist c1 an?: false.\nist c1 an?: true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.3",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.4.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Die Flasche mit der Farbe Grau ist zu 20% gefüllt.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.4",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.5.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Bett b1: Länge 160, Breite 200, belegt false\nBett b2: Länge 0, Breite 50, belegt true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.5",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.6.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Tisch t1: Länge 100, Breite 100, Farbe Braun\nTisch t2: Länge 0, Breite 50, Farbe Weiß\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.6",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.7.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Stuhl s1: Länge 20, Breite 20, belegt true\nStuhl s2: Länge 0, Breite 30, belegt false\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.7",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.8.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Konstruktor eines normalen Fensters\nFenster fensterNormal: Länge 50, Breite 0, Zustand Gebraucht \n\nKonstruktor eines quadratischen Fensters\nFenster fensterQuadrat: Länge 60, Breite 60, Zustand Schmutzig \n\nKonstruktor eines neuen Fensters\nFenster fensterNeu: Länge 100, Breite 120, Zustand Neu\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.8",
   "versions": [
    {
     "start_checkpoint": 1619167416345,
     "parent": "c.12.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.9",
   "versions": [
    {
     "start_checkpoint": 1619167469117,
     "parent": "c.12.2",
     "raw": [
      {
       "name": "stdout",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.10",
   "versions": [
    {
     "start_checkpoint": 1619167525913,
     "parent": "c.12.4",
     "raw": [
      {
       "name": "stdout",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht.\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu.\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.11",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.13.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Person p1, Line_0_jupyter$Person@642b2176: \nName: Max Mustermann, Alter: 21\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.12",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.14.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.13",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.15.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_11.jupyter.kts (5:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (10:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (15:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (20:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (25:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (30:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (35:13 - 18) Unresolved reference: Pizza"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.14",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.16.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_21.jupyter.kts (50:13 - 18) None of the following functions can be called with the arguments supplied: \npublic constructor Pizza(groeße: Int) defined in Line_21_jupyter.Pizza\npublic constructor Pizza(groeße: Int, belaege: List<String>, geschnitten: Boolean) defined in Line_21_jupyter.Pizza"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.15",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.17.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Person p1: Name: Max Mustermann, Alter -1\nPerson p1: Name: Max Mustermann, Alter 21\nPerson p1: Name: Max Mustermann, Alter 21\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.16",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.18.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Person p1: Name: Max Mustermann, Alter 21, Volljährig true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.17",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.19.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Volljährigkeit wird berechnet...\ntrue\ntrue\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.18",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.20.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Volljährig\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.19",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.21.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "false\ntrue\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.20",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.22.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vor Geburtstag: Max Mustermann ist 30 Jahre alt.\nNach Geburtstag: Max Mustermann ist 31 Jahre alt.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.21",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.23.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Punkt p1: Punkt(x=0, y=0, z=0)\np1 und p2 sind ungleich.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.22",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.24.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "p1.component1(): 0\nx: 0, y: 1, z: 2\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.23",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.25.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "p1: Punkt(x=0, y=1, z=2)\np2: Punkt(x=0, y=1, z=2)\np3: Punkt(x=4, y=1, z=2)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.24",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.26.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Punkt p1 ist im Ursprung: true, Punkt(x=0, y=0, z=0)\nPunkt p2 ist im Ursprung: false, Punkt(x=1, y=1, z=1)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.25",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.27.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Kotlin\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.26",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.28.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Berechnung ohne Singleton: 15\nSingleton Rechner wurde erzeugt.\nBerechnung mit Singleton: 15\nZufallszahl des Singletons: 4\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.27",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.29.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Die Marikelnummer von Max ist 0.\nDie Marikelnummer von Anna ist 1.\nDie Marikelnummer von Simon ist 2.\nDie Marikelnummer von Sophie ist 3.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.28",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.30.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Die Nummer des Standard Companion Objects ist 1.\nDie Nummer des Companion Objects Zwei ist 2.\nDie Nummer des Companion Objects Drei ist 3.\nEs ist aktuell 15:48:34.186670 Uhr.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.29",
   "versions": [
    {
     "start_checkpoint": 1619273462931,
     "parent": "c.32.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Die Marikelnummer von Max ist 0.\nDie Marikelnummer von Anna ist 1.\nDie Marikelnummer von Simon ist 2.\nDie Marikelnummer von Sophie ist 3.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  }
 ]
}