{
 "checkpoints": [
  {
   "timestamp": 1617530107034,
   "notebook": 0,
   "targetCells": [
    {
     "cell": "m.0.0",
     "changeType": "added",
     "index": 0
    },
    {
     "cell": "m.1.0",
     "changeType": "added",
     "index": 1
    },
    {
     "cell": "m.2.0",
     "changeType": "added",
     "index": 2
    },
    {
     "cell": "m.3.0",
     "changeType": "added",
     "index": 4
    },
    {
     "cell": "m.4.0",
     "changeType": "added",
     "index": 6
    },
    {
     "cell": "m.5.0",
     "changeType": "added",
     "index": 8
    },
    {
     "cell": "m.6.0",
     "changeType": "added",
     "index": 9
    },
    {
     "cell": "m.7.0",
     "changeType": "added",
     "index": 11
    },
    {
     "cell": "m.8.0",
     "changeType": "added",
     "index": 13
    },
    {
     "cell": "m.9.0",
     "changeType": "added",
     "index": 15
    },
    {
     "cell": "m.10.0",
     "changeType": "added",
     "index": 17
    },
    {
     "cell": "m.11.0",
     "changeType": "added",
     "index": 18
    },
    {
     "cell": "m.12.0",
     "changeType": "added",
     "index": 19
    },
    {
     "cell": "c.0.0",
     "changeType": "added",
     "index": 20
    },
    {
     "cell": "c.1.0",
     "changeType": "added",
     "index": 3
    },
    {
     "cell": "c.2.0",
     "changeType": "added",
     "index": 5
    },
    {
     "cell": "c.3.0",
     "changeType": "added",
     "index": 7
    },
    {
     "cell": "c.4.0",
     "changeType": "added",
     "index": 10
    },
    {
     "cell": "c.5.0",
     "changeType": "added",
     "index": 12
    },
    {
     "cell": "c.6.0",
     "changeType": "added",
     "index": 14
    },
    {
     "cell": "c.7.0",
     "changeType": "added",
     "index": 16
    }
   ]
  },
  {
   "timestamp": 1617531702581,
   "notebook": 1,
   "targetCells": [
    {
     "cell": "c.8.0",
     "changeType": "added",
     "index": 19
    }
   ]
  },
  {
   "timestamp": 1617531789127,
   "notebook": 2,
   "targetCells": [
    {
     "cell": "c.8.1",
     "changeType": "edited",
     "output": [],
     "index": 19
    }
   ]
  },
  {
   "timestamp": 1617531804790,
   "notebook": 3,
   "targetCells": [
    {
     "cell": "c.8.2",
     "changeType": "edited",
     "output": [
      "o.7.0"
     ],
     "index": 19
    }
   ]
  },
  {
   "timestamp": 1617531808572,
   "notebook": 4,
   "targetCells": [
    {
     "cell": "c.8.3",
     "changeType": "edited",
     "output": [
      "o.8.0"
     ],
     "index": 19
    }
   ]
  },
  {
   "timestamp": 1617531823475,
   "notebook": 5,
   "targetCells": [
    {
     "cell": "c.8.4",
     "changeType": "edited",
     "output": [
      "o.9.0"
     ],
     "index": 19
    }
   ]
  },
  {
   "timestamp": 1617531826189,
   "notebook": 6,
   "targetCells": [
    {
     "cell": "c.8.5",
     "changeType": "edited",
     "output": [
      "o.10.0"
     ],
     "index": 19
    },
    {
     "cell": "m.11.1",
     "changeType": "edited",
     "index": 18
    }
   ]
  },
  {
   "timestamp": 1617531996674,
   "notebook": 7,
   "targetCells": [
    {
     "cell": "m.11.2",
     "changeType": "edited",
     "index": 18
    },
    {
     "cell": "m.0.1",
     "changeType": "edited",
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1617784478667,
   "notebook": 8,
   "targetCells": [
    {
     "cell": "m.13.0",
     "changeType": "added",
     "index": 6
    },
    {
     "cell": "m.14.0",
     "changeType": "added",
     "index": 21
    },
    {
     "cell": "c.9.0",
     "changeType": "added",
     "index": 22
    },
    {
     "cell": "m.15.0",
     "changeType": "added",
     "index": 23
    },
    {
     "cell": "c.10.0",
     "changeType": "added",
     "index": 24
    },
    {
     "cell": "c.11.0",
     "changeType": "added",
     "index": 26
    }
   ]
  },
  {
   "timestamp": 1617784850429,
   "notebook": 9,
   "targetCells": [
    {
     "cell": "m.1.0",
     "changeType": "removed",
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1617784852486,
   "notebook": 10,
   "targetCells": [
    {
     "cell": "m.2.1",
     "changeType": "edited",
     "index": 1
    },
    {
     "cell": "m.12.1",
     "changeType": "edited",
     "index": 24
    }
   ]
  },
  {
   "timestamp": 1617786662665,
   "notebook": 11,
   "targetCells": [
    {
     "cell": "m.16.0",
     "changeType": "added",
     "index": 24
    },
    {
     "cell": "m.17.0",
     "changeType": "added",
     "index": 25
    },
    {
     "cell": "c.12.0",
     "changeType": "added",
     "index": 26
    },
    {
     "cell": "c.13.0",
     "changeType": "added",
     "index": 27
    },
    {
     "cell": "c.14.0",
     "changeType": "added",
     "index": 28
    },
    {
     "cell": "c.15.0",
     "changeType": "added",
     "index": 29
    },
    {
     "cell": "c.16.0",
     "changeType": "added",
     "index": 30
    }
   ]
  },
  {
   "timestamp": 1617786730139,
   "notebook": 12,
   "targetCells": [
    {
     "cell": "m.17.1",
     "changeType": "edited",
     "index": 25
    }
   ]
  },
  {
   "timestamp": 1617786737850,
   "notebook": 13,
   "targetCells": [
    {
     "cell": "m.17.2",
     "changeType": "edited",
     "index": 25
    },
    {
     "cell": "c.5.0",
     "changeType": "output changed",
     "output": [
      "o.4.1"
     ],
     "index": 12
    },
    {
     "cell": "c.12.1",
     "changeType": "edited",
     "output": [
      "o.13.0"
     ],
     "index": 26
    },
    {
     "cell": "c.13.1",
     "changeType": "edited",
     "output": [
      "o.14.0"
     ],
     "index": 27
    }
   ]
  },
  {
   "timestamp": 1617786783122,
   "notebook": 14,
   "targetCells": [
    {
     "cell": "c.12.2",
     "changeType": "edited",
     "output": [
      "o.15.0"
     ],
     "index": 26
    },
    {
     "cell": "c.13.2",
     "changeType": "edited",
     "output": [
      "o.16.0"
     ],
     "index": 27
    },
    {
     "cell": "m.17.3",
     "changeType": "edited",
     "index": 25
    }
   ]
  },
  {
   "timestamp": 1617786907538,
   "notebook": 15,
   "targetCells": [
    {
     "cell": "c.17.0",
     "changeType": "added",
     "index": 26
    }
   ]
  },
  {
   "timestamp": 1617787283838,
   "notebook": 16,
   "targetCells": [
    {
     "cell": "m.17.4",
     "changeType": "edited",
     "index": 25
    }
   ]
  },
  {
   "timestamp": 1617787998861,
   "notebook": 17,
   "targetCells": [
    {
     "cell": "m.17.5",
     "changeType": "edited",
     "index": 25
    }
   ]
  },
  {
   "timestamp": 1617788006103,
   "notebook": 18,
   "targetCells": [
    {
     "cell": "m.17.6",
     "changeType": "edited",
     "index": 25
    }
   ]
  },
  {
   "timestamp": 1617788054738,
   "notebook": 19,
   "targetCells": [
    {
     "cell": "m.17.7",
     "changeType": "edited",
     "index": 25
    }
   ]
  },
  {
   "timestamp": 1617788097320,
   "notebook": 20,
   "targetCells": [
    {
     "cell": "m.17.8",
     "changeType": "edited",
     "index": 25
    }
   ]
  },
  {
   "timestamp": 1617788100945,
   "notebook": 21,
   "targetCells": [
    {
     "cell": "m.17.9",
     "changeType": "edited",
     "index": 25
    },
    {
     "cell": "c.17.1",
     "changeType": "edited",
     "output": [],
     "index": 26
    },
    {
     "cell": "c.18.0",
     "changeType": "added",
     "index": 27
    }
   ]
  },
  {
   "timestamp": 1618052509951,
   "notebook": 22,
   "targetCells": [
    {
     "cell": "c.19.0",
     "changeType": "added",
     "index": 26
    },
    {
     "cell": "m.18.0",
     "changeType": "added",
     "index": 27
    },
    {
     "cell": "c.20.0",
     "changeType": "added",
     "index": 28
    },
    {
     "cell": "m.19.0",
     "changeType": "added",
     "index": 29
    },
    {
     "cell": "c.21.0",
     "changeType": "added",
     "index": 30
    },
    {
     "cell": "m.20.0",
     "changeType": "added",
     "index": 31
    },
    {
     "cell": "c.22.0",
     "changeType": "added",
     "index": 32
    },
    {
     "cell": "m.21.0",
     "changeType": "added",
     "index": 33
    },
    {
     "cell": "c.23.0",
     "changeType": "added",
     "index": 34
    },
    {
     "cell": "m.22.0",
     "changeType": "added",
     "index": 35
    },
    {
     "cell": "c.24.0",
     "changeType": "added",
     "index": 36
    },
    {
     "cell": "m.23.0",
     "changeType": "added",
     "index": 37
    },
    {
     "cell": "m.24.0",
     "changeType": "added",
     "index": 40
    },
    {
     "cell": "c.25.0",
     "changeType": "added",
     "index": 41
    },
    {
     "cell": "c.26.0",
     "changeType": "added",
     "index": 42
    },
    {
     "cell": "m.25.0",
     "changeType": "added",
     "index": 43
    },
    {
     "cell": "m.26.0",
     "changeType": "added",
     "index": 44
    },
    {
     "cell": "c.27.0",
     "changeType": "added",
     "index": 45
    },
    {
     "cell": "m.27.0",
     "changeType": "added",
     "index": 46
    },
    {
     "cell": "c.28.0",
     "changeType": "added",
     "index": 47
    },
    {
     "cell": "m.28.0",
     "changeType": "added",
     "index": 48
    },
    {
     "cell": "c.29.0",
     "changeType": "added",
     "index": 49
    },
    {
     "cell": "m.29.0",
     "changeType": "added",
     "index": 50
    },
    {
     "cell": "c.30.0",
     "changeType": "added",
     "index": 51
    },
    {
     "cell": "m.30.0",
     "changeType": "added",
     "index": 52
    },
    {
     "cell": "c.31.0",
     "changeType": "added",
     "index": 53
    },
    {
     "cell": "c.32.0",
     "changeType": "added",
     "index": 54
    },
    {
     "cell": "m.31.0",
     "changeType": "added",
     "index": 55
    },
    {
     "cell": "c.33.0",
     "changeType": "added",
     "index": 56
    },
    {
     "cell": "m.32.0",
     "changeType": "added",
     "index": 57
    },
    {
     "cell": "c.34.0",
     "changeType": "added",
     "index": 58
    },
    {
     "cell": "m.33.0",
     "changeType": "added",
     "index": 59
    },
    {
     "cell": "c.35.0",
     "changeType": "added",
     "index": 60
    },
    {
     "cell": "m.34.0",
     "changeType": "added",
     "index": 61
    },
    {
     "cell": "c.36.0",
     "changeType": "added",
     "index": 62
    },
    {
     "cell": "m.35.0",
     "changeType": "added",
     "index": 63
    },
    {
     "cell": "c.37.0",
     "changeType": "added",
     "index": 64
    },
    {
     "cell": "m.36.0",
     "changeType": "added",
     "index": 65
    },
    {
     "cell": "c.38.0",
     "changeType": "added",
     "index": 66
    },
    {
     "cell": "m.37.0",
     "changeType": "added",
     "index": 67
    },
    {
     "cell": "c.39.0",
     "changeType": "added",
     "index": 68
    },
    {
     "cell": "m.38.0",
     "changeType": "added",
     "index": 69
    },
    {
     "cell": "c.40.0",
     "changeType": "added",
     "index": 70
    },
    {
     "cell": "c.41.0",
     "changeType": "added",
     "index": 71
    },
    {
     "cell": "m.39.0",
     "changeType": "added",
     "index": 72
    },
    {
     "cell": "m.40.0",
     "changeType": "added",
     "index": 73
    },
    {
     "cell": "c.42.0",
     "changeType": "added",
     "index": 74
    },
    {
     "cell": "m.41.0",
     "changeType": "added",
     "index": 75
    },
    {
     "cell": "c.43.0",
     "changeType": "added",
     "index": 76
    },
    {
     "cell": "m.42.0",
     "changeType": "added",
     "index": 77
    },
    {
     "cell": "c.44.0",
     "changeType": "added",
     "index": 78
    },
    {
     "cell": "m.43.0",
     "changeType": "added",
     "index": 79
    },
    {
     "cell": "c.45.0",
     "changeType": "added",
     "index": 80
    },
    {
     "cell": "c.46.0",
     "changeType": "added",
     "index": 81
    },
    {
     "cell": "m.44.0",
     "changeType": "added",
     "index": 82
    },
    {
     "cell": "c.47.0",
     "changeType": "added",
     "index": 83
    },
    {
     "cell": "m.45.0",
     "changeType": "added",
     "index": 84
    },
    {
     "cell": "c.48.0",
     "changeType": "added",
     "index": 85
    },
    {
     "cell": "m.46.0",
     "changeType": "added",
     "index": 86
    },
    {
     "cell": "c.49.0",
     "changeType": "added",
     "index": 87
    },
    {
     "cell": "m.47.0",
     "changeType": "added",
     "index": 88
    },
    {
     "cell": "c.50.0",
     "changeType": "added",
     "index": 89
    },
    {
     "cell": "m.48.0",
     "changeType": "added",
     "index": 90
    },
    {
     "cell": "c.51.0",
     "changeType": "added",
     "index": 91
    },
    {
     "cell": "m.49.0",
     "changeType": "added",
     "index": 92
    },
    {
     "cell": "c.52.0",
     "changeType": "added",
     "index": 93
    },
    {
     "cell": "m.50.0",
     "changeType": "added",
     "index": 94
    },
    {
     "cell": "c.53.0",
     "changeType": "added",
     "index": 95
    },
    {
     "cell": "c.54.0",
     "changeType": "added",
     "index": 96
    },
    {
     "cell": "m.51.0",
     "changeType": "added",
     "index": 97
    },
    {
     "cell": "c.55.0",
     "changeType": "added",
     "index": 98
    },
    {
     "cell": "m.52.0",
     "changeType": "added",
     "index": 99
    },
    {
     "cell": "c.56.0",
     "changeType": "added",
     "index": 100
    },
    {
     "cell": "m.53.0",
     "changeType": "added",
     "index": 101
    },
    {
     "cell": "c.57.0",
     "changeType": "added",
     "index": 102
    },
    {
     "cell": "m.54.0",
     "changeType": "added",
     "index": 103
    },
    {
     "cell": "c.58.0",
     "changeType": "added",
     "index": 104
    },
    {
     "cell": "m.55.0",
     "changeType": "added",
     "index": 105
    },
    {
     "cell": "c.59.0",
     "changeType": "added",
     "index": 106
    },
    {
     "cell": "m.56.0",
     "changeType": "added",
     "index": 107
    },
    {
     "cell": "c.60.0",
     "changeType": "added",
     "index": 108
    },
    {
     "cell": "m.57.0",
     "changeType": "added",
     "index": 109
    },
    {
     "cell": "c.61.0",
     "changeType": "added",
     "index": 110
    },
    {
     "cell": "m.58.0",
     "changeType": "added",
     "index": 111
    },
    {
     "cell": "c.62.0",
     "changeType": "added",
     "index": 112
    },
    {
     "cell": "m.59.0",
     "changeType": "added",
     "index": 113
    },
    {
     "cell": "c.63.0",
     "changeType": "added",
     "index": 114
    },
    {
     "cell": "m.60.0",
     "changeType": "added",
     "index": 115
    },
    {
     "cell": "c.64.0",
     "changeType": "added",
     "index": 116
    },
    {
     "cell": "m.61.0",
     "changeType": "added",
     "index": 117
    },
    {
     "cell": "c.65.0",
     "changeType": "added",
     "index": 118
    },
    {
     "cell": "m.62.0",
     "changeType": "added",
     "index": 119
    },
    {
     "cell": "c.66.0",
     "changeType": "added",
     "index": 120
    },
    {
     "cell": "m.63.0",
     "changeType": "added",
     "index": 121
    },
    {
     "cell": "c.67.0",
     "changeType": "added",
     "index": 122
    },
    {
     "cell": "m.64.0",
     "changeType": "added",
     "index": 123
    },
    {
     "cell": "c.68.0",
     "changeType": "added",
     "index": 124
    },
    {
     "cell": "c.69.0",
     "changeType": "added",
     "index": 125
    },
    {
     "cell": "c.70.0",
     "changeType": "added",
     "index": 126
    },
    {
     "cell": "c.71.0",
     "changeType": "added",
     "index": 127
    },
    {
     "cell": "m.65.0",
     "changeType": "added",
     "index": 128
    },
    {
     "cell": "c.72.0",
     "changeType": "added",
     "index": 129
    },
    {
     "cell": "c.73.0",
     "changeType": "added",
     "index": 130
    },
    {
     "cell": "c.74.0",
     "changeType": "added",
     "index": 131
    },
    {
     "cell": "m.66.0",
     "changeType": "added",
     "index": 132
    }
   ]
  }
 ],
 "notebook": {
  "artifact_name": "n.0",
  "versions": [
   {
    "start_checkpoint": 1617530107034,
    "cells": [
     "m.0.0",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.0",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617531702581,
    "cells": [
     "m.0.0",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.0",
     "c.8.0",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617531789127,
    "cells": [
     "m.0.0",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.0",
     "c.8.1",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617531804790,
    "cells": [
     "m.0.0",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.0",
     "c.8.2",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617531808572,
    "cells": [
     "m.0.0",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.0",
     "c.8.3",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617531823475,
    "cells": [
     "m.0.0",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.0",
     "c.8.4",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617531826189,
    "cells": [
     "m.0.0",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.1",
     "c.8.5",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617531996674,
    "cells": [
     "m.0.1",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.12.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1617784478667,
    "cells": [
     "m.0.1",
     "m.1.0",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.12.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1617784850429,
    "cells": [
     "m.0.1",
     "m.2.0",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.12.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1617784852486,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.12.1",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1617786662665,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.0",
     "c.12.0",
     "c.13.0",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617786730139,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.1",
     "c.12.0",
     "c.13.0",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617786737850,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.2",
     "c.12.1",
     "c.13.1",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617786783122,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.3",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617786907538,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.3",
     "c.17.0",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617787283838,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.4",
     "c.17.0",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617787998861,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.5",
     "c.17.0",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617788006103,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.6",
     "c.17.0",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617788054738,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.7",
     "c.17.0",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617788097320,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.8",
     "c.17.0",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1617788100945,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.9",
     "c.17.1",
     "c.18.0",
     "c.12.2",
     "c.13.2",
     "c.14.0",
     "c.15.0",
     "c.16.0"
    ]
   },
   {
    "start_checkpoint": 1618052509951,
    "cells": [
     "m.0.1",
     "m.2.1",
     "c.1.0",
     "m.3.0",
     "c.2.0",
     "m.13.0",
     "m.4.0",
     "c.3.0",
     "m.5.0",
     "m.6.0",
     "c.4.0",
     "m.7.0",
     "c.5.0",
     "m.8.0",
     "c.6.0",
     "m.9.0",
     "c.7.0",
     "m.10.0",
     "m.11.2",
     "c.8.5",
     "m.14.0",
     "c.9.0",
     "m.15.0",
     "c.10.0",
     "m.16.0",
     "m.17.9",
     "c.19.0",
     "m.18.0",
     "c.20.0",
     "m.19.0",
     "c.21.0",
     "m.20.0",
     "c.22.0",
     "m.21.0",
     "c.23.0",
     "m.22.0",
     "c.24.0",
     "m.23.0",
     "c.12.2",
     "c.13.2",
     "m.24.0",
     "c.25.0",
     "c.26.0",
     "m.25.0",
     "m.26.0",
     "c.27.0",
     "m.27.0",
     "c.28.0",
     "m.28.0",
     "c.29.0",
     "m.29.0",
     "c.30.0",
     "m.30.0",
     "c.31.0",
     "c.32.0",
     "m.31.0",
     "c.33.0",
     "m.32.0",
     "c.34.0",
     "m.33.0",
     "c.35.0",
     "m.34.0",
     "c.36.0",
     "m.35.0",
     "c.37.0",
     "m.36.0",
     "c.38.0",
     "m.37.0",
     "c.39.0",
     "m.38.0",
     "c.40.0",
     "c.41.0",
     "m.39.0",
     "m.40.0",
     "c.42.0",
     "m.41.0",
     "c.43.0",
     "m.42.0",
     "c.44.0",
     "m.43.0",
     "c.45.0",
     "c.46.0",
     "m.44.0",
     "c.47.0",
     "m.45.0",
     "c.48.0",
     "m.46.0",
     "c.49.0",
     "m.47.0",
     "c.50.0",
     "m.48.0",
     "c.51.0",
     "m.49.0",
     "c.52.0",
     "m.50.0",
     "c.53.0",
     "c.54.0",
     "m.51.0",
     "c.55.0",
     "m.52.0",
     "c.56.0",
     "m.53.0",
     "c.57.0",
     "m.54.0",
     "c.58.0",
     "m.55.0",
     "c.59.0",
     "m.56.0",
     "c.60.0",
     "m.57.0",
     "c.61.0",
     "m.58.0",
     "c.62.0",
     "m.59.0",
     "c.63.0",
     "m.60.0",
     "c.64.0",
     "m.61.0",
     "c.65.0",
     "m.62.0",
     "c.66.0",
     "m.63.0",
     "c.67.0",
     "m.64.0",
     "c.68.0",
     "c.69.0",
     "c.70.0",
     "c.71.0",
     "m.65.0",
     "c.72.0",
     "c.73.0",
     "c.74.0",
     "m.66.0"
    ]
   }
  ]
 },
 "codeCells": [
  {
   "output_histories": {},
   "artifact_name": "c.0",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.0",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.0"
   },
   "artifact_name": "c.1",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "literal": "var v1: Int = 0 //v1 kann nicht null werden\n//v1 = null -> Error: Null can not be a value of a non-null type Int\nprintln(\"v1: $v1\")\n\nvar v2: Int? = 0 //v2 kann null werden\nv2 = null\nprintln(\"v2: $v2\")\n\nval v3 = null //Datentyp: Nothing?",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 8,
      "ch": 33
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.1"
   },
   "artifact_name": "c.2",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "literal": "val v1: String? = \"Kotlin\"\n//val vsize1 = v1.length -> Error, da v1 null sein könnte und es nicht vorher überprüft wurde\nval size1 = if (v1 != null)\n            v1.length\n         else\n            -1\n\nval v2: String? = null\nval size2 = if (v2 != null)\n            v2.length\n         else\n            -1\nprintln(\"v1: $v1, Länge: $size1; v2: $v2, Länge: $size2; \")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 58
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.2"
   },
   "artifact_name": "c.3",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "literal": "val v1: String? = \"Kotlin\"\nval size1 = v1?.length\n\nval v2: String? = null\nval size2 = v2?.length\n\nprintln(\"v1: $v1, Länge: $size1; v2: $v2, Länge: $size2; \")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 6,
      "ch": 58
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.3"
   },
   "artifact_name": "c.4",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "literal": "val liste = listOf(\"Java\", null, \"Kotlin\", \"Lua\", null, \"C++\")\nfor (i in 0 until liste.size){\n    liste[i]?.let { println(it) }\n}",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.4"
   },
   "artifact_name": "c.5",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "literal": "//Lösung\n\nfun initArray() = Array<Int?>(5) { null }\n\nfun fillArray(array: Array<Int?>): Array<Int?> {\n    for (i in 0 until array.size){\n        if ((0..2).random() == 1){\n            array[i] = (0..20).random()\n        }\n    }\n    return array\n}\n\nfun printArray(array: Array<Int?>){\n    for(i in 0 until array.size){\n        array[i]?.let {print(\"$it \")}\n    }\n}\n\nprintArray(fillArray(initArray()))",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 19,
      "ch": 33
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.5"
   },
   "artifact_name": "c.6",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "literal": "//Besseres Beispiel\n\nfun foo (a: String?): Int {\n    val l = a?.length ?: return -1\n    return l\n}\nprintln(\"foo(null): ${foo(null)}\")\nprintln(\"foo('Kotlin'): ${foo(\"Kotlin\")}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 41
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.6"
   },
   "artifact_name": "c.7",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "literal": "val v1: String? = \"Kotlin\"\nval v2: String? = null\n\nprintln(v1?.length)\nprintln(v2!!.length)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 4,
      "ch": 19
     }
    }
   ]
  },
  {
   "output_histories": {
    "2": "o.7",
    "3": "o.8",
    "4": "o.9",
    "5": "o.10"
   },
   "artifact_name": "c.8",
   "versions": [
    {
     "start_checkpoint": 1617531702581,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1617531789127,
     "parent": "n.0.2",
     "literal": "val any: Any? = 0\n//Wenn Int\n(any as? Int)?.inc()\n//Wenn String\n(any as? String)?.toUpperCase()"
    },
    {
     "start_checkpoint": 1617531804790,
     "parent": "n.0.3",
     "literal": "val any: Any? = 0\n//Wenn Int\nprintln((any as? Int)?.inc())\n//Wenn String\n(any as? String)?.toUpperCase()"
    },
    {
     "start_checkpoint": 1617531808572,
     "parent": "n.0.4",
     "literal": "val any: Any? = \"Test\"\n//Wenn Int\nprintln((any as? Int)?.inc())\n//Wenn String\n(any as? String)?.toUpperCase()"
    },
    {
     "start_checkpoint": 1617531823475,
     "parent": "n.0.5",
     "literal": "val any: Any? = \"Test\"\n//Wenn Int\nprintln((any as? Int)?.inc())\n//Wenn String\nprintln((any as? String)?.toUpperCase())"
    },
    {
     "start_checkpoint": 1617531826189,
     "parent": "n.0.22",
     "literal": "val any: Any? = 0\n//Wenn Int\nprintln((any as? Int)?.inc())\n//Wenn String\nprintln((any as? String)?.toUpperCase())"
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.11"
   },
   "artifact_name": "c.9",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "n.0.22",
     "literal": "val liste1 = List<Int?>(5) {null}\nprintln(\"liste1: $liste1\")\n\nval liste2 = MutableList<Int>(5) {it}\n//liste2.add(null) -> Error: Null can not be a value of a non-null type Int\nprintln(\"liste2: $liste2\")\n\nval liste3 = MutableList<Int?>(5) {it}\nliste3.add(null) \nprintln(\"liste3: $liste3\")\n\nval liste4 = listOf(1,4,null,1,8,null) //Datentyp: Int?\nprintln(\"liste4: $liste4\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 25
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.12"
   },
   "artifact_name": "c.10",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "n.0.22",
     "literal": "val listeMitNull = listOf(1,4,null,1,8,null)\nval listeOhneNull = listeMitNull.filterNotNull()\nprintln(\"listeMitNull: $listeMitNull\")\nprintln(\"listeOhneNull: $listeOhneNull\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 39
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.11",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "n.0.8",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.13",
    "2": "o.15"
   },
   "artifact_name": "c.12",
   "versions": [
    {
     "start_checkpoint": 1617786662665,
     "parent": "n.0.11",
     "literal": "val startTime = System.currentTimeMillis()\n\nval liste = MutableList(100000) { it }\nfor(i in 0 until liste.size){\n    liste[i] *= liste[i] \n}\n\nval endTime = System.currentTimeMillis()\nprintln(\"Zeit mit Schleife: ${endTime - startTime}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 8,
      "ch": 51
     }
    },
    {
     "start_checkpoint": 1617786737850,
     "parent": "n.0.13",
     "literal": "val startTime = System.currentTimeMillis()\n\n/*val liste = MutableList(100000) { it }\nfor(i in 0 until liste.size){\n    liste[i] *= liste[i] \n}*/\n\nval endTime = System.currentTimeMillis()\nprintln(\"Zeit mit Schleife: ${endTime - startTime}\")"
    },
    {
     "start_checkpoint": 1617786783122,
     "parent": "n.0.22",
     "literal": "val startTime = System.currentTimeMillis()\n\nval liste = MutableList(100000) { it }\nfor(i in 0 until liste.size){\n    liste[i] *= liste[i] \n}\n\nval endTime = System.currentTimeMillis()\nprintln(\"Zeit mit Schleife: ${endTime - startTime}\")"
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.14",
    "2": "o.16"
   },
   "artifact_name": "c.13",
   "versions": [
    {
     "start_checkpoint": 1617786662665,
     "parent": "n.0.11",
     "literal": "val startTime = System.currentTimeMillis()\n\nvar liste = List(100000) { it }\nliste = liste.map { it * it }\n\nval endTime = System.currentTimeMillis()\nprintln(\"Zeit mit Lambda-Ausdruck: ${endTime - startTime}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 6,
      "ch": 58
     }
    },
    {
     "start_checkpoint": 1617786737850,
     "parent": "n.0.13",
     "literal": "val startTime = System.currentTimeMillis()\n\n/*var liste = List(100000) { it }\nliste = liste.map { it * it }*/\n\nval endTime = System.currentTimeMillis()\nprintln(\"Zeit mit Lambda-Ausdruck: ${endTime - startTime}\")"
    },
    {
     "start_checkpoint": 1617786783122,
     "parent": "n.0.22",
     "literal": "val startTime = System.currentTimeMillis()\n\nvar liste = List(100000) { it }\nliste = liste.map { it * it }\n\nval endTime = System.currentTimeMillis()\nprintln(\"Zeit mit Lambda-Ausdruck: ${endTime - startTime}\")"
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.14",
   "versions": [
    {
     "start_checkpoint": 1617786662665,
     "parent": "n.0.11",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.15",
   "versions": [
    {
     "start_checkpoint": 1617786662665,
     "parent": "n.0.11",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.16",
   "versions": [
    {
     "start_checkpoint": 1617786662665,
     "parent": "n.0.11",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.17",
   "versions": [
    {
     "start_checkpoint": 1617786907538,
     "parent": "n.0.15",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1617788100945,
     "parent": "n.0.21",
     "literal": "val liste = MutableList(100) { it }"
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.18",
   "versions": [
    {
     "start_checkpoint": 1617788100945,
     "parent": "n.0.21",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.17"
   },
   "artifact_name": "c.19",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val liste = MutableList(20) { it }\nprintln(\"Vorher: $liste\")\nfor (i in 0 until liste.size){\n    liste[i] += 5\n}\nprintln(\"Nachher: $liste\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 5,
      "ch": 25
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.18"
   },
   "artifact_name": "c.20",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "var liste = MutableList(20) { it }\nprintln(\"Vorher: $liste\")\nval listeNeu = liste.map( { elem: Int -> elem + 5 } )\nprintln(\"Nachher: $listeNeu\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 28
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.19"
   },
   "artifact_name": "c.21",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "var liste = MutableList(20) { it }\nprintln(\"Vorher: $liste\")\nval listeNeu = liste.map( { elem -> elem + 5 } )\nprintln(\"Nachher: $listeNeu\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 28
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.20"
   },
   "artifact_name": "c.22",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "var liste = MutableList(20) { it }\nprintln(\"Vorher: $liste\")\nval listeNeu = liste.map( { it + 5 } )\nprintln(\"Nachher: $listeNeu\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 28
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.21"
   },
   "artifact_name": "c.23",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "var liste = MutableList(20) { it }\nprintln(\"Vorher: $liste\")\nval listeNeu = liste.map() { it + 5 } \nprintln(\"Nachher: $listeNeu\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 28
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.22"
   },
   "artifact_name": "c.24",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "var liste = MutableList(20) { it }\nprintln(\"Vorher: $liste\")\nval listeNeu = liste.map { it + 5 } \nprintln(\"Nachher: $listeNeu\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 28
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.23"
   },
   "artifact_name": "c.25",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Gerüst\n//TODO \n\n//Test\nvar fehler = 0\nfor (i in 0..199 step 32){\n    if (liste[i] != i){\n        println(\"Fehler in liste! Element $i sollte eigentlich $i sein, ist aber ${liste[i]}\")\n        fehler++\n    }\n}\nif (listeUmgekehrt != liste.reversed()){\n    println(\"Fehler in listeUmgekehrt! \\nliste: $liste \\nlisteUmgekehrt: $listeUmgekehrt\")\n    fehler++\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 18,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.24"
   },
   "artifact_name": "c.26",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Lösung\n\nval liste = List(200) { it }\nval listeUmgekehrt = liste.map { 199 - it }\n\n\n//Test\nvar fehler = 0\nfor (i in 0..199 step 32){\n    if (liste[i] != i){\n        println(\"Fehler in liste! Element $i sollte eigentlich $i sein, ist aber ${liste[i]}\")\n        fehler++\n    }\n}\nif (listeUmgekehrt != liste.reversed()){\n    println(\"Fehler in listeUmgekehrt! \\nliste: $liste \\nlisteUmgekehrt: $listeUmgekehrt\")\n    fehler++\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 21,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.25"
   },
   "artifact_name": "c.27",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "var liste = MutableList(20) { it }\nprintln(\"Vorher: $liste\")\nval listeNeu = liste.map() {\n    if ((it % 2) == 0){\n        it / 2 //Ergebnis\n    }\n    else {\n        it //Ergebnis\n    }\n}\nprintln(\"Nachher: $listeNeu\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 10,
      "ch": 28
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.26"
   },
   "artifact_name": "c.28",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "fun div2 (liste: List<Int>): Boolean{\n    liste.map {\n        if ((it % 2) != 0){\n            return false //beendet die Methode div2\n        }\n    }\n    return true\n}\n\nval liste1 = listOf(2,4,6,8)\nprintln(\"Alle Elemente von liste1 sind durch 2 teilbar: ${div2(liste1)}\")\nval liste2 = listOf(1,2,3,4)\nprintln(\"Alle Elemente von liste2 sind durch 2 teilbar: ${div2(liste2)}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 72
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.27"
   },
   "artifact_name": "c.29",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "fun primzahlen(liste: List<Int>): List<Int?>{\n    return liste.map {\n        var prim = true\n        for(i in 2 until it){\n            if ((it % i) == 0) {\n                prim = false\n            }\n        }\n        if (prim)\n            it\n        else\n            null\n    }.filterNotNull() //wird nach Auswertung des Lambda-Ausdrucks angewendet\n}\n\nval liste1 = List(100) { it }\nprintln(\"Alle Primzahlen von liste1: ${primzahlen(liste1)}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 16,
      "ch": 59
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.28"
   },
   "artifact_name": "c.30",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val add5: (Int) -> Int = { a -> a + 5 }\n\nval liste = listOf(1,2,3,4,5)\nval listeNeu = liste.map (add5)\nprintln(listeNeu)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 4,
      "ch": 16
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.31",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "%use krangl",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 0,
      "ch": 10
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.32",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val dataUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/04-07-2021.csv\" //URL zur Raw-Datei der Daten\nval data = DataFrame.readCSV(dataUrl) //Liest die csv-Datei und wandelt sie in einen DataFrame um",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 96
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.29"
   },
   "artifact_name": "c.33",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "println(\"Anzahl der Spalten: ${data.ncol}\")\nprintln(\"Anzahl der Zeilen: ${data.nrow}\")\nprintln(\"Liste der Namen der Spalten: ${data.names}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 52
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.30"
   },
   "artifact_name": "c.34",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "data.head(10)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 0,
      "ch": 12
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.31"
   },
   "artifact_name": "c.35",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "data.schema()",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 0,
      "ch": 12
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.32"
   },
   "artifact_name": "c.36",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "data.select(\"Country_Region\", \"Deaths\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 0,
      "ch": 38
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.33"
   },
   "artifact_name": "c.37",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val aktiveFaelle = data.filterByRow { it[\"Deaths\"] as Int > 30000 }\naktiveFaelle.head(50)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 20
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.34"
   },
   "artifact_name": "c.38",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val liste = List(20) { it }\nval gefilterteListe = liste.filterNot { it > 10}\nprintln(\"gefilterteListe (it > 10): $gefilterteListe\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 53
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.35"
   },
   "artifact_name": "c.39",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val liste = listOf(\"Kotlin\", 2, \"Java\", 3.0, \"C\")\nval gefilterteListe = liste.filterIsInstance<String>()\nprintln(\"gefilterteListe (String): $gefilterteListe\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 52
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.36"
   },
   "artifact_name": "c.40",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//TODO\n\nif(zeilenDE.nrow == 17){\n    println(\"Richtig!\")\n}\nelse{\n    println(\"Falsch! Die Tabelle besitzt ${zeilenDE.nrow} Zeilen, es sollten jedoch 17 sein.\")\n}\nzeilenDE.head(17)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 8,
      "ch": 16
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.37"
   },
   "artifact_name": "c.41",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Lösung \nval zeilenDE = data.filterByRow { it[\"Country_Region\"] as String == \"Germany\"}\n\nif(zeilenDE.nrow == 17){\n    println(\"Richtig!\")\n}\nelse{\n    println(\"Falsch! Die Tabelle besitzt ${zeilenDE.nrow} Zeilen, es sollten jedoch 17 sein.\")\n}\nzeilenDE.head(17)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 9,
      "ch": 16
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.38"
   },
   "artifact_name": "c.42",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val toteAktive = data.rows.any { it[\"Deaths\"].toString() == it[\"Active\"].toString() && it[\"Deaths\"] != 0  }\nval filterToteAktive =  data.filterByRow { it[\"Deaths\"].toString() == it[\"Active\"].toString() && it[\"Deaths\"] != 0 }\nprintln(\"Es gibt einen Eintrag, in dem die Anzahl der Toten gleich den Aktiven ist: $toteAktive\")\nfilterToteAktive.head()",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 22
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.39"
   },
   "artifact_name": "c.43",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val datumHeute = \"2021-04-08\" //Format: Jahr-Monat-Tag\nval updateHeute = data.rows.all { (it[\"Last_Update\"] as String).contains(datumHeute)}\nval filterUpdateHeute =  data.filterByRow { (it[\"Last_Update\"] as String).contains(datumHeute) == false }\nprintln(\"Alle Einträge wurden heute zuletzt aktualisiert: $updateHeute\")\nfilterUpdateHeute.head(20)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 4,
      "ch": 25
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.40"
   },
   "artifact_name": "c.44",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val millionenBestaetigte = data.rows.none { (it[\"Confirmed\"] as Int) > 5000000 }\nval filterMillionenBestaetigte =  data.filterByRow { (it[\"Confirmed\"] as Int) > 5000000 }\nprintln(\"Es gibt keinen Eintrag, der mehr als 5 Millionen bestätigte Fälle besitzt: $millionenBestaetigte\")\nfilterMillionenBestaetigte.head(20)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 34
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.41"
   },
   "artifact_name": "c.45",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Grundgerüst\nfun List<String>.checkLaenge1(laenge: Int) =  all { /*TODO*/ }\nfun List<String>.checkLaenge2(laenge: Int) =  none { /*TODO*/ }\nfun List<String>.checkLaenge3(laenge: Int) =  any { /*TODO*/ }\n\nfun List<String>.checkBuchstabe1(buchstabe: Char) =  all { /*TODO*/ }\nfun List<String>.checkBuchstabe2(buchstabe: Char) =  none { /*TODO*/ }\nfun List<String>.checkBuchstabe3(buchstabe: Char) =  any { /*TODO*/ }\n\nvar fehler = 0\nval liste1 = listOf(\"Tertiär\", \"Senat\", \"Sklave\", \"Blatt\", \"Ruhm\", \"Pinguin\")\nif (liste1.checkLaenge1(4) != true){\n    println(\"Fehler! liste1.checkLaenge1(4) sollte eigentlich true sein, ist aber ${liste1.checkLaenge1(4)}\")\n    fehler++\n}\nif (liste1.checkLaenge2(4) != true){\n    println(\"Fehler! liste1.checkLaenge3(4) sollte eigentlich true sein, ist aber ${liste1.checkLaenge2(4)}\")\n    fehler++\n}\nif (liste1.checkLaenge3(4) != true){\n    println(\"Fehler! liste1.checkLaenge3(4) sollte eigentlich true sein, ist aber ${liste1.checkLaenge3(4)}\")\n    fehler++\n}\n\nif (liste1.checkLaenge1(7) != false){\n    println(\"Fehler! liste1.checkLaenge1(7) sollte eigentlich false sein, ist aber ${liste1.checkLaenge1(7)}\")\n    fehler++\n}\nif (liste1.checkLaenge2(7) != false){\n    println(\"Fehler! liste1.checkLaenge2(7) sollte eigentlich false sein, ist aber ${liste1.checkLaenge2(7)}\")\n    fehler++\n}\nif (liste1.checkLaenge3(7) != false){\n    println(\"Fehler! liste1.checkLaenge3(7) sollte eigentlich false sein, ist aber ${liste1.checkLaenge3(7)}\")\n    fehler++\n}\n\nval liste2 = listOf(\"Barretina\", \"Sockel\", \"Tablette\", \"Elefant\", \"Zauberstab\", \"Heer\")\nif (liste2.checkBuchstabe1('e') != true){\n    println(\"Fehler! liste2.checkBuchstabe1('e') sollte eigentlich true sein, ist aber ${liste2.checkBuchstabe1('e')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe2('e') != true){\n    println(\"Fehler! liste2.checkBuchstabe2('e') sollte eigentlich true sein, ist aber ${liste2.checkBuchstabe2('e')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe3('e') != true){\n    println(\"Fehler! liste2.checkBuchstabe3('e') sollte eigentlich true sein, ist aber ${liste2.checkBuchstabe3('e')}\")\n    fehler++\n}\n\nif (liste2.checkBuchstabe1('a') != false){\n    println(\"Fehler! liste2.checkBuchstabe1('a') sollte eigentlich false sein, ist aber ${liste2.checkBuchstabe1('a')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe2('a') != false){\n    println(\"Fehler! liste2.checkBuchstabe2('a') sollte eigentlich false sein, ist aber ${liste2.checkBuchstabe2('a')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe3('a') != false){\n    println(\"Fehler! liste2.checkBuchstabe3('a') sollte eigentlich false sein, ist aber ${liste2.checkBuchstabe3('a')}\")\n    fehler++\n}\n\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 67,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.42"
   },
   "artifact_name": "c.46",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Lösung\nfun List<String>.checkLaenge1(laenge: Int) =  all { it.length >= laenge }\nfun List<String>.checkLaenge2(laenge: Int) =  none { it.length < laenge }\nfun List<String>.checkLaenge3(laenge: Int) =  !any { it.length < laenge}\n\nfun List<String>.checkBuchstabe1(buchstabe: Char) =  all { it.contains(buchstabe) }\nfun List<String>.checkBuchstabe2(buchstabe: Char) =  none { !it.contains(buchstabe) }\nfun List<String>.checkBuchstabe3(buchstabe: Char) =  !any { !it.contains(buchstabe)}\n\nvar fehler = 0\nval liste1 = listOf(\"Tertiär\", \"Senat\", \"Sklave\", \"Blatt\", \"Ruhm\", \"Pinguin\")\nif (liste1.checkLaenge1(4) != true){\n    println(\"Fehler! liste1.checkLaenge1(4) sollte eigentlich true sein, ist aber ${liste1.checkLaenge1(4)}\")\n    fehler++\n}\nif (liste1.checkLaenge2(4) != true){\n    println(\"Fehler! liste1.checkLaenge3(4) sollte eigentlich true sein, ist aber ${liste1.checkLaenge2(4)}\")\n    fehler++\n}\nif (liste1.checkLaenge3(4) != true){\n    println(\"Fehler! liste1.checkLaenge3(4) sollte eigentlich true sein, ist aber ${liste1.checkLaenge3(4)}\")\n    fehler++\n}\n\nif (liste1.checkLaenge1(7) != false){\n    println(\"Fehler! liste1.checkLaenge1(7) sollte eigentlich false sein, ist aber ${liste1.checkLaenge1(7)}\")\n    fehler++\n}\nif (liste1.checkLaenge2(7) != false){\n    println(\"Fehler! liste1.checkLaenge2(7) sollte eigentlich false sein, ist aber ${liste1.checkLaenge2(7)}\")\n    fehler++\n}\nif (liste1.checkLaenge3(7) != false){\n    println(\"Fehler! liste1.checkLaenge3(7) sollte eigentlich false sein, ist aber ${liste1.checkLaenge3(7)}\")\n    fehler++\n}\n\nval liste2 = listOf(\"Barretina\", \"Sockel\", \"Tablette\", \"Elefant\", \"Zauberstab\", \"Heer\")\nif (liste2.checkBuchstabe1('e') != true){\n    println(\"Fehler! liste2.checkBuchstabe1('e') sollte eigentlich true sein, ist aber ${liste2.checkBuchstabe1('e')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe2('e') != true){\n    println(\"Fehler! liste2.checkBuchstabe2('e') sollte eigentlich true sein, ist aber ${liste2.checkBuchstabe2('e')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe3('e') != true){\n    println(\"Fehler! liste2.checkBuchstabe3('e') sollte eigentlich true sein, ist aber ${liste2.checkBuchstabe3('e')}\")\n    fehler++\n}\n\nif (liste2.checkBuchstabe1('a') != false){\n    println(\"Fehler! liste2.checkBuchstabe1('a') sollte eigentlich false sein, ist aber ${liste2.checkBuchstabe1('a')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe2('a') != false){\n    println(\"Fehler! liste2.checkBuchstabe2('a') sollte eigentlich false sein, ist aber ${liste2.checkBuchstabe2('a')}\")\n    fehler++\n}\nif (liste2.checkBuchstabe3('a') != false){\n    println(\"Fehler! liste2.checkBuchstabe3('a') sollte eigentlich false sein, ist aber ${liste2.checkBuchstabe3('a')}\")\n    fehler++\n}\n\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 67,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.43"
   },
   "artifact_name": "c.47",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val bayern = data.rows.find { it[\"Province_State\"] == \"Bayern\" }?.get(\"Confirmed\")\nprintln(\"Bestätigte Fälle in Bayern: $bayern\")\nval bayreuth = data.rows.find { it[\"Province_State\"] == \"Bayreuth\" }?.get(\"Confirmed\")\nprintln(\"Bestätigte Fälle in Bayreuth: $bayreuth\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.44"
   },
   "artifact_name": "c.48",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val bayern = data.rows.first { it[\"Province_State\"] == \"Bayern\" }?.get(\"Confirmed\")\nprintln(\"Bestätigte Fälle in Bayern: $bayern\")\nval bayreuth = data.rows.first { it[\"Province_State\"] == \"Bayreuth\" }?.get(\"Confirmed\")\nprintln(\"Bestätigte Fälle in Bayreuth: $bayreuth\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.45"
   },
   "artifact_name": "c.49",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val bayern = data.rows.firstOrNull { it[\"Province_State\"] == \"Bayern\" }?.get(\"Confirmed\")\nprintln(\"Bestätigte Fälle in Bayern: $bayern\")\nval bayreuth = data.rows.firstOrNull { it[\"Province_State\"] == \"Bayreuth\" }?.get(\"Confirmed\")\nprintln(\"Bestätigte Fälle in Bayreuth: $bayreuth\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.46"
   },
   "artifact_name": "c.50",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val liste = listOf(-5,-4,-3,-2,-1,1,2,3,4,5)\nval (negativ, positiv) = liste.partition { it < 0 }\nprintln(\"negativ: $negativ, positiv: $positiv\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 46
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.47"
   },
   "artifact_name": "c.51",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Beispiel 1: groupBy() mit automatischer Generierung\nval liste = listOf(\"Aber\", \"Also\", \"Aachen\", \"Berlin\", \"Bitte\", \"Klavier\", \"Hafen\", \"Hose\")\nval gruppen = liste.groupBy { it[0] }\nprintln(\"liste: $liste\")\nprintln(\"Nach Anfangsbuchstaben automatisch gruppiert: $gruppen\")\n\n//Beispiel 2: groupBy() mit eigenen Schlüsseln\nval gruppen2 = liste.groupBy { if (it[0] == 'A') \"Wörter mit A am Anfang\" else \"Rest\" }\nprintln(\"Nach Anfangsbuchstaben mit eigenen Schlüsseln gruppiert: $gruppen2\\n\")\n\n//Beispiel 3: gruppieren von Daten eines DataFrames\nval laender = data.groupBy(\"Country_Region\") //Gruppiert die Daten nach der Spalte Country_Region\nlaender.groups()[66] //Gibt die 66. Gruppe aus",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 45
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.48"
   },
   "artifact_name": "c.52",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "println(\"Anzahl an Zeilen: ${data.rows.count()}\")\nval zeilenDE = data.rows.count { it[\"Country_Region\"] == \"Germany\" }\nprintln(\"Anzahl an Zeilen von Deutschland: $zeilenDE\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 53
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.49"
   },
   "artifact_name": "c.53",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Grundgerüst\n//TODO\n\n//Test\nval anzahl = data.anzahlErhoehteSterblichkeit()\nif (anzahl == 23){\n    println(\"Richtig!\")\n}\nelse{\n    println(\"Falsch! Das Ergebnis von data.anzahlErhoehteSterblichkeit() ist ${data.anzahlErhoehteSterblichkeit()}, sollte aber eigentlich 23 sein.\")\n}",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 10,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.50"
   },
   "artifact_name": "c.54",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Lösung\nfun DataFrame.anzahlErhoehteSterblichkeit() = this.rows.count { \n    ((it[\"Confirmed\"] as Int) != 0) && ((it[\"Deaths\"] as Int)/((it[\"Confirmed\"] as Int).toDouble()) > 0.1 ) \n}\n\n//Test\nval anzahl = data.anzahlErhoehteSterblichkeit()\nif (anzahl == 23){\n    println(\"Richtig!\")\n}\nelse{\n    println(\"Falsch! Das Ergebnis von data.anzahlErhoehteSterblichkeit() ist ${data.anzahlErhoehteSterblichkeit()}, sollte aber eigentlich 23 sein.\")\n}",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.51"
   },
   "artifact_name": "c.55",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val listen = listOf(listOf(1, 2, 3), listOf(4, 5, 6), listOf(7, 8, 9))\nprintln(\"listen: $listen\")\nval flattenListe = listen.flatten()\nprintln(\"flattenListe: $flattenListe\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 37
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.52"
   },
   "artifact_name": "c.56",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val woerter = listOf(\"Schere\", \"Matratze\", \"Transport\")\nprintln(\"woerter: $woerter\")\n//map() und flatten()\nval woerterMap = woerter.map { it.map { it } }\nprintln(\"woerterMap: $woerterMap\")\nval woerterMapFlatten = woerterMap.flatten()\nprintln(\"woerterMapFlatten: $woerterMapFlatten\")\n\n//flatMap()\nval woerterFlatMap = woerterMap.flatMap { it }\nprintln(\"woerterFlatMap: $woerterFlatMap\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 10,
      "ch": 41
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.53"
   },
   "artifact_name": "c.57",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val woerter = listOf(\"aber\", \"also\", \"aachen\", \"berlin\", \"bitte\", \"klavier\", \"hafen\", \"hose\")\nval wort = liste.reduce {a, b -> if(a.count { it == 'a' } > b.count { it == 'a' }) a else b }\nprintln(\"Das Wort in woerter mit den meisten a ist: $wort\")\n\nfun ggt(a: Int, b: Int): Int {\n    if (b == 0) return a\n    return ggt(b, (a % b))\n}\n\nval zahlen = listOf(2,52,123,74,1824,453,128,78,26)\nval maxGgt100 = zahlen.reduce { a, b ->\n    val ggtA = ggt(a, 100)\n    val ggtB = ggt(b, 100)\n    if (ggtA > ggtB)\n        a\n    else\n        b  \n}\nprintln(\"Das Element von Liste, dass den größten gemeinsamen Teiler mit 100 besitzt, ist: $maxGgt100\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 18,
      "ch": 101
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.54"
   },
   "artifact_name": "c.58",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val liste1 = listOf(1,2,3,4,5,6,7,8,9)\nprintln(\"liste1: $liste1\")\nval liste2 = listOf(-1,-2,-3,-4,-5,-6,-7,-8,-9)\nprintln(\"liste2: $liste2\")\n\nval listeZip = liste1.zip(liste2)\nprintln(\"liste1.zip(liste2): $listeZip\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 6,
      "ch": 39
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.55"
   },
   "artifact_name": "c.59",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val (listeUnzip1, listeUnzip2) = listeZip.unzip()\nprintln(\"listeUnzip1: $listeUnzip1\")\nprintln(\"listeUnzip2: $listeUnzip2\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 35
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.56"
   },
   "artifact_name": "c.60",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val listeZipWithNext = liste1.zipWithNext { a, b -> \"$a$b\".toInt() }\nprintln(\"listeZipWithNext: $listeZipWithNext\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 45
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.57"
   },
   "artifact_name": "c.61",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//removeAll\nval fruechte = mutableListOf(\"Apfel\", \"Ananas\", \"Banane\",\"Clementine\", \"Datteln\")\nprintln(\"fruechte: $fruechte\")\nval ergebnis = fruechte.removeAll { it.count { it == 'a' } > 1 }\nprintln(\"Es wurden Einträge gefunden und mit removeAll() entfernt, die mehr als 1 a enthalten: $ergebnis\")\nprintln(\"fruechte nach dem Entfernen: $fruechte \\n\")\n\n//removeIf\nval fruechte2 = mutableListOf(\"Apfel\", \"Ananas\", \"Banane\",\"Clementine\", \"Datteln\")\nprintln(\"fruechte2: $fruechte2\")\nval ergebnis2 = fruechte2.removeIf { it.count { it == 'a' } > 1 }\nprintln(\"Es wurden Einträge gefunden und mit removeIf() entfernt, die mehr als 1 a enthalten: $ergebnis2\")\nprintln(\"fruechte2 nach dem Entfernen: $fruechte2\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 50
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.58"
   },
   "artifact_name": "c.62",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "fun DataFrame.entferneSpalten() = this.removeIf { (it is IntCol) == false }\n\nval testData = data.entferneSpalten()\nif (testData.names == listOf(\"Confirmed\", \"Deaths\"))\n    println(\"Richtig!\")\nelse\n    println(\"Falsch! Eigentlich sollten nur noch die Spalten ${listOf(\"Confirmed\", \"Deaths\")} vorhanden sein. Das Ergebnis ist jedoch ${testData.names} \")    ",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 6,
      "ch": 157
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.59"
   },
   "artifact_name": "c.63",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val liste = listOf(-3,-2,-1,0,1,2,3,4,5,6,7,8,9)\nval summe = liste.sum()\nprintln(\"Die Summe der Einträge von liste ist $summe.\")\nval summePositiv = liste.sumOf { it.absoluteValue }\nprintln(\"Die Summe der Beträge der Einträge von liste ist $summePositiv. \\n\")\n\nval summeBestaetigt = data.rows.sumOf { it[\"Confirmed\"] as Int }\nprintln(\"Anzahl der bestätigten Fälle weltweit: $summeBestaetigt\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 65
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.60"
   },
   "artifact_name": "c.64",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Angabe des Vergleichsorts\nval minBestaetigtDE = data.rows\n    .filter { it[\"Country_Region\"] == \"Germany\" && it[\"Province_State\"] != \"Unknown\" } //Filtert alle Zeilen, bei denen das Land Deutschland und das Bundesland nicht Unknown ist\n    .minByOrNull { it[\"Confirmed\"] as Int } //Sucht das Minimum in der Spalte Confirmed\nprintln(\"Das Bundesland mit den wenigsten bestätigten Fällen ist: ${minBestaetigtDE?.get(\"Province_State\")}\")\n\n//Angabe einer Anweisung. Hier: Gesucht ist das Minimum des Elements mit dem kleinstem Betrag.\nval liste = listOf(-3,-2,-1,0,1,2,3,4,5,6,7,8,9)\nval min = liste.minByOrNull { it.absoluteValue }\nprintln(\"Das Element der Liste liste mit dem kleinsten Betrag ist: $min\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 9,
      "ch": 72
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.61"
   },
   "artifact_name": "c.65",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Angabe des Vergleichsorts\nval maxBestaetigtDE = data.rows\n    .filter { it[\"Country_Region\"] == \"Germany\" && it[\"Province_State\"] != \"Unknown\" } //Filtert alle Zeilen, bei denen das Land Deutschland und das Bundesland nicht Unknown ist\n    .maxByOrNull { it[\"Confirmed\"] as Int } //Sucht das Maximum in der Spalte Confirmed\nprintln(\"Das Bundesland mit den meisten bestätigten Fällen ist: ${maxBestaetigtDE?.get(\"Province_State\")}\")\n\n//Angabe einer Anweisung. Hier: Gesucht ist das Minimum des Elements mit dem kleinstem Betrag.\nval liste = listOf(-3,-2,-1,0,1,2,3,4,5,6,7,8,9)\nval max = liste.maxByOrNull { it.absoluteValue }\nprintln(\"Das Element der Liste liste mit dem größten Betrag ist: $max\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 9,
      "ch": 70
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.62"
   },
   "artifact_name": "c.66",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val zeilen = data.rows.takeWhile { it[\"Deaths\"] as Int > 100 } //Nimmt alle Zeilen vom Start bis die Anzahl der Tode < 100 ist.\nfor (zeile in zeilen){\n    println(\"${zeile[\"Country_Region\"]}: ${zeile[\"Deaths\"]}\")\n}\n\nval zufall = (0..10).random()\nval zahl = zufall.takeIf { it < 5 } ?: -1\nprintln(\"\\nZahl: $zahl\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 23
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.63"
   },
   "artifact_name": "c.67",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "val liste = mutableListOf (1,2,3,4,5,6)\nliste.forEach { it: Int ->\n    val invertiert =  it * -1\n    println(\"$it & $invertiert\")\n}",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 4,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.64"
   },
   "artifact_name": "c.68",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Grundgerüst\nval schluessel = MutableList<String>(0) { \"\" }\n\n//TODO\n\n//Tests\nval combined_keys = data.cols[11].values().toList()\nvar fehler = 0\nvar tests = 0\nfor(i in 0 until combined_keys.size){\n    if (schluessel[i] != combined_keys[i] && combined_keys[i] != \"Northwest Territories,Canada\" && combined_keys[i] != \"District of Columbia, District of Columbia ,US\"){\n        println(\"Falsch! schluessel[$i]: ${schluessel[i]}; combined_keys[$i]: ${combined_keys[i]}\")\n        fehler++\n    }\n    tests++\n}\nif(fehler == 0)\n    println(\"Super! Alle $tests Tests bestanden!\")\nelse\n    println(\"Bei $fehler vom $tests Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 19,
      "ch": 60
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.65"
   },
   "artifact_name": "c.69",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "//Lösung\nval schluessel = MutableList<String>(0) { \"\" }\n\ndata.rows.forEach {\n    val land = it[\"Country_Region\"] as String\n    val region = it[\"Province_State\"] as String\n    val county = it[\"Admin2\"] as String\n    when {\n        region != \"\" && county != \"\" -> schluessel.add(\"$county, $region, $land\")\n        region != \"\" -> schluessel.add(\"$region, $land\")\n        else -> schluessel.add(\"$land\")\n    }\n}\n\n//Tests\nval combined_keys = data.cols[11].values().toList()\nvar fehler = 0\nvar tests = 0\nfor(i in 0 until combined_keys.size){\n    if (schluessel[i] != combined_keys[i] && combined_keys[i] != \"Northwest Territories,Canada\" && combined_keys[i] != \"District of Columbia, District of Columbia ,US\"){\n        println(\"Falsch! schluessel[$i]: ${schluessel[i]}; combined_keys[$i]: ${combined_keys[i]}\")\n        fehler++\n    }\n    tests++\n}\nif(fehler == 0)\n    println(\"Super! Alle $tests Tests bestanden!\")\nelse\n    println(\"Bei $fehler vom $tests Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 28,
      "ch": 60
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.66"
   },
   "artifact_name": "c.70",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "data.schema()",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 0,
      "ch": 12
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.67"
   },
   "artifact_name": "c.71",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "literal": "data.head(20)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 0,
      "ch": 12
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.72",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.73",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.74",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.68"
   },
   "artifact_name": "c.75",
   "versions": [
    {
     "start_checkpoint": 1618056280791,
     "literal": "data.head(20)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 0,
      "ch": 12
     }
    }
   ]
  }
 ],
 "markdownCells": [
  {
   "artifact_name": "m.0",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.0",
     "markdown": "# Abschnitt 2\nIn diesem Abschnitt wird die funktionale Programmierung in Kotlin näher beleuchtet."
    },
    {
     "start_checkpoint": 1617531996674,
     "parent": "n.0.22",
     "markdown": "# Abschnitt 2\nIn diesem Abschnitt wird die funktionale Programmierung sowie der Umgang mit `null` in Kotlin näher beleuchtet."
    }
   ]
  },
  {
   "artifact_name": "m.1",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.8",
     "markdown": "## Lektion 1 - Einführung\nWas ist funktionale Programmierung, funktionale Programmierung in Kotlin, grenzen, "
    }
   ]
  },
  {
   "artifact_name": "m.2",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.8",
     "markdown": "## Lektion 2 - Umgang mit Null\nIst eine Variable `null`, so ist diese mit keinem Wert belegt. Wird dann der Wert einer solchen Variable abgefragt, kommt es zu der bekannten Fehlermeldung `NullPointerException`. Der Grund ist dabei meist nicht direkt erkenntbar, da er irgendwo vor der Stelle stattgefunden hat. Dies führt zu langwierigen und nervigen Debugging. Das erkannte auch Tony Hoare, der Erfinder von `null`. 2009 nannte er seine Erfindung den \"[...] billion-dollar mistake\" ([Quelle](https://qconlondon.com/london-2009/qconlondon.com/london-2009/speaker/Tony+Hoare.html)). Den Ersteller:innen von Kotlin war dies bewusst und entschlossen sich dazu, Variablen in 2 weiter Typen zu unterteilen: \"nullable\" und \"non-nullable\" Variablen. Dadurch wurden die `NullPointerExceptions` zwar nicht überflüssig, sondern zu Fehlern, die bei der Kompilierung und nicht bei der Ausführung auftreten. Dies ist möglich, da bei der Deklarierung der Variable angegeben werden muss, ob diese den Wert `null` annehmen kann. Kenntlich gemacht wird das durch ein `?`. Bei der Deklarierung einer \"nullable\"-Variable muss der Datentyp angewendet werden."
    },
    {
     "start_checkpoint": 1617784852486,
     "parent": "n.0.22",
     "markdown": "## Lektion 1 - Umgang mit Null\nIst eine Variable `null`, so ist diese mit keinem Wert belegt. Wird dann der Wert einer solchen Variable abgefragt, kommt es zu der bekannten Fehlermeldung `NullPointerException`. Der Grund ist dabei meist nicht direkt erkenntbar, da er irgendwo vor der Stelle stattgefunden hat. Dies führt zu langwierigen und nervigen Debugging. Das erkannte auch Tony Hoare, der Erfinder von `null`. 2009 nannte er seine Erfindung den \"[...] billion-dollar mistake\" ([Quelle](https://qconlondon.com/london-2009/qconlondon.com/london-2009/speaker/Tony+Hoare.html)). Den Ersteller:innen von Kotlin war dies bewusst und entschlossen sich dazu, Variablen in 2 weiter Typen zu unterteilen: \"nullable\" und \"non-nullable\" Variablen. Dadurch wurden die `NullPointerExceptions` zwar nicht überflüssig, sondern zu Fehlern, die bei der Kompilierung und nicht bei der Ausführung auftreten. Dies ist möglich, da bei der Deklarierung der Variable angegeben werden muss, ob diese den Wert `null` annehmen kann. Kenntlich gemacht wird das durch ein `?`. Bei der Deklarierung einer \"nullable\"-Variable muss der Datentyp angewendet werden."
    }
   ]
  },
  {
   "artifact_name": "m.3",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "Im Code müssen dann alle Zugriffe auf eine `null`-Variable abgesichert sein. Das heißt es muss vorher geprüft werden, ob die Variable `null` ist oder nicht."
    }
   ]
  },
  {
   "artifact_name": "m.4",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "### Sicherer Zugriff\nJedes Mal vor einem Zugriff `null` mit einer Verzweigung zu prüfen kann lästig und platzraubend sein. Deswegen liefert Kotlin einen sogenannten sicheren Zugriff mit. Dieser kann mit `?.` benutzt werden. Im Hintergrund wird dann geprüft, ob die Variable `null` ist. Falls das der Fall sein sollte, wird `null` zurückgegeben. Ansonsten wird die Anweisung ausgeführt."
    }
   ]
  },
  {
   "artifact_name": "m.5",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "_Quiz: Welchen Typ hat die Variable size1_\n\nSichere Zugriffe können auch aneinander gehangen werden. Die Anweisung wird nur ausgeführt, wenn keine Variable den Wert `null` besitzt.\n```kotlin\nkurs?.person1?.name?.length\n```"
    }
   ]
  },
  {
   "artifact_name": "m.6",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "### `let`\nSoll eine Operation nur ausgeführt werden, wenn der Wert nicht `null` ist, kann `let` zusammen mit einem sicheren Zugriff verwendet werden. Dafür wird eine Lambda-Operation benötigt, die in [Lektion 3](#Lektion-3---Lambda-Operatoren) näher betrachtet werden. In dem Lamda-Ausdruck kann auf den Wert mit `it` zugegriffen werden."
    }
   ]
  },
  {
   "artifact_name": "m.7",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "#### Aufgabe\n- Schreiben Sie eine Methode `initArray`, die ein leeres Array `array` der Länge 5 mit null initialisiert und zurückgibt.\n- Schreiben Sie eine weitere Methode `fillArray`, die ein Array übergeben bekommt. Diese soll die Elemente des Arrays zu je einer Wahrscheinlichkeit von 50% mit zufälligen Zahlen zwischen 1 und 20 füllen.\n- Schreiben Sie eine dritte Methode `printArray`, die nur die gefüllten Einträge des Arrays ausgibt.\n- Testen Sie alle 3 Methoden aus."
    }
   ]
  },
  {
   "artifact_name": "m.8",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "### Elvis Operator\nMit `?.` wurde bereits eine Möglichkeit des sicheren Zugriffs vorgestellt. Jedoch wird, falls die Variable `null` ist, `null` zurückgeben. Dies ist nicht immer sinnvoll. Wenn dann ein bestimmter Wert zurückgegeben werden soll, ist der Elvis Operator `?:` zu bevorzugen. Es ist äquivalent:\n```kotlin\n    val v: String? = ?\n    \n    //Möglichkeit 1\n    val size = if (v != null)\n                    v.length\n               else\n                    -1\n\n    //Möglichkeit 2\n    val size = v?.length ?: -1\n```\n\nFalls die linke Seite von `?:` `null` ist, wird der Wert rechts zurückgegeben. Ansonsten wird die Anweisung ausgeführt. Der Elvis Operator kann auch in Verbindung mit `return` oder `throw` verwendet werden."
    }
   ]
  },
  {
   "artifact_name": "m.9",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "### `!!` Operator\nJedoch kann auch mit `NullPointerExceptions` gearbeitet werden. Mit `!!` wird die Variable in eine `non-nullable`-Variable umgewandelt. Sollte bei diesem Vorgang die Variable `null` sein, wird eine `NullPointerException` geworfen."
    }
   ]
  },
  {
   "artifact_name": "m.10",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.22",
     "markdown": "#### Aufgabe\nSchreiben Sie eine Methode _TODO_ zwei mal. Das erste Mal unter Verwendung des Elvis-Operatos. Bei der zweiten Implementierung soll der `!!`-Operator verwendet werden."
    }
   ]
  },
  {
   "artifact_name": "m.11",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.0",
     "markdown": "### Safe Casts"
    },
    {
     "start_checkpoint": 1617531826189,
     "parent": "n.0.6",
     "markdown": "### Safe Casts\nDie in Abschnitt 1 kennengelernte Typumwandlung kann noch weiter vereinfacht werden. Durch einen \"safe cast\" ist keine Überprüfung durch `is` mehr nötig. Das dafür benötigte Schlüsselwort ist `as?`. Sollte die Typumwandlung nicht gehen, wird der Ausdruck `null`. Falls doch, wird die Anweisung ausgeführt."
    },
    {
     "start_checkpoint": 1617531996674,
     "parent": "n.0.22",
     "markdown": "### Safe Casts\nDie in Abschnitt 1 kennengelernte Typumwandlung kann noch weiter vereinfacht werden. Durch einen \"safe cast\" ist keine Überprüfung durch `is` mehr nötig. Das dafür benötigte Schlüsselwort ist `as?`. Sollte die Typumwandlung nicht gehen, wird der Ausdruck `null`. Ansonsten wird die Variable zurückgegeben. Eine analoge `if`-Verzweigung sieht folgendermaßen aus:\n```kotlin\nval string = if (any is String) a else null\n```"
    }
   ]
  },
  {
   "artifact_name": "m.12",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "n.0.8",
     "markdown": "## Lektion 3 - Lambda-Operatoren"
    },
    {
     "start_checkpoint": 1617784852486,
     "parent": "n.0.10",
     "markdown": "## Lektion 2 - Lambda-Operatoren"
    }
   ]
  },
  {
   "artifact_name": "m.13",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "n.0.22",
     "markdown": "### Umsetzung im Java Byte Code - TODO"
    }
   ]
  },
  {
   "artifact_name": "m.14",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "n.0.22",
     "markdown": "### Datenstrukturen\nAuch können Datenstrukturen mit nullable Elementen gefüllt werden. Dafür muss bei der Deklarierung ein nullable Datentyp angegeben werden."
    }
   ]
  },
  {
   "artifact_name": "m.15",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "n.0.22",
     "markdown": "Eine Liste mit `null` kann in eine ohne `null` umgewandelt werden. Dies kann mit der Methode `filterNotNull()` bewerkstelligt werden."
    }
   ]
  },
  {
   "artifact_name": "m.16",
   "versions": [
    {
     "start_checkpoint": 1617786662665,
     "parent": "n.0.22",
     "markdown": "## Lektion 2 - Lambda-Ausdrücke"
    }
   ]
  },
  {
   "artifact_name": "m.17",
   "versions": [
    {
     "start_checkpoint": 1617786662665,
     "parent": "n.0.11",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)\nIn dieser Lektion wird es vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber dafür gibt es manchmal Geschwindigkeitseinbuße."
    },
    {
     "start_checkpoint": 1617786730139,
     "parent": "n.0.12",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)\nIn dieser Lektion wird es vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber dafür gibt es manchmal Geschwindigkeitseinbuße."
    },
    {
     "start_checkpoint": 1617786737850,
     "parent": "n.0.13",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nIn dieser Lektion wird es vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber dafür gibt es manchmal Geschwindigkeitseinbuße."
    },
    {
     "start_checkpoint": 1617786783122,
     "parent": "n.0.14",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nIn dieser Lektion wird es vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber im Gegenzug kann es manchmal zu Geschwindigkeitseinbußen kommen."
    },
    {
     "start_checkpoint": 1617787283838,
     "parent": "n.0.16",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nKotlin versteht sich selbst nicht als eine funktionale Programmiersprache. Da es auf der JVM aufbaut, wird der erste Gedanke zu Kotlin eher an die objektorientierte Seite denken. Jedoch wurden auch von den Entwickler:innen funktionale Aspekte eingebracht. So werden Funktionen als eigener _Datentyp_ angesehen. Sie können übergeben, zurückgegeben und auch in Datenstrukturen gespeichert werden.\nIn dieser Lektion wird es aber vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber im Gegenzug kann es manchmal zu Geschwindigkeitseinbußen kommen.\n\n"
    },
    {
     "start_checkpoint": 1617787998861,
     "parent": "n.0.17",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nKotlin versteht sich selbst nicht als eine funktionale Programmiersprache. Da es auf der JVM aufbaut, wird der erste Gedanke zu Kotlin eher an die objektorientierte Seite denken. Jedoch wurden auch von den Entwickler:innen funktionale Aspekte eingebracht. So werden Funktionen als eigener _Datentyp_ angesehen. Sie können übergeben, zurückgegeben und auch in Datenstrukturen gespeichert werden.\nIn dieser Lektion wird es aber vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber im Gegenzug kann es manchmal zu Geschwindigkeitseinbußen kommen.\n\n### Keine Angst vor Lambda\nWenn noch keine Erfahrungen in funktionaler Programmierung erlangt wurden, ist es sehr wahrscheinlich, dass man bei _Lambda_ zuerst an λ aus der Mathematik denkt. Aber keine Angst, damit hat es nichts zutun. In der funktionalen Programmierung sind Lambdas (oder auch Closures) vereinfachte Methoden, welche meist auf Datenstrukturen angewendet werden. Jedoch wird zusätzlich bei Datenstrukturen eine mitgelieferte Methode benötoigt, die den Lambda-Ausdruck anwenden kann. Schauen wir uns dazu ein einführendes Beispiel an:"
    },
    {
     "start_checkpoint": 1617788006103,
     "parent": "n.0.18",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nKotlin versteht sich selbst nicht als eine funktionale Programmiersprache. Da es auf der JVM aufbaut, wird der erste Gedanke zu Kotlin eher an die objektorientierte Seite denken. Jedoch wurden auch von den Entwickler:innen funktionale Aspekte eingebracht. So werden Funktionen als eigener _Datentyp_ angesehen. Sie können übergeben, zurückgegeben und auch in Datenstrukturen gespeichert werden.\nIn dieser Lektion wird es aber vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber im Gegenzug kann es manchmal zu Geschwindigkeitseinbußen kommen.\n\n### Keine Angst vor Lambda\nWenn noch keine Erfahrungen in funktionaler Programmierung erlangt wurden, ist es sehr wahrscheinlich, dass man bei _Lambda_ zuerst an λ aus der Mathematik denkt. Aber keine Angst, damit hat es nichts zutun. In der funktionalen Programmierung sind Lambdas (oder auch Closures) vereinfachte Methoden, welche meist auf Datenstrukturen angewendet werden. Jedoch wird zusätzlich bei Datenstrukturen eine mitgelieferte Methode benötoigt, die den Lambda-Ausdruck anwenden kann.<br>Schauen wir uns dazu ein einführendes Beispiel an:"
    },
    {
     "start_checkpoint": 1617788054738,
     "parent": "n.0.19",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nKotlin versteht sich selbst nicht als eine funktionale Programmiersprache. Da es auf der JVM aufbaut, wird der erste Gedanke zu Kotlin eher an die objektorientierte Seite denken. Jedoch wurden auch von den Entwickler:innen funktionale Aspekte eingebracht. So werden Funktionen als eigener _Datentyp_ angesehen. Sie können übergeben, zurückgegeben und auch in Datenstrukturen gespeichert werden.\nIn dieser Lektion wird es aber vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber im Gegenzug kann es manchmal zu Geschwindigkeitseinbußen kommen.\n\n### Keine Angst vor Lambda\nWenn noch keine Erfahrungen in funktionaler Programmierung erlangt wurden, ist es sehr wahrscheinlich, dass man bei _Lambda_ zuerst an λ aus der Mathematik denkt. Aber keine Angst, damit hat es nichts zutun. In der funktionalen Programmierung sind Lambdas (oder auch Closures) vereinfachte Methoden, welche meist auf Datenstrukturen angewendet werden. Jedoch wird zusätzlich bei Datenstrukturen eine mitgelieferte Methode benötoigt, die den Lambda-Ausdruck anwenden kann.<br>Schauen wir uns dazu ein einführendes Beispiel an: Alle Elemente einer Liste sollen mit 5 addiert werden."
    },
    {
     "start_checkpoint": 1617788097320,
     "parent": "n.0.20",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nKotlin versteht sich selbst nicht als eine funktionale Programmiersprache. Da es auf der JVM aufbaut, wird der erste Gedanke zu Kotlin eher an die objektorientierte Seite denken. Jedoch wurden auch von den Entwickler:innen funktionale Aspekte eingebracht. So werden Funktionen als eigener _Datentyp_ angesehen. Sie können übergeben, zurückgegeben und auch in Datenstrukturen gespeichert werden.\nIn dieser Lektion wird es aber vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber im Gegenzug kann es manchmal zu Geschwindigkeitseinbußen kommen.\n\n### Keine Angst vor Lambda\nWenn noch keine Erfahrungen in funktionaler Programmierung erlangt wurden, ist es sehr wahrscheinlich, dass man bei _Lambda_ zuerst an λ aus der Mathematik denkt. Aber keine Angst, damit hat es nichts zutun. In der funktionalen Programmierung sind Lambdas (oder auch Closures) vereinfachte Methoden, welche meist auf Datenstrukturen angewendet werden. Jedoch wird zusätzlich bei Datenstrukturen eine mitgelieferte Methode benötoigt, die den Lambda-Ausdruck anwenden kann.<br>Schauen wir uns dazu ein einführendes Beispiel an. In diesem sollen alle Elemente einer Liste mit 5 addiert werden. Zuerst die objektorientierte Lösung"
    },
    {
     "start_checkpoint": 1617788100945,
     "parent": "n.0.22",
     "markdown": "### Einführung\nSo genannte Lambda-Ausdrücke sind ein wichtiger Teil der funktionalen Programmierung in Kotlin. Eigenschaften dieses Programmierparadigmas sind:\n<ol>\n<li>Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.</li>\n<li>Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.</li>\n<li>Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.</li>\n<li>Eine Funktion kann auf Variablen Bezug nehmen, die dem Kontext angehören, in dem ihre Erstellung erfolgt ist. Dies kann sie auch dann noch tun, wenn sie den Kontext verlassen hat. Die Belegung der Variablen zum Zeitpunkt des Verlassens dieses Kontextes wird dann innerhalb dieser Funktion eingefroren. Eine so entstandene Funktion heißt Closure und die eingefrorenen Variablenbelegungen heißen Closure-Variablen.</li>\n<li>Funktionsdefinitionen können ohne explizite Namensgebung literal in der Stellung eines Funktionssymbols verwendet werden. Solche Funktionen heißen anonym und werden oft salopp „Lambdas“ genannt.</li>\n</ol>\n\n[Quelle](https://de.wikipedia.org/wiki/Funktionale_Programmierung#Definition)<br>\nKotlin versteht sich selbst nicht als eine funktionale Programmiersprache. Da es auf der JVM aufbaut, wird der erste Gedanke zu Kotlin eher an die objektorientierte Seite denken. Jedoch wurden auch von den Entwickler:innen funktionale Aspekte eingebracht. So werden Funktionen als eigener _Datentyp_ angesehen. Sie können übergeben, zurückgegeben und auch in Datenstrukturen gespeichert werden.\nIn dieser Lektion wird es aber vor Allem um Lambda-Ausdrücke gehen. Mit diesen ist es möglich in Verbindung mit speziellen Methoden Anweisungen bis hin zu ganzen Methoden auf Datenstrukturen anzuwenden. Dadurch enfällt die Verwendung von Schleifen. Ein solcher Ansatz hat den Vorteil, dass er sowohl eleganter als auch effizienter als die explizite Verwendung von Schleifen ist. Aber im Gegenzug kann es manchmal zu Geschwindigkeitseinbußen kommen.\n\n### Keine Angst vor Lambda\nWenn noch keine Erfahrungen in funktionaler Programmierung erlangt wurden, ist es sehr wahrscheinlich, dass man bei _Lambda_ zuerst an λ aus der Mathematik denkt. Aber keine Angst, damit hat es nichts zutun. In der funktionalen Programmierung sind Lambdas (oder auch Closures) vereinfachte Methoden, welche meist auf Datenstrukturen angewendet werden. Jedoch wird zusätzlich bei Datenstrukturen eine mitgelieferte Methode benötoigt, die den Lambda-Ausdruck anwenden kann.<br>Schauen wir uns dazu ein einführendes Beispiel an. In diesem sollen alle Elemente einer Liste mit 5 addiert werden. Zuerst die objektorientierte Lösung:"
    }
   ]
  },
  {
   "artifact_name": "m.18",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Für die funktionale Lösung wird ein Lambda-Ausdruck und eine Methode, die diesen auf der Liste anwendet, benötigt. Kümmern wir uns zuerst um die Methode. Wenn eine Methode auf jedes Element einer Liste angewendet werden soll, kommt `map` zum Einsatz. Sie gibt eine Datenstruktur (in diesem Fall eine Liste) zurück, bei der eine Methode (genauer ein Lambda-Ausdruck) auf jedes Element angewendet wurde. Der Lambda-Ausdruck muss `map` als Parameter übergeben werden.<br>\nEin Lambda wird von geschweiften Klammern ummantelt. Im Inneren wird eine Funktion in einer besonderen Schreibweise definiert. Auf der linken Seite werden die Parameter mit Name und Datentyp angegeben. Die rechte Seite beinhaltet den Methodenrumpf. Getrennt werden die beiden Seiten mit `->`. <br>Daraus ergibt sich folgender Syntax:<br>\n>Lambda-Ausdruck -> \"{\" Parameter \"->\" Methodenrumpf \"}\"<br>\nParameter -> Name \":\" Datentyp {\",\" Parameter}\n\nIn unserem Beispiel möchten wir die Methode `map` auf eine Liste mit Elementen des Datentyps `Int` anwenden. Nach der Definition von `map` wird der Methodenrumpf immer auf das aktuelle ELement angewendet. Daraus lässt sich schlussfolgern, dass wir einen Parameter benötigen, der den Datentyp der Elemente besitzt. Der Methodenrumpf muss einen Wert \"zurückgeben\" (es wird kein `return` verwendet), der dem aktuellen Element (dem Parameter) zugewiesen wird.\nDies kann man sich folgendermaßen vorstellen:<br>\n```kotlin\n{ elem: Int -> elem + 5}\n//Entspricht\nelem = elem + 5\n```\nDaraus ergibt sich folgende funktionale Lösung des Beispiels:"
    }
   ]
  },
  {
   "artifact_name": "m.19",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Dieser Ausdruck kann aber noch weiter verkürzt und verschönert werden. Da dem Kompiler klar ist, dass in unseren Fall `elem` immer vom Typ `Int` ist, da der Ausdruck auf eine Liste mit `Int`-Elementen angewendet wird, kann der Datentyp des Parameters weggelassen werden."
    }
   ]
  },
  {
   "artifact_name": "m.20",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Falls nur ein Parameter verwendet wird, kann dieser ebenfalls weggelassen werden. Auf den im Hintergund definierten Parameter kann mit `it` zugegriffen werden."
    }
   ]
  },
  {
   "artifact_name": "m.21",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Außerdem ist es üblich den Lambda-Ausdruck nicht zu übergeben, sondern hinter der Parameterliste zu übergeben. Dies ist nur möglich, falls der Ausdruck der letzte Parameter ist (was der Regelfall ist)."
    }
   ]
  },
  {
   "artifact_name": "m.22",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Werden der Methode keine weiteren Parameter übergeben, können die leeren Klammern auch weggelassen werden."
    }
   ]
  },
  {
   "artifact_name": "m.23",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Wie bereits in der Einfühung erwähnt, ist die funktionale Lösungen meist langsamer als die Objektorientierte. Um dies festzustellen, wurden beide Lösungen mit einer Zeitmessung versehen:"
    }
   ]
  },
  {
   "artifact_name": "m.24",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### Aufgabe\nVervollständigen Sie folgenden Code, sodass zuerst eine Liste `liste` mit 200 Elementen erstellt wird, welche mit deren Index gefüllt sind. Benutzen Sie daraufhin die Methode `map` in Verbindung mit einem passendem Lambda-Ausdruck, sodass die Werte der Liste umgedreht und in einer neuen Liste `listeUmgekehrt` gespeichert werden. (Beispiel: Voher: [0, 1, 2, 3], Nachher: [3, 2, 1, 0])"
    }
   ]
  },
  {
   "artifact_name": "m.25",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "### Erweiterte Lambda-Ausdrücke"
    }
   ]
  },
  {
   "artifact_name": "m.26",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "In dem Methodenrumpf von Lambda-Ausdrücken ist auch komplexere Programmierung möglich. So können beispielsweise Kontrollstrukturen eingebunden werden:"
    }
   ]
  },
  {
   "artifact_name": "m.27",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "In dem obigen Beispiel werden alle Elemente durch 2 geteilt, falls es keinen Rest gibt.<br />\nEs fällt auf, dass ein explizites `return`-Statement fehlt. Das Ergbenis des Lambda-Ausdrucks ist immer die letzte Anweisung oder Variable. Das heißt aber nicht, dass garkein `return` verwendet werden kann. Falls ein Lambda-Ausdruck in einer Methode zu finden ist, wird mit dem `return` in dem Lambda die Methode beendet."
    }
   ]
  },
  {
   "artifact_name": "m.28",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Auch können in einem Lambda-Ausdruck Schleifen oder Variablen verwendet werden. Außerdem können auf diesen auch Methoden der Datenstruktur, die dieser zurückgibt, angewendet werden."
    }
   ]
  },
  {
   "artifact_name": "m.29",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Anstelle einer Definition des Methodenrumpfes kann einem Lambda-Ausdruck auch ein vordefinierter Lambda-Ausdruck, der in einer Variable gespeichert wurde, benutzt werden. Dabei ist zu beachten, dass die Parameter und der Rückgabetyp übereinstimmen."
    }
   ]
  },
  {
   "artifact_name": "m.30",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "### Lambda-Ausdrücke in Verbindung mit ausgewählten Methoden und Datenstrukturen\nIm folgenden werden verschiedene Methoden zur Bearbeitung von Datenstrukturen und Lambda-Ausdrücke behandelt. Dazu wird die Kotlin Bibliothek `krangl` verwendet. Mit dieser können Daten tabellarisch dargestellt werden. Als Daten werden die (aktuellen) weltweiten Covid-19 Zahlen von [JHU CSSE COVID-19 Data](https://github.com/CSSEGISandData/COVID-19) verwendet. In `dataUrl` ist eine URL zu bereits veralteten Daten angegeben. Möchten Sie mit aktuellen Daten (von [hier](https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_daily_reports)) arbeiten, können Sie die URL der **Raw-Datei** austauschen. Dies könnte aber dazu führen, dass die Tests der Aufgaben diese nicht mehr verifizieren.\nEin kleines Einführungsbeispiel zur Bibliothek:"
    }
   ]
  },
  {
   "artifact_name": "m.31",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "In der Variable `data` sind im folgenden die Rohdaten als `DataFrame` ([Dokumentation](https://holgerbrandl.github.io/krangl/javadoc/krangl/krangl/-data-frame/index.html)) gespeichert. Ein `DataFrame` besitzt folgende Attribute:\n<ul>\n    <li><code>cols: List&lt;DataCol></code>: Liste der Spalten</li>\n    <li><code>ncols: Int</code>: Anzahl der Spalten</li>\n    <li><code>rows: Iterable&lt;DataFrameRow></code>: Liste der Zeilen</li>\n    <li><code>nrows: Int</code>: Anzahl der Zeilen</li>\n    <li><code>names: List&lt;String></code>: Liste der Namen der Spalten</li>\n</ul>"
    }
   ]
  },
  {
   "artifact_name": "m.32",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Die Daten können mit Hilfe von `head(n)` ausgegeben werden. Dabei ist `n` die Anzahl der Zeilen. Maximal können 20 Zeilen ausgegeben werden."
    }
   ]
  },
  {
   "artifact_name": "m.33",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Die Datentypen der Spalten können mit `schema()` angezeigt werden."
    }
   ]
  },
  {
   "artifact_name": "m.34",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Sollen nur bestimmte Spalten ausgegeben werden, findet `select()` Anwendung. Als Parameter werden die Namen der Spalten übergeben."
    }
   ]
  },
  {
   "artifact_name": "m.35",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `filter`\nMit Hilfe von `filter()` können Daten in einer Datenstruktur anhand einer Bedingung aussortiert werden. Es werden nur die Daten zurückgegeben, die der Bedingung entsprechen.<br />\nIm folgenden Beispiel sollen alle Zeilen ausgegeben werden, die mehr als 30000 Tote haben. Statt `filter()` wird `filterByRow()` benutzt, da die Zeilen gefiltert werden soll. Außerdem muss dem Kompiler mit einer Typumwandlung klar gemacht werden, dass in dieser Zeile ein Wert des Typs `Int` zu finden ist. Dies ist bei bei jedem Zugriff auf einen EIntrag nötig. "
    }
   ]
  },
  {
   "artifact_name": "m.36",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Abgesehen von der normalen Filterung gibt es auch einige Abwandlungen, die jedoch nicht bei einem `DataFrame` angewendet werden können. <br />\n`filterNot()` dreht die `filter()`-Methode um und filtert alles, was nicht der Bedingung entspricht."
    }
   ]
  },
  {
   "artifact_name": "m.37",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "Die Abwandlung `filterNotNull()` wurde bereits in [Lektion 1](#Datenstrukturen) vorgestellt.<br />\nSind in einer Datenstruktur Elemente mehrerer Datentypen vorhanden, kann mit der Methode `filterIsInstance()` nach einem Datentyp gefiltert werden. Dieser wird als eine Art generischer Parameter vor den runden Klammern angegeben."
    }
   ]
  },
  {
   "artifact_name": "m.38",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### Aufgabe\nFiltern Sie alle Zeilen heraus, die Deutschland betreffen und speichern sie diese in der Variable `zeilenDE`."
    }
   ]
  },
  {
   "artifact_name": "m.39",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `any`, `all` und `none`\nMit diesen Methoden kann herausgefunden werden, ob bestimmte Aussagen über die Elemente einer Datenstruktur wahr sind."
    }
   ]
  },
  {
   "artifact_name": "m.40",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `any`\n`any()` testet, ob es ein Element gibt, bei der die Aussage zutrifft. In diesem Fall wird `true` zurückgegeben, ansonsten `false`."
    }
   ]
  },
  {
   "artifact_name": "m.41",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `all`\n`all()` findet heraus, ob die Aussage für alle Elemente wahr ist."
    }
   ]
  },
  {
   "artifact_name": "m.42",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `none`\n`none()` ist das Gegenteil zu `all()`. Es wird `true` zurückgegeben, falls die Bedinung für alle Elemente falsch ist."
    }
   ]
  },
  {
   "artifact_name": "m.43",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### Aufgabe\nWährend der Vorstellung der drei Methoden könnte aufgefallen sein, dass sie sich gegenseitig beeinflussen. Genau dies soll in dieser Aufgabe genutzt werden. Vervollständigen Sie folgendes Grundgerüst, sodass alle Tests keine Fehler aufweisen. Die Methode `checkLaenge()` soll `true` zurückgeben, falls jede Zeichenkette der Liste länger als die übergebene Länge ist. `checkBuchstabe()` soll überprüfen, ob jede Zeichenkette der Liste den übergebenen Buchstaben beinhaltet."
    }
   ]
  },
  {
   "artifact_name": "m.44",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `find`, `first` und `firstOrNull`\n##### `find`\nWird ein Element gesucht, findet `find()` Anwendung. Diese Methode gibt das erste gefundene Element, bei dem die Bedingung wahr ist zurück. Falls kein Element gefunden wird, ist das Ergebnis `null`."
    }
   ]
  },
  {
   "artifact_name": "m.45",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `first`\nEine ähnliche Funktionalität besitzt `first()`. Jedoch wird, falls kein Element gefundenden wurde, eine `NoSuchElementException` geworfen."
    }
   ]
  },
  {
   "artifact_name": "m.46",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `firstOrNull`\n`firstOrNull()` erweitert die `first()`-Methode dadurch, dass bei Fehlschlag `null` zurückgegeben wird anstelle des Fehlers. Diese Methode besitzt die gleiche Funktionalität wie `find()`."
    }
   ]
  },
  {
   "artifact_name": "m.47",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `partition`\n`partition()` ähnelt der bereits kennengelernten Methode `filter()`. Eine Datenstruktur wird wieder anhand einer Bedingung gefiltert und das Ergebnis zurückgegeben. Jedoch gibt es hier zwei Ergebnisse. Das Erste beinhaltet alle Elemente, auf die die Bedinung zutrifft, während in dem Zweiten alle Anderen Elemente zu finden sind."
    }
   ]
  },
  {
   "artifact_name": "m.48",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `groupBy`\nWährend `partition()` die Datenstruktur nur in zwei neue Datenstrukturen aufteilt, kann dies mit `groupBy` noch erweitert werden. Hier ist eine Unterteilung in beliebig viele Gruppen möglich. Die Bedingung anhand derer die Gruppen eingeteilt werden, wird in einem Lambda-Ausdruck festgelegt. Das Ergebnis sind eine Map, die als Schlüssel das Identifikationsmerkmal der Gruppe und als Wert zugehörigen Elemente als Liste besitzt. Außerdem ist es auch möglich die Schlüssel dieser Map selbst festzulegen anstelle einer automatischen Generierung. Dabei ist der Schlüssel das Ergebnis des Lambda-Ausdrucks."
    }
   ]
  },
  {
   "artifact_name": "m.49",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `count`\nMit `count()` kann die Anzahl der Fälle zurück, die die Bedingung des Lambda-Ausdrucks erfüllt. Wird auf den Lambda-Ausdruck verzichtet, wird die Anzahl der Elemente zurückgegeben."
    }
   ]
  },
  {
   "artifact_name": "m.50",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### Aufgabe\nSchreiben Sie eine Erweiterungsmethode `anzahlErhoehteSterblichkeit` für die Klasse `DataFrame`, die die Anzahl an Einträgen zurückgibt, die eine erhöhte Sterblichkeit aufweisen. Es wird zur Vereinfachung angenommen, dass eine erhöhte Sterblichkeit ab Tote/bestätigte Fälle > 10% vorliegt. \n<details><summary>Tipp 1</summary><p>Mit <code>data.schema()</code> können Sie die Datentypen der Spalten herausfinden.</p></details>\n<details><summary>Tipp 2</summary><p>Eine Division mit 0 ist nicht möglich.</p></details>\n<details><summary>Tipp 2</summary><p>Der Datentyp des Ergebnis von Int/Int ist Int. Mit <code>toDouble()</code> kann ein Int-Wert zu Double umgewandelt werden.</p></details>"
    }
   ]
  },
  {
   "artifact_name": "m.51",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `flatten`, `flatMap`\n##### `flatten`\nBeinhaltet eine Liste oder ein Array wiederum mehrere Listen oder Arrays, können diese mit `flatten` in eine Liste oder ein Array umgewandelt werden."
    }
   ]
  },
  {
   "artifact_name": "m.52",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `flatMap`\n`flatMap()` ist eine Kombination von `map()` und `flatten()`. Zuerst wird auf alle Elemente `map()` angewendet und danach alle Ergebnisse mit `flatten()` zusammengefasst."
    }
   ]
  },
  {
   "artifact_name": "m.53",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `reduce`\n`reduce` ist eine Methode, deren Lambda-Ausdruck zwei Parameter besitzt. Bei der ersten Ausführung sind das das erste und das zweite Element. Bei allen folgenden Ausführungen des Methodenrumpfs ist der erste Parameter das Ergebnis der vorherigen Ausführung und der Zweite das aktuelle Element."
    }
   ]
  },
  {
   "artifact_name": "m.54",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `zip`, `unzip` und `zipWithNext`\n##### `zip`\nMit Hilfe von `zip()` können 2 Datenstrukturen einfach zusammengefasst werden. Dabei entsteht eine neue Liste, deren Elemente Paare der Elemente der beiden zusammenzufassenden Listen sind."
    }
   ]
  },
  {
   "artifact_name": "m.55",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `unzip`\nDas Gegenteil zu `zip()` ist die Methode `unzip()`. Bei Aufruf auf einer Liste von Paaren werden diese getrennt und in zwei Listen aufgeteilt."
    }
   ]
  },
  {
   "artifact_name": "m.56",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `zipWithNext`\nEine spezielle Form des Zusammenfügens ist `zipWithNext`. Wird diese Methode auf einer Liste aufgerufen, wird ein Lambda-Ausdruck erwartet. Diesem werden zwei Parameter, das aktuelle und das nächste Element übergeben. Im Methodenrumpf kann dann mit beiden definierten Variablen gearbeitet werden."
    }
   ]
  },
  {
   "artifact_name": "m.57",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `remove`\nWie Elemente einer Datenstruktur einfach entfernt werden könne, wurde bereits in Abschnitt 1 behandelt. Jedoch kann diese Funktionalität erweitert werden. <br />\n`removeAll()` in Verbindung mit einem Lambda-Ausdruck entfernt alle Elemente, auf die die Bedingung zutrifft. Das gleiche Ergebnis liefert auch `removeIf()`."
    }
   ]
  },
  {
   "artifact_name": "m.58",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### Aufgabe\nImplementieren Sie eine Erweiterungsmethode `entferneSpalten` für die Klasse `DataFrame`, die alle Spalten entfernt, die nicht den Datentyp `IntCol` besitzen."
    }
   ]
  },
  {
   "artifact_name": "m.59",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `sumOf`, `minByOrNull`, `maxByOrNull`\n##### `sumOf`\n`sumOf()` erweitert `sum()` in der Hinsicht, dass zuerst die Anweisung des Methodenrumpf des Lambda-Ausdrucks angewendet wird und das Ergebnis zur Summe addiert wird. "
    }
   ]
  },
  {
   "artifact_name": "m.60",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### minByOrNull\nMit `minByOrNull` kann das Minimum in Verbindung mit einem Lambda-Ausdrucks gefunden werden. In diesem muss entweder angegeben werden wovon das Minimum gesucht werden soll (Beispielsweise die Spalte einer Tabelle) oder eine Anweisung. Bei der Auswertung wird zuerst die Anweisung ausgeführt und das Ergebnis dann mit dem aktuellen Minimum verglichen. Falls es kleiner ist, wird das Ausgangselement der Anweisung als Minimum gespeichert. Falls kein Minimum existiert, wird `null` zurückgegeben."
    }
   ]
  },
  {
   "artifact_name": "m.61",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### `maxByOrNull`\n`maxByOrNull()` ist das Gegenteil von `minByOrNull` und liefert das Maximum oder `null`."
    }
   ]
  },
  {
   "artifact_name": "m.62",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `take`\nDie normale `take()`-Methode wurde bereits in Abschnitt 1 vorgestellt. Anstelle einer bestimmen Anzahl, können mit `takeWhile()` oder `takeUnless()` so viele Elemente genommen werden, bis eine Bedingung nicht mehr erfüllt ist. Beide Methoden unterschieden sich nur im Rückgabetyp. Eine weitere Erweiterung ist `takeIf()`. Diese findet bei primitiven Variablen Anwendung. Falls die Bedingung für die Variable erfüllt ist, wird diese zurückgegeben. Falls die Prüfung fehlschlägt ist due Rückgabe `null`."
    }
   ]
  },
  {
   "artifact_name": "m.63",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "#### `forEach`\nDie `forEach`-Schleife sollte bereits aus Java bekannt sein. Eine ähnliche Umsetzung mit dem Schlüsselwort `in` wurde in Abschnitt 1 besprochen. Eine weitere Möglichkeit diese Art der Schleife in Kotlin umzusetzen ist `forEach()` in Verbindung mit Lambdas. Diese Methode erinnert stark an `map()`, da der Methodenrumpf des Lambda-Ausdrucks an jedem Elementen der Datenstruktur angewendet wird. Jedoch wird hier kein Ergebnis zurückgegeben. Das aktuelle Element kann außerdem nicht verändert werden."
    }
   ]
  },
  {
   "artifact_name": "m.64",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "##### Aufgabe\nSpeichern Sie in der Variable `schluessel` eine Liste der kombinierten Schlüssel, der aus dem Land und gegebenenfalls dem Bundesland besteht (in der Spalte Combined_Key zu finden). Benutzen Sie dafür eine `forEach`-Schleife und nicht die Spalte Combined_Key."
    }
   ]
  },
  {
   "artifact_name": "m.65",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "### Verbindung von Lambda-Ausdrücken"
    }
   ]
  },
  {
   "artifact_name": "m.66",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "n.0.22",
     "markdown": "## Zusammenfassung"
    }
   ]
  },
  {
   "artifact_name": "m.67",
   "versions": [
    {
     "start_checkpoint": 1618052825499,
     "markdown": "#### Beispiel 2\nGesucht ist der Eintrag, ",
     "origin": "c.73.0"
    }
   ]
  }
 ],
 "rawCells": [],
 "snippets": [],
 "output": [
  {
   "artifact_name": "o.0",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "c.1.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "v1: 0\nv2: null\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.1",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "c.2.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "v1: Kotlin, Länge: 6; v2: null, Länge: -1; \n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.2",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "c.3.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "v1: Kotlin, Länge: 6; v2: null, Länge: null; \n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.3",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "c.4.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Java\nKotlin\nLua\nC++\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.4",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "c.5.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "4 17 11 12 "
      }
     ]
    },
    {
     "start_checkpoint": 1617786737850,
     "parent": "c.5.0",
     "raw": [
      {
       "name": "stdout",
       "text": "4 10 8 ",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.5",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "c.6.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "foo(null): -1\nfoo('Kotlin'): 6\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.6",
   "versions": [
    {
     "start_checkpoint": 1617530107034,
     "parent": "c.7.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "6\n"
      },
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "java.lang.NullPointerException\nLine_106_jupyter.<init>(Line_106.jupyter.kts:5)\njava.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\njava.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:64)\njava.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\njava.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)\njava.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.evalWithConfigAndOtherScriptsResults(BasicJvmScriptEvaluator.kt:96)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.invoke$suspendImpl(BasicJvmScriptEvaluator.kt:41)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.invoke(BasicJvmScriptEvaluator.kt)\nkotlin.script.experimental.jvm.BasicJvmReplEvaluator.eval(BasicJvmReplEvaluator.kt:51)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl$doEval$resultWithDiagnostics$1.invokeSuspend(repl.kt:604)\nkotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\nkotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:56)\nkotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)\nkotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:84)\nkotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\nkotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\nkotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\nkotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl.doEval(repl.kt:604)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl.eval(repl.kt:434)\norg.jetbrains.kotlin.jupyter.ProtocolKt$shellMessagesHandler$res$1.invoke(protocol.kt:248)\norg.jetbrains.kotlin.jupyter.ProtocolKt$shellMessagesHandler$res$1.invoke(protocol.kt)\norg.jetbrains.kotlin.jupyter.ProtocolKt.evalWithIO(protocol.kt:400)\norg.jetbrains.kotlin.jupyter.ProtocolKt.shellMessagesHandler(protocol.kt:247)\norg.jetbrains.kotlin.jupyter.IkotlinKt.kernelServer(ikotlin.kt:127)\norg.jetbrains.kotlin.jupyter.IkotlinKt.kernelServer$default(ikotlin.kt:95)\norg.jetbrains.kotlin.jupyter.IkotlinKt.main(ikotlin.kt:72)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.7",
   "versions": [
    {
     "start_checkpoint": 1617531804790,
     "parent": "c.8.2",
     "raw": [
      {
       "name": "stdout",
       "text": "1\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.8",
   "versions": [
    {
     "start_checkpoint": 1617531808572,
     "parent": "c.8.3",
     "raw": [
      {
       "name": "stdout",
       "text": "null\n",
       "output_type": "stream"
      },
      {
       "execution_count": 85,
       "output_type": "execute_result",
       "data": {
        "text/plain": "TEST"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.9",
   "versions": [
    {
     "start_checkpoint": 1617531823475,
     "parent": "c.8.4",
     "raw": [
      {
       "name": "stdout",
       "text": "null\nTEST\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.10",
   "versions": [
    {
     "start_checkpoint": 1617531826189,
     "parent": "c.8.5",
     "raw": [
      {
       "name": "stdout",
       "text": "1\nnull\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.11",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "c.9.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "liste1: [null, null, null, null, null]\nliste2: [0, 1, 2, 3, 4]\nliste3: [0, 1, 2, 3, 4, null]\nliste4: [1, 4, null, 1, 8, null]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.12",
   "versions": [
    {
     "start_checkpoint": 1617784478667,
     "parent": "c.10.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "listeMitNull: [1, 4, null, 1, 8, null]\nlisteOhneNull: [1, 4, 1, 8]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.13",
   "versions": [
    {
     "start_checkpoint": 1617786737850,
     "parent": "c.12.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Zeit mit Schleife: 0\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.14",
   "versions": [
    {
     "start_checkpoint": 1617786737850,
     "parent": "c.13.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Zeit mit Lambda-Ausdruck: 0\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.15",
   "versions": [
    {
     "start_checkpoint": 1617786783122,
     "parent": "c.12.2",
     "raw": [
      {
       "name": "stdout",
       "text": "Zeit mit Schleife: 16\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.16",
   "versions": [
    {
     "start_checkpoint": 1617786783122,
     "parent": "c.13.2",
     "raw": [
      {
       "name": "stdout",
       "text": "Zeit mit Lambda-Ausdruck: 38\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.17",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.19.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vorher: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nNachher: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.18",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.20.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vorher: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nNachher: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.19",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.21.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vorher: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nNachher: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.20",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.22.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vorher: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nNachher: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.21",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.23.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vorher: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nNachher: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.22",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.24.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vorher: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nNachher: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.23",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.25.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_24.jupyter.kts (12:5 - 19) Unresolved reference: listeUmgekehrt\nLine_24.jupyter.kts (13:75 - 89) Unresolved reference: listeUmgekehrt"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.24",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.26.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Super! Alle Tests bestanden!\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.25",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.27.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vorher: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nNachher: [0, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.26",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.28.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Alle Elemente von liste1 sind durch 2 teilbar: true\nAlle Elemente von liste2 sind durch 2 teilbar: false\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.27",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.29.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Alle Primzahlen von liste1: [0, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.28",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.30.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[6, 7, 8, 9, 10]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.29",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.33.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Anzahl der Spalten: 14\nAnzahl der Zeilen: 3983\nListe der Namen der Spalten: [FIPS, Admin2, Province_State, Country_Region, Last_Update, Lat, Long_, Confirmed, Deaths, Recovered, Active, Combined_Key, Incident_Rate, Case_Fatality_Ratio]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.30",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.34.0",
     "raw": [
      {
       "execution_count": 28,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Afghanistan\">Afghanistan</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"33.93911\">33.93911</td><td style=\"text-align:left\" title=\"67.709953\">67.709953</td><td style=\"text-align:left\" title=\"56873\">56873</td><td style=\"text-align:left\" title=\"2512\">2512</td><td style=\"text-align:left\" title=\"51940\">51940</td><td style=\"text-align:left\" title=\"2421\">2421</td><td style=\"text-align:left\" title=\"Afghanistan\">Afghanistan</td><td style=\"text-align:left\" title=\"146.0966446014229\">146.0966446014229</td><td style=\"text-align:left\" title=\"4.416858614808433\">4.416858614808433</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Albania\">Albania</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"41.1533\">41.1533</td><td style=\"text-align:left\" title=\"20.1683\">20.1683</td><td style=\"text-align:left\" title=\"127192\">127192</td><td style=\"text-align:left\" title=\"2291\">2291</td><td style=\"text-align:left\" title=\"95600\">95600</td><td style=\"text-align:left\" title=\"29301\">29301</td><td style=\"text-align:left\" title=\"Albania\">Albania</td><td style=\"text-align:left\" title=\"4419.765098339009\">4419.765098339009</td><td style=\"text-align:left\" title=\"1.801213912824706\">1.801213912824706</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Algeria\">Algeria</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"28.0339\">28.0339</td><td style=\"text-align:left\" title=\"1.6596\">1.6596</td><td style=\"text-align:left\" title=\"118004\">118004</td><td style=\"text-align:left\" title=\"3116\">3116</td><td style=\"text-align:left\" title=\"82192\">82192</td><td style=\"text-align:left\" title=\"32696\">32696</td><td style=\"text-align:left\" title=\"Algeria\">Algeria</td><td style=\"text-align:left\" title=\"269.1019230717044\">269.1019230717044</td><td style=\"text-align:left\" title=\"2.6405884546286567\">2.6405884546286567</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Andorra\">Andorra</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"42.5063\">42.5063</td><td style=\"text-align:left\" title=\"1.5218\">1.5218</td><td style=\"text-align:left\" title=\"12363\">12363</td><td style=\"text-align:left\" title=\"119\">119</td><td style=\"text-align:left\" title=\"11616\">11616</td><td style=\"text-align:left\" title=\"628\">628</td><td style=\"text-align:left\" title=\"Andorra\">Andorra</td><td style=\"text-align:left\" title=\"16000.776548243059\">16000.776548243059</td><td style=\"text-align:left\" title=\"0.9625495429911833\">0.9625495429911833</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Angola\">Angola</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-11.2027\">-11.2027</td><td style=\"text-align:left\" title=\"17.8739\">17.8739</td><td style=\"text-align:left\" title=\"23010\">23010</td><td style=\"text-align:left\" title=\"547\">547</td><td style=\"text-align:left\" title=\"21545\">21545</td><td style=\"text-align:left\" title=\"918\">918</td><td style=\"text-align:left\" title=\"Angola\">Angola</td><td style=\"text-align:left\" title=\"70.01099120837206\">70.01099120837206</td><td style=\"text-align:left\" title=\"2.3772272924815296\">2.3772272924815296</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Antigua and Barbuda\">Antigua and Barbuda</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"17.0608\">17.0608</td><td style=\"text-align:left\" title=\"-61.7964\">-61.7964</td><td style=\"text-align:left\" title=\"1177\">1177</td><td style=\"text-align:left\" title=\"29\">29</td><td style=\"text-align:left\" title=\"911\">911</td><td style=\"text-align:left\" title=\"237\">237</td><td style=\"text-align:left\" title=\"Antigua and Barbuda\">Antigua and Barbuda</td><td style=\"text-align:left\" title=\"1201.9034392614985\">1201.9034392614985</td><td style=\"text-align:left\" title=\"2.463891248937978\">2.463891248937978</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-38.4161\">-38.4161</td><td style=\"text-align:left\" title=\"-63.6167\">-63.6167</td><td style=\"text-align:left\" title=\"2450068\">2450068</td><td style=\"text-align:left\" title=\"56832\">56832</td><td style=\"text-align:left\" title=\"2174625\">2174625</td><td style=\"text-align:left\" title=\"218611\">218611</td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"5421.010905510044\">5421.010905510044</td><td style=\"text-align:left\" title=\"2.319609088400812\">2.319609088400812</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Armenia\">Armenia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"40.0691\">40.0691</td><td style=\"text-align:left\" title=\"45.0382\">45.0382</td><td style=\"text-align:left\" title=\"198898\">198898</td><td style=\"text-align:left\" title=\"3647\">3647</td><td style=\"text-align:left\" title=\"178227\">178227</td><td style=\"text-align:left\" title=\"17024\">17024</td><td style=\"text-align:left\" title=\"Armenia\">Armenia</td><td style=\"text-align:left\" title=\"6712.193502099394\">6712.193502099394</td><td style=\"text-align:left\" title=\"1.8336031533750967\">1.8336031533750967</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Australian Capital Territory\">Australian Capital Territory</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-35.4735\">-35.4735</td><td style=\"text-align:left\" title=\"149.0124\">149.0124</td><td style=\"text-align:left\" title=\"123\">123</td><td style=\"text-align:left\" title=\"3\">3</td><td style=\"text-align:left\" title=\"120\">120</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Australian Capital Territory, Australia\">Australian Capital Territory, Australia</td><td style=\"text-align:left\" title=\"28.73160476524177\">28.73160476524177</td><td style=\"text-align:left\" title=\"2.4390243902439024\">2.4390243902439024</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"New South Wales\">New South Wales</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-33.8688\">-33.8688</td><td style=\"text-align:left\" title=\"151.2093\">151.2093</td><td style=\"text-align:left\" title=\"5318\">5318</td><td style=\"text-align:left\" title=\"54\">54</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"5264\">5264</td><td style=\"text-align:left\" title=\"New South Wales, Australia\">New South Wales, Australia</td><td style=\"text-align:left\" title=\"65.50874599655087\">65.50874599655087</td><td style=\"text-align:left\" title=\"1.0154193305754042\">1.0154193305754042</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.31",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.35.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "DataFrame with 3983 observations\nFIPS                 [Str]  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ...\nAdmin2               [Str]  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ...\nProvince_State       [Str]  , , , , , , , , Australian Capital Territory, New South Wales, Northern Territory, Queensland, South...\nCountry_Region       [Str]  Afghanistan, Albania, Algeria, Andorra, Angola, Antigua and Barbuda, Argentina, Armenia, Australia, ...\nLast_Update          [Str]  2021-04-08 04:21:13, 2021-04-08 04:21:13, 2021-04-08 04:21:13, 2021-04-08 04:21:13, 2021-04-08 04:21...\nLat                  [Str]  33.93911, 41.1533, 28.0339, 42.5063, -11.2027, 17.0608, -38.4161, 40.0691, -35.4735, -33.8688, -12.4...\nLong_                [Str]  67.709953, 20.1683, 1.6596, 1.5218, 17.8739, -61.7964, -63.6167, 45.0382, 149.0124, 151.2093, 130.84...\nConfirmed            [Int]  56873, 127192, 118004, 12363, 23010, 1177, 2450068, 198898, 123, 5318, 112, 1500, 663, 234, 20484, 9...\nDeaths               [Int]  2512, 2291, 3116, 119, 547, 29, 56832, 3647, 3, 54, 0, 6, 4, 13, 820, 9, 9546, 3780, 189, 547, 9447,...\nRecovered            [Str]  51940, 95600, 82192, 11616, 21545, 911, 2174625, 178227, 120, 0, 106, 1366, 651, 221, 19664, 928, 52...\nActive               [Str]  2421, 29301, 32696, 628, 918, 237, 218611, 17024, 0, 5264, 6, 128, 8, 0, 0, 14, 33688, 28144, 296, 1...\nCombined_Key         [Str]  Afghanistan, Albania, Algeria, Andorra, Angola, Antigua and Barbuda, Argentina, Armenia, Australian ...\nIncident_Rate        [Str]  146.0966446014229, 4419.765098339009, 269.1019230717044, 16000.776548243059, 70.01099120837206, 1201...\nCase_Fatality_Ratio  [Str]  4.416858614808433, 1.801213912824706, 2.6405884546286567, 0.9625495429911833, 2.3772272924815296, 2....\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.32",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.36.0",
     "raw": [
      {
       "execution_count": 30,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Deaths</th></tr><tr><td style=\"text-align:left\" title=\"Afghanistan\">Afghanistan</td><td style=\"text-align:left\" title=\"2512\">2512</td></tr><tr><td style=\"text-align:left\" title=\"Albania\">Albania</td><td style=\"text-align:left\" title=\"2291\">2291</td></tr><tr><td style=\"text-align:left\" title=\"Algeria\">Algeria</td><td style=\"text-align:left\" title=\"3116\">3116</td></tr><tr><td style=\"text-align:left\" title=\"Andorra\">Andorra</td><td style=\"text-align:left\" title=\"119\">119</td></tr><tr><td style=\"text-align:left\" title=\"Angola\">Angola</td><td style=\"text-align:left\" title=\"547\">547</td></tr><tr><td style=\"text-align:left\" title=\"Antigua and Barbuda\">Antigua and Barbuda</td><td style=\"text-align:left\" title=\"29\">29</td></tr><tr><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"56832\">56832</td></tr><tr><td style=\"text-align:left\" title=\"Armenia\">Armenia</td><td style=\"text-align:left\" title=\"3647\">3647</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"3\">3</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"54\">54</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"0\">0</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"6\">6</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"4\">4</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"13\">13</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"820\">820</td></tr><tr><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"9\">9</td></tr><tr><td style=\"text-align:left\" title=\"Austria\">Austria</td><td style=\"text-align:left\" title=\"9546\">9546</td></tr><tr><td style=\"text-align:left\" title=\"Azerbaijan\">Azerbaijan</td><td style=\"text-align:left\" title=\"3780\">3780</td></tr><tr><td style=\"text-align:left\" title=\"Bahamas\">Bahamas</td><td style=\"text-align:left\" title=\"189\">189</td></tr><tr><td style=\"text-align:left\" title=\"Bahrain\">Bahrain</td><td style=\"text-align:left\" title=\"547\">547</td></tr></table><p>... only showing top 20 rows</p></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.33",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.37.0",
     "raw": [
      {
       "execution_count": 31,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-38.4161\">-38.4161</td><td style=\"text-align:left\" title=\"-63.6167\">-63.6167</td><td style=\"text-align:left\" title=\"2450068\">2450068</td><td style=\"text-align:left\" title=\"56832\">56832</td><td style=\"text-align:left\" title=\"2174625\">2174625</td><td style=\"text-align:left\" title=\"218611\">218611</td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"5421.010905510044\">5421.010905510044</td><td style=\"text-align:left\" title=\"2.319609088400812\">2.319609088400812</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Rio de Janeiro\">Rio de Janeiro</td><td style=\"text-align:left\" title=\"Brazil\">Brazil</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-22.9068\">-22.9068</td><td style=\"text-align:left\" title=\"-43.1729\">-43.1729</td><td style=\"text-align:left\" title=\"666025\">666025</td><td style=\"text-align:left\" title=\"38282\">38282</td><td style=\"text-align:left\" title=\"616078\">616078</td><td style=\"text-align:left\" title=\"11665\">11665</td><td style=\"text-align:left\" title=\"Rio de Janeiro, Brazil\">Rio de Janeiro, Brazil</td><td style=\"text-align:left\" title=\"3857.6727418098053\">3857.6727418098053</td><td style=\"text-align:left\" title=\"5.747832288577756\">5.747832288577756</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Sao Paulo\">Sao Paulo</td><td style=\"text-align:left\" title=\"Brazil\">Brazil</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-23.5505\">-23.5505</td><td style=\"text-align:left\" title=\"-46.6333\">-46.6333</td><td style=\"text-align:left\" title=\"2576362\">2576362</td><td style=\"text-align:left\" title=\"79443\">79443</td><td style=\"text-align:left\" title=\"2218618\">2218618</td><td style=\"text-align:left\" title=\"278301\">278301</td><td style=\"text-align:left\" title=\"Sao Paulo, Brazil\">Sao Paulo, Brazil</td><td style=\"text-align:left\" title=\"5610.660621477591\">5610.660621477591</td><td style=\"text-align:left\" title=\"3.083534068581977\">3.083534068581977</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"France\">France</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"46.2276\">46.2276</td><td style=\"text-align:left\" title=\"2.2137\">2.2137</td><td style=\"text-align:left\" title=\"4807123\">4807123</td><td style=\"text-align:left\" title=\"96672\">96672</td><td style=\"text-align:left\" title=\"269989\">269989</td><td style=\"text-align:left\" title=\"4439553\">4439553</td><td style=\"text-align:left\" title=\"France\">France</td><td style=\"text-align:left\" title=\"7363.1720628116345\">7363.1720628116345</td><td style=\"text-align:left\" title=\"2.0110157364394463\">2.0110157364394463</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Maharashtra\">Maharashtra</td><td style=\"text-align:left\" title=\"India\">India</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"19.449759\">19.449759</td><td style=\"text-align:left\" title=\"76.108221\">76.108221</td><td style=\"text-align:left\" title=\"3173261\">3173261</td><td style=\"text-align:left\" title=\"56652\">56652</td><td style=\"text-align:left\" title=\"2613627\">2613627</td><td style=\"text-align:left\" title=\"502982\">502982</td><td style=\"text-align:left\" title=\"Maharashtra, India\">Maharashtra, India</td><td style=\"text-align:left\" title=\"2576.865501843314\">2576.865501843314</td><td style=\"text-align:left\" title=\"1.7852927950143402\">1.7852927950143402</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Indonesia\">Indonesia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-0.7893\">-0.7893</td><td style=\"text-align:left\" title=\"113.9213\">113.9213</td><td style=\"text-align:left\" title=\"1547376\">1547376</td><td style=\"text-align:left\" title=\"42064\">42064</td><td style=\"text-align:left\" title=\"1391742\">1391742</td><td style=\"text-align:left\" title=\"113570\">113570</td><td style=\"text-align:left\" title=\"Indonesia\">Indonesia</td><td style=\"text-align:left\" title=\"565.7193314211061\">565.7193314211061</td><td style=\"text-align:left\" title=\"2.7184084540538307\">2.7184084540538307</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Iran\">Iran</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"32.427908\">32.427908</td><td style=\"text-align:left\" title=\"53.68804599999999\">53.68804599999999</td><td style=\"text-align:left\" title=\"1984348\">1984348</td><td style=\"text-align:left\" title=\"63699\">63699</td><td style=\"text-align:left\" title=\"1675891\">1675891</td><td style=\"text-align:left\" title=\"244758\">244758</td><td style=\"text-align:left\" title=\"Iran\">Iran</td><td style=\"text-align:left\" title=\"2362.517245940859\">2362.517245940859</td><td style=\"text-align:left\" title=\"3.210072023657141\">3.210072023657141</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Lombardia\">Lombardia</td><td style=\"text-align:left\" title=\"Italy\">Italy</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"45.46679409\">45.46679409</td><td style=\"text-align:left\" title=\"9.190347404\">9.190347404</td><td style=\"text-align:left\" title=\"755811\">755811</td><td style=\"text-align:left\" title=\"31373\">31373</td><td style=\"text-align:left\" title=\"642145\">642145</td><td style=\"text-align:left\" title=\"82293\">82293</td><td style=\"text-align:left\" title=\"Lombardia, Italy\">Lombardia, Italy</td><td style=\"text-align:left\" title=\"7512.603157632954\">7512.603157632954</td><td style=\"text-align:left\" title=\"4.150905451230533\">4.150905451230533</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Ciudad de Mexico\">Ciudad de Mexico</td><td style=\"text-align:left\" title=\"Mexico\">Mexico</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"19.4326\">19.4326</td><td style=\"text-align:left\" title=\"-99.1332\">-99.1332</td><td style=\"text-align:left\" title=\"615993\">615993</td><td style=\"text-align:left\" title=\"30884\">30884</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"585109\">585109</td><td style=\"text-align:left\" title=\"Ciudad de Mexico, Mexico\">Ciudad de Mexico, Mexico</td><td style=\"text-align:left\" title=\"6830.2167343320425\">6830.2167343320425</td><td style=\"text-align:left\" title=\"5.013693337424289\">5.013693337424289</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Mexico\">Mexico</td><td style=\"text-align:left\" title=\"Mexico\">Mexico</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"19.4969\">19.4969</td><td style=\"text-align:left\" title=\"-99.7233\">-99.7233</td><td style=\"text-align:left\" title=\"235917\">235917</td><td style=\"text-align:left\" title=\"31964\">31964</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"203953\">203953</td><td style=\"text-align:left\" title=\"Mexico, Mexico\">Mexico, Mexico</td><td style=\"text-align:left\" title=\"1353.6828249594466\">1353.6828249594466</td><td style=\"text-align:left\" title=\"13.548832852231929\">13.548832852231929</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Poland\">Poland</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.9194\">51.9194</td><td style=\"text-align:left\" title=\"19.1451\">19.1451</td><td style=\"text-align:left\" title=\"2471617\">2471617</td><td style=\"text-align:left\" title=\"55703\">55703</td><td style=\"text-align:left\" title=\"2054697\">2054697</td><td style=\"text-align:left\" title=\"361217\">361217</td><td style=\"text-align:left\" title=\"Poland\">Poland</td><td style=\"text-align:left\" title=\"6530.617475464444\">6530.617475464444</td><td style=\"text-align:left\" title=\"2.2537067838585023\">2.2537067838585023</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"South Africa\">South Africa</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-30.5595\">-30.5595</td><td style=\"text-align:left\" title=\"22.9375\">22.9375</td><td style=\"text-align:left\" title=\"1553609\">1553609</td><td style=\"text-align:left\" title=\"53111\">53111</td><td style=\"text-align:left\" title=\"1479821\">1479821</td><td style=\"text-align:left\" title=\"20677\">20677</td><td style=\"text-align:left\" title=\"South Africa\">South Africa</td><td style=\"text-align:left\" title=\"2619.530122820113\">2619.530122820113</td><td style=\"text-align:left\" title=\"3.4185564064059877\">3.4185564064059877</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Turkey\">Turkey</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"38.9637\">38.9637</td><td style=\"text-align:left\" title=\"35.2433\">35.2433</td><td style=\"text-align:left\" title=\"3633925\">3633925</td><td style=\"text-align:left\" title=\"32943\">32943</td><td style=\"text-align:left\" title=\"3194978\">3194978</td><td style=\"text-align:left\" title=\"406004\">406004</td><td style=\"text-align:left\" title=\"Turkey\">Turkey</td><td style=\"text-align:left\" title=\"4308.709035161605\">4308.709035161605</td><td style=\"text-align:left\" title=\"0.9065404486884017\">0.9065404486884017</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"England\">England</td><td style=\"text-align:left\" title=\"United Kingdom\">United Kingdom</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"52.3555\">52.3555</td><td style=\"text-align:left\" title=\"-1.1743\">-1.1743</td><td style=\"text-align:left\" title=\"3818665\">3818665</td><td style=\"text-align:left\" title=\"111666\">111666</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"3706999\">3706999</td><td style=\"text-align:left\" title=\"England, United Kingdom\">England, United Kingdom</td><td style=\"text-align:left\" title=\"6821.822098997449\">6821.822098997449</td><td style=\"text-align:left\" title=\"2.9242156617561372\">2.9242156617561372</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.34",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.38.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "gefilterteListe (it > 10): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.35",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.39.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "gefilterteListe (String): [Kotlin, Java, C]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.36",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.40.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_43.jupyter.kts (3:4 - 12) Unresolved reference: zeilenDE\nLine_43.jupyter.kts (7:44 - 52) Unresolved reference: zeilenDE\nLine_43.jupyter.kts (9:1 - 9) Unresolved reference: zeilenDE"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.37",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.41.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Richtig!\n"
      },
      {
       "execution_count": 35,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Baden-Wurttemberg\">Baden-Wurttemberg</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"48.6616\">48.6616</td><td style=\"text-align:left\" title=\"9.3501\">9.3501</td><td style=\"text-align:left\" title=\"377133\">377133</td><td style=\"text-align:left\" title=\"8831\">8831</td><td style=\"text-align:left\" title=\"341300\">341300</td><td style=\"text-align:left\" title=\"27002\">27002</td><td style=\"text-align:left\" title=\"Baden-Wurttemberg, Germany\">Baden-Wurttemberg, Germany</td><td style=\"text-align:left\" title=\"3406.9458937427617\">3406.9458937427617</td><td style=\"text-align:left\" title=\"2.341614231584083\">2.341614231584083</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bayern\">Bayern</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"48.7904\">48.7904</td><td style=\"text-align:left\" title=\"11.4979\">11.4979</td><td style=\"text-align:left\" title=\"517336\">517336</td><td style=\"text-align:left\" title=\"13419\">13419</td><td style=\"text-align:left\" title=\"467100\">467100</td><td style=\"text-align:left\" title=\"36817\">36817</td><td style=\"text-align:left\" title=\"Bayern, Germany\">Bayern, Germany</td><td style=\"text-align:left\" title=\"3956.1599578365253\">3956.1599578365253</td><td style=\"text-align:left\" title=\"2.5938654955386826\">2.5938654955386826</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Berlin\">Berlin</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"52.52\">52.52</td><td style=\"text-align:left\" title=\"13.405\">13.405</td><td style=\"text-align:left\" title=\"150385\">150385</td><td style=\"text-align:left\" title=\"3098\">3098</td><td style=\"text-align:left\" title=\"138800\">138800</td><td style=\"text-align:left\" title=\"8487\">8487</td><td style=\"text-align:left\" title=\"Berlin, Germany\">Berlin, Germany</td><td style=\"text-align:left\" title=\"4125.985712349506\">4125.985712349506</td><td style=\"text-align:left\" title=\"2.0600458822355954\">2.0600458822355954</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Brandenburg\">Brandenburg</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"52.4125\">52.4125</td><td style=\"text-align:left\" title=\"12.5316\">12.5316</td><td style=\"text-align:left\" title=\"90999\">90999</td><td style=\"text-align:left\" title=\"3358\">3358</td><td style=\"text-align:left\" title=\"81090\">81090</td><td style=\"text-align:left\" title=\"6551\">6551</td><td style=\"text-align:left\" title=\"Brandenburg, Germany\">Brandenburg, Germany</td><td style=\"text-align:left\" title=\"3622.6913548497027\">3622.6913548497027</td><td style=\"text-align:left\" title=\"3.69015044121364\">3.69015044121364</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bremen\">Bremen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"53.0793\">53.0793</td><td style=\"text-align:left\" title=\"8.8017\">8.8017</td><td style=\"text-align:left\" title=\"21697\">21697</td><td style=\"text-align:left\" title=\"415\">415</td><td style=\"text-align:left\" title=\"19790\">19790</td><td style=\"text-align:left\" title=\"1492\">1492</td><td style=\"text-align:left\" title=\"Bremen, Germany\">Bremen, Germany</td><td style=\"text-align:left\" title=\"3176.785468516192\">3176.785468516192</td><td style=\"text-align:left\" title=\"1.9127068258284556\">1.9127068258284556</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Hamburg\">Hamburg</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"53.5511\">53.5511</td><td style=\"text-align:left\" title=\"9.9937\">9.9937</td><td style=\"text-align:left\" title=\"63826\">63826</td><td style=\"text-align:left\" title=\"1404\">1404</td><td style=\"text-align:left\" title=\"55180\">55180</td><td style=\"text-align:left\" title=\"7242\">7242</td><td style=\"text-align:left\" title=\"Hamburg, Germany\">Hamburg, Germany</td><td style=\"text-align:left\" title=\"3466.583097026416\">3466.583097026416</td><td style=\"text-align:left\" title=\"2.199730517344029\">2.199730517344029</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Hessen\">Hessen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"50.6521\">50.6521</td><td style=\"text-align:left\" title=\"9.1624\">9.1624</td><td style=\"text-align:left\" title=\"227581\">227581</td><td style=\"text-align:left\" title=\"6441\">6441</td><td style=\"text-align:left\" title=\"202400\">202400</td><td style=\"text-align:left\" title=\"18740\">18740</td><td style=\"text-align:left\" title=\"Hessen, Germany\">Hessen, Germany</td><td style=\"text-align:left\" title=\"3632.108798720165\">3632.108798720165</td><td style=\"text-align:left\" title=\"2.8302011152073328\">2.8302011152073328</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Mecklenburg-Vorpommern\">Mecklenburg-Vorpommern</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"53.6127\">53.6127</td><td style=\"text-align:left\" title=\"12.4296\">12.4296</td><td style=\"text-align:left\" title=\"32341\">32341</td><td style=\"text-align:left\" title=\"887\">887</td><td style=\"text-align:left\" title=\"28730\">28730</td><td style=\"text-align:left\" title=\"2724\">2724</td><td style=\"text-align:left\" title=\"Mecklenburg-Vorpommern, Germany\">Mecklenburg-Vorpommern, Germany</td><td style=\"text-align:left\" title=\"2009.1633404258623\">2009.1633404258623</td><td style=\"text-align:left\" title=\"2.742648650320027\">2.742648650320027</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Niedersachsen\">Niedersachsen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"52.6367\">52.6367</td><td style=\"text-align:left\" title=\"9.8451\">9.8451</td><td style=\"text-align:left\" title=\"205087\">205087</td><td style=\"text-align:left\" title=\"4962\">4962</td><td style=\"text-align:left\" title=\"186600\">186600</td><td style=\"text-align:left\" title=\"13525\">13525</td><td style=\"text-align:left\" title=\"Niedersachsen, Germany\">Niedersachsen, Germany</td><td style=\"text-align:left\" title=\"2569.22437828596\">2569.22437828596</td><td style=\"text-align:left\" title=\"2.419461009230229\">2.419461009230229</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Nordrhein-Westfalen\">Nordrhein-Westfalen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.4332\">51.4332</td><td style=\"text-align:left\" title=\"7.6616\">7.6616</td><td style=\"text-align:left\" title=\"633940\">633940</td><td style=\"text-align:left\" title=\"14462\">14462</td><td style=\"text-align:left\" title=\"572000\">572000</td><td style=\"text-align:left\" title=\"47478\">47478</td><td style=\"text-align:left\" title=\"Nordrhein-Westfalen, Germany\">Nordrhein-Westfalen, Germany</td><td style=\"text-align:left\" title=\"3535.1159178863177\">3535.1159178863177</td><td style=\"text-align:left\" title=\"2.281288450011042\">2.281288450011042</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Rheinland-Pfalz\">Rheinland-Pfalz</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"50.1183\">50.1183</td><td style=\"text-align:left\" title=\"7.309\">7.309</td><td style=\"text-align:left\" title=\"120870\">120870</td><td style=\"text-align:left\" title=\"3362\">3362</td><td style=\"text-align:left\" title=\"108700\">108700</td><td style=\"text-align:left\" title=\"8808\">8808</td><td style=\"text-align:left\" title=\"Rheinland-Pfalz, Germany\">Rheinland-Pfalz, Germany</td><td style=\"text-align:left\" title=\"2958.98692826458\">2958.98692826458</td><td style=\"text-align:left\" title=\"2.781500785968396\">2.781500785968396</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Saarland\">Saarland</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"49.3964\">49.3964</td><td style=\"text-align:left\" title=\"7.023\">7.023</td><td style=\"text-align:left\" title=\"32807\">32807</td><td style=\"text-align:left\" title=\"946\">946</td><td style=\"text-align:left\" title=\"30330\">30330</td><td style=\"text-align:left\" title=\"1531\">1531</td><td style=\"text-align:left\" title=\"Saarland, Germany\">Saarland, Germany</td><td style=\"text-align:left\" title=\"3312.135477819989\">3312.135477819989</td><td style=\"text-align:left\" title=\"2.8835309537598683\">2.8835309537598683</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Sachsen\">Sachsen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.1045\">51.1045</td><td style=\"text-align:left\" title=\"13.2017\">13.2017</td><td style=\"text-align:left\" title=\"229450\">229450</td><td style=\"text-align:left\" title=\"8475\">8475</td><td style=\"text-align:left\" title=\"205400\">205400</td><td style=\"text-align:left\" title=\"15575\">15575</td><td style=\"text-align:left\" title=\"Sachsen, Germany\">Sachsen, Germany</td><td style=\"text-align:left\" title=\"5626.619538261626\">5626.619538261626</td><td style=\"text-align:left\" title=\"3.6936151667029855\">3.6936151667029855</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Sachsen-Anhalt\">Sachsen-Anhalt</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.9503\">51.9503</td><td style=\"text-align:left\" title=\"11.6923\">11.6923</td><td style=\"text-align:left\" title=\"76541\">76541</td><td style=\"text-align:left\" title=\"2803\">2803</td><td style=\"text-align:left\" title=\"67780\">67780</td><td style=\"text-align:left\" title=\"5958\">5958</td><td style=\"text-align:left\" title=\"Sachsen-Anhalt, Germany\">Sachsen-Anhalt, Germany</td><td style=\"text-align:left\" title=\"3466.0269046030894\">3466.0269046030894</td><td style=\"text-align:left\" title=\"3.6620895990384237\">3.6620895990384237</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Schleswig-Holstein\">Schleswig-Holstein</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"54.2194\">54.2194</td><td style=\"text-align:left\" title=\"9.6961\">9.6961</td><td style=\"text-align:left\" title=\"51864\">51864</td><td style=\"text-align:left\" title=\"1448\">1448</td><td style=\"text-align:left\" title=\"46260\">46260</td><td style=\"text-align:left\" title=\"4156\">4156</td><td style=\"text-align:left\" title=\"Schleswig-Holstein, Germany\">Schleswig-Holstein, Germany</td><td style=\"text-align:left\" title=\"1790.443785920036\">1790.443785920036</td><td style=\"text-align:left\" title=\"2.7919173222273637\">2.7919173222273637</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Thuringen\">Thuringen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.011\">51.011</td><td style=\"text-align:left\" title=\"10.8453\">10.8453</td><td style=\"text-align:left\" title=\"99350\">99350</td><td style=\"text-align:left\" title=\"3444\">3444</td><td style=\"text-align:left\" title=\"86860\">86860</td><td style=\"text-align:left\" title=\"9046\">9046</td><td style=\"text-align:left\" title=\"Thuringen, Germany\">Thuringen, Germany</td><td style=\"text-align:left\" title=\"4635.710602875681\">4635.710602875681</td><td style=\"text-align:left\" title=\"3.466532460996477\">3.466532460996477</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Unknown\">Unknown</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"9072\">9072</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"9072\">9072</td><td style=\"text-align:left\" title=\"Unknown, Germany\">Unknown, Germany</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0.0\">0.0</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.38",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.42.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Es gibt einen Eintrag, in dem die Anzahl der Toten gleich den Aktiven ist: true\n"
      },
      {
       "execution_count": 36,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Gansu\">Gansu</td><td style=\"text-align:left\" title=\"China\">China</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"35.7518\">35.7518</td><td style=\"text-align:left\" title=\"104.2861\">104.2861</td><td style=\"text-align:left\" title=\"193\">193</td><td style=\"text-align:left\" title=\"2\">2</td><td style=\"text-align:left\" title=\"189\">189</td><td style=\"text-align:left\" title=\"2\">2</td><td style=\"text-align:left\" title=\"Gansu, China\">Gansu, China</td><td style=\"text-align:left\" title=\"0.7318923018581721\">0.7318923018581721</td><td style=\"text-align:left\" title=\"1.0362694300518134\">1.0362694300518134</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.39",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.43.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Alle Einträge wurden heute zuletzt aktualisiert: false\n"
      },
      {
       "execution_count": 37,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Diamond Princess\">Diamond Princess</td><td style=\"text-align:left\" title=\"Canada\">Canada</td><td style=\"text-align:left\" title=\"2020-12-21 13:27:30\">2020-12-21 13:27:30</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"1\">1</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Diamond Princess, Canada\">Diamond Princess, Canada</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Grand Princess\">Grand Princess</td><td style=\"text-align:left\" title=\"Canada\">Canada</td><td style=\"text-align:left\" title=\"2020-12-21 13:27:30\">2020-12-21 13:27:30</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"13\">13</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"13\">13</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Grand Princess, Canada\">Grand Princess, Canada</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0.0\">0.0</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bonaire, Sint Eustatius and Saba\">Bonaire, Sint Eustatius and Saba</td><td style=\"text-align:left\" title=\"Netherlands\">Netherlands</td><td style=\"text-align:left\" title=\"2021-01-08 23:22:27\">2021-01-08 23:22:27</td><td style=\"text-align:left\" title=\"12.1784\">12.1784</td><td style=\"text-align:left\" title=\"-68.2385\">-68.2385</td><td style=\"text-align:left\" title=\"196\">196</td><td style=\"text-align:left\" title=\"3\">3</td><td style=\"text-align:left\" title=\"180\">180</td><td style=\"text-align:left\" title=\"13\">13</td><td style=\"text-align:left\" title=\"Bonaire, Sint Eustatius and Saba, Netherlands\">Bonaire, Sint Eustatius and Saba, Netherlands</td><td style=\"text-align:left\" title=\"747.4924678692649\">747.4924678692649</td><td style=\"text-align:left\" title=\"1.530612244897959\">1.530612244897959</td></tr><tr><td style=\"text-align:left\" title=\"80001\">80001</td><td style=\"text-align:left\" title=\"Out of AL\">Out of AL</td><td style=\"text-align:left\" title=\"Alabama\">Alabama</td><td style=\"text-align:left\" title=\"US\">US</td><td style=\"text-align:left\" title=\"2020-12-21 13:27:30\">2020-12-21 13:27:30</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Out of AL, Alabama, US\">Out of AL, Alabama, US</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td></tr><tr><td style=\"text-align:left\" title=\"90001\">90001</td><td style=\"text-align:left\" title=\"Unassigned\">Unassigned</td><td style=\"text-align:left\" title=\"Alabama\">Alabama</td><td style=\"text-align:left\" title=\"US\">US</td><td style=\"text-align:left\" title=\"2020-12-21 13:27:30\">2020-12-21 13:27:30</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Unassigned, Alabama, US\">Unassigned, Alabama, US</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td></tr><tr><td style=\"text-align:left\" title=\"88888\">88888</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Diamond Princess\">Diamond Princess</td><td style=\"text-align:left\" title=\"US\">US</td><td style=\"text-align:left\" title=\"2020-08-04 02:27:56\">2020-08-04 02:27:56</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"49\">49</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Diamond Princess, US\">Diamond Princess, US</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0.0\">0.0</td></tr><tr><td style=\"text-align:left\" title=\"99999\">99999</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Grand Princess\">Grand Princess</td><td style=\"text-align:left\" title=\"US\">US</td><td style=\"text-align:left\" title=\"2020-08-04 02:27:56\">2020-08-04 02:27:56</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"103\">103</td><td style=\"text-align:left\" title=\"3\">3</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Grand Princess, US\">Grand Princess, US</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"2.912621359223301\">2.912621359223301</td></tr><tr><td style=\"text-align:left\" title=\"80023\">80023</td><td style=\"text-align:left\" title=\"Out of ME\">Out of ME</td><td style=\"text-align:left\" title=\"Maine\">Maine</td><td style=\"text-align:left\" title=\"US\">US</td><td style=\"text-align:left\" title=\"2020-08-07 22:34:20\">2020-08-07 22:34:20</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Out of ME, Maine, US\">Out of ME, Maine, US</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td></tr><tr><td style=\"text-align:left\" title=\"90032\">90032</td><td style=\"text-align:left\" title=\"Unassigned\">Unassigned</td><td style=\"text-align:left\" title=\"Nevada\">Nevada</td><td style=\"text-align:left\" title=\"US\">US</td><td style=\"text-align:left\" title=\"2021-01-24 23:22:19\">2021-01-24 23:22:19</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Unassigned, Nevada, US\">Unassigned, Nevada, US</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td></tr><tr><td style=\"text-align:left\" title=\"90051\">90051</td><td style=\"text-align:left\" title=\"Unassigned\">Unassigned</td><td style=\"text-align:left\" title=\"Virginia\">Virginia</td><td style=\"text-align:left\" title=\"US\">US</td><td style=\"text-align:left\" title=\"2020-12-21 13:27:30\">2020-12-21 13:27:30</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Unassigned, Virginia, US\">Unassigned, Virginia, US</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Saint Helena, Ascension and Tristan da Cunha\">Saint Helena, Ascension and Tristan da Cunha</td><td style=\"text-align:left\" title=\"United Kingdom\">United Kingdom</td><td style=\"text-align:left\" title=\"2021-03-14 23:25:24\">2021-03-14 23:25:24</td><td style=\"text-align:left\" title=\"-7.9467\">-7.9467</td><td style=\"text-align:left\" title=\"-14.3559\">-14.3559</td><td style=\"text-align:left\" title=\"4\">4</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"4\">4</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Saint Helena, Ascension and Tristan da Cunha, United Kingdom\">Saint Helena, Ascension and Tristan da Cunha, U...</td><td style=\"text-align:left\" title=\"70.65889418830595\">70.65889418830595</td><td style=\"text-align:left\" title=\"0.0\">0.0</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.40",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.44.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Es gibt keinen Eintrag, der mehr als 5 Millionen bestätigte Fälle besitzt: true\n"
      },
      {
       "execution_count": 38,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.41",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.45.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_52.jupyter.kts (2:31 - 37) Parameter 'laenge' is never used\nLine_52.jupyter.kts (2:51 - 63) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (2:53 - 61) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (3:31 - 37) Parameter 'laenge' is never used\nLine_52.jupyter.kts (3:52 - 64) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (3:54 - 62) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (4:31 - 37) Parameter 'laenge' is never used\nLine_52.jupyter.kts (4:51 - 63) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (4:53 - 61) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (6:34 - 43) Parameter 'buchstabe' is never used\nLine_52.jupyter.kts (6:58 - 70) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (6:60 - 68) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (7:34 - 43) Parameter 'buchstabe' is never used\nLine_52.jupyter.kts (7:59 - 71) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (7:61 - 69) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (8:34 - 43) Parameter 'buchstabe' is never used\nLine_52.jupyter.kts (8:58 - 70) Type mismatch: inferred type is Unit but Boolean was expected\nLine_52.jupyter.kts (8:60 - 68) Type mismatch: inferred type is Unit but Boolean was expected"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.42",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.46.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Super! Alle Tests bestanden!\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.43",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.47.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Bestätigte Fälle in Bayern: 517336\nBestätigte Fälle in Bayreuth: null\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.44",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.48.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Bestätigte Fälle in Bayern: 517336\n"
      },
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "java.util.NoSuchElementException: Collection contains no element matching the predicate.\nLine_57_jupyter.<init>(Line_57.jupyter.kts:8)\njava.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\njava.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:64)\njava.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\njava.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)\njava.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.evalWithConfigAndOtherScriptsResults(BasicJvmScriptEvaluator.kt:96)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.invoke$suspendImpl(BasicJvmScriptEvaluator.kt:41)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.invoke(BasicJvmScriptEvaluator.kt)\nkotlin.script.experimental.jvm.BasicJvmReplEvaluator.eval(BasicJvmReplEvaluator.kt:51)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl$doEval$resultWithDiagnostics$1.invokeSuspend(repl.kt:604)\nkotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\nkotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:56)\nkotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)\nkotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:84)\nkotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\nkotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\nkotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\nkotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl.doEval(repl.kt:604)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl.eval(repl.kt:434)\norg.jetbrains.kotlin.jupyter.ProtocolKt$shellMessagesHandler$res$1.invoke(protocol.kt:248)\norg.jetbrains.kotlin.jupyter.ProtocolKt$shellMessagesHandler$res$1.invoke(protocol.kt)\norg.jetbrains.kotlin.jupyter.ProtocolKt.evalWithIO(protocol.kt:400)\norg.jetbrains.kotlin.jupyter.ProtocolKt.shellMessagesHandler(protocol.kt:247)\norg.jetbrains.kotlin.jupyter.IkotlinKt.kernelServer(ikotlin.kt:127)\norg.jetbrains.kotlin.jupyter.IkotlinKt.kernelServer$default(ikotlin.kt:95)\norg.jetbrains.kotlin.jupyter.IkotlinKt.main(ikotlin.kt:72)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.45",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.49.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Bestätigte Fälle in Bayern: 517336\nBestätigte Fälle in Bayreuth: null\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.46",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.50.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "negativ: [-5, -4, -3, -2, -1], positiv: [1, 2, 3, 4, 5]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.47",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.51.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "liste: [Aber, Also, Aachen, Berlin, Bitte, Klavier, Hafen, Hose]\nNach Anfangsbuchstaben automatisch gruppiert: {A=[Aber, Also, Aachen], B=[Berlin, Bitte], K=[Klavier], H=[Hafen, Hose]}\nNach Anfangsbuchstaben mit eigenen Schlüsseln gruppiert: {Wörter mit A am Anfang=[Aber, Also, Aachen], Rest=[Berlin, Bitte, Klavier, Hafen, Hose]}\n\n"
      },
      {
       "execution_count": 45,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Baden-Wurttemberg\">Baden-Wurttemberg</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"48.6616\">48.6616</td><td style=\"text-align:left\" title=\"9.3501\">9.3501</td><td style=\"text-align:left\" title=\"377133\">377133</td><td style=\"text-align:left\" title=\"8831\">8831</td><td style=\"text-align:left\" title=\"341300\">341300</td><td style=\"text-align:left\" title=\"27002\">27002</td><td style=\"text-align:left\" title=\"Baden-Wurttemberg, Germany\">Baden-Wurttemberg, Germany</td><td style=\"text-align:left\" title=\"3406.9458937427617\">3406.9458937427617</td><td style=\"text-align:left\" title=\"2.341614231584083\">2.341614231584083</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bayern\">Bayern</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"48.7904\">48.7904</td><td style=\"text-align:left\" title=\"11.4979\">11.4979</td><td style=\"text-align:left\" title=\"517336\">517336</td><td style=\"text-align:left\" title=\"13419\">13419</td><td style=\"text-align:left\" title=\"467100\">467100</td><td style=\"text-align:left\" title=\"36817\">36817</td><td style=\"text-align:left\" title=\"Bayern, Germany\">Bayern, Germany</td><td style=\"text-align:left\" title=\"3956.1599578365253\">3956.1599578365253</td><td style=\"text-align:left\" title=\"2.5938654955386826\">2.5938654955386826</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Berlin\">Berlin</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"52.52\">52.52</td><td style=\"text-align:left\" title=\"13.405\">13.405</td><td style=\"text-align:left\" title=\"150385\">150385</td><td style=\"text-align:left\" title=\"3098\">3098</td><td style=\"text-align:left\" title=\"138800\">138800</td><td style=\"text-align:left\" title=\"8487\">8487</td><td style=\"text-align:left\" title=\"Berlin, Germany\">Berlin, Germany</td><td style=\"text-align:left\" title=\"4125.985712349506\">4125.985712349506</td><td style=\"text-align:left\" title=\"2.0600458822355954\">2.0600458822355954</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Brandenburg\">Brandenburg</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"52.4125\">52.4125</td><td style=\"text-align:left\" title=\"12.5316\">12.5316</td><td style=\"text-align:left\" title=\"90999\">90999</td><td style=\"text-align:left\" title=\"3358\">3358</td><td style=\"text-align:left\" title=\"81090\">81090</td><td style=\"text-align:left\" title=\"6551\">6551</td><td style=\"text-align:left\" title=\"Brandenburg, Germany\">Brandenburg, Germany</td><td style=\"text-align:left\" title=\"3622.6913548497027\">3622.6913548497027</td><td style=\"text-align:left\" title=\"3.69015044121364\">3.69015044121364</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bremen\">Bremen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"53.0793\">53.0793</td><td style=\"text-align:left\" title=\"8.8017\">8.8017</td><td style=\"text-align:left\" title=\"21697\">21697</td><td style=\"text-align:left\" title=\"415\">415</td><td style=\"text-align:left\" title=\"19790\">19790</td><td style=\"text-align:left\" title=\"1492\">1492</td><td style=\"text-align:left\" title=\"Bremen, Germany\">Bremen, Germany</td><td style=\"text-align:left\" title=\"3176.785468516192\">3176.785468516192</td><td style=\"text-align:left\" title=\"1.9127068258284556\">1.9127068258284556</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Hamburg\">Hamburg</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"53.5511\">53.5511</td><td style=\"text-align:left\" title=\"9.9937\">9.9937</td><td style=\"text-align:left\" title=\"63826\">63826</td><td style=\"text-align:left\" title=\"1404\">1404</td><td style=\"text-align:left\" title=\"55180\">55180</td><td style=\"text-align:left\" title=\"7242\">7242</td><td style=\"text-align:left\" title=\"Hamburg, Germany\">Hamburg, Germany</td><td style=\"text-align:left\" title=\"3466.583097026416\">3466.583097026416</td><td style=\"text-align:left\" title=\"2.199730517344029\">2.199730517344029</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Hessen\">Hessen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"50.6521\">50.6521</td><td style=\"text-align:left\" title=\"9.1624\">9.1624</td><td style=\"text-align:left\" title=\"227581\">227581</td><td style=\"text-align:left\" title=\"6441\">6441</td><td style=\"text-align:left\" title=\"202400\">202400</td><td style=\"text-align:left\" title=\"18740\">18740</td><td style=\"text-align:left\" title=\"Hessen, Germany\">Hessen, Germany</td><td style=\"text-align:left\" title=\"3632.108798720165\">3632.108798720165</td><td style=\"text-align:left\" title=\"2.8302011152073328\">2.8302011152073328</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Mecklenburg-Vorpommern\">Mecklenburg-Vorpommern</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"53.6127\">53.6127</td><td style=\"text-align:left\" title=\"12.4296\">12.4296</td><td style=\"text-align:left\" title=\"32341\">32341</td><td style=\"text-align:left\" title=\"887\">887</td><td style=\"text-align:left\" title=\"28730\">28730</td><td style=\"text-align:left\" title=\"2724\">2724</td><td style=\"text-align:left\" title=\"Mecklenburg-Vorpommern, Germany\">Mecklenburg-Vorpommern, Germany</td><td style=\"text-align:left\" title=\"2009.1633404258623\">2009.1633404258623</td><td style=\"text-align:left\" title=\"2.742648650320027\">2.742648650320027</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Niedersachsen\">Niedersachsen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"52.6367\">52.6367</td><td style=\"text-align:left\" title=\"9.8451\">9.8451</td><td style=\"text-align:left\" title=\"205087\">205087</td><td style=\"text-align:left\" title=\"4962\">4962</td><td style=\"text-align:left\" title=\"186600\">186600</td><td style=\"text-align:left\" title=\"13525\">13525</td><td style=\"text-align:left\" title=\"Niedersachsen, Germany\">Niedersachsen, Germany</td><td style=\"text-align:left\" title=\"2569.22437828596\">2569.22437828596</td><td style=\"text-align:left\" title=\"2.419461009230229\">2.419461009230229</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Nordrhein-Westfalen\">Nordrhein-Westfalen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.4332\">51.4332</td><td style=\"text-align:left\" title=\"7.6616\">7.6616</td><td style=\"text-align:left\" title=\"633940\">633940</td><td style=\"text-align:left\" title=\"14462\">14462</td><td style=\"text-align:left\" title=\"572000\">572000</td><td style=\"text-align:left\" title=\"47478\">47478</td><td style=\"text-align:left\" title=\"Nordrhein-Westfalen, Germany\">Nordrhein-Westfalen, Germany</td><td style=\"text-align:left\" title=\"3535.1159178863177\">3535.1159178863177</td><td style=\"text-align:left\" title=\"2.281288450011042\">2.281288450011042</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Rheinland-Pfalz\">Rheinland-Pfalz</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"50.1183\">50.1183</td><td style=\"text-align:left\" title=\"7.309\">7.309</td><td style=\"text-align:left\" title=\"120870\">120870</td><td style=\"text-align:left\" title=\"3362\">3362</td><td style=\"text-align:left\" title=\"108700\">108700</td><td style=\"text-align:left\" title=\"8808\">8808</td><td style=\"text-align:left\" title=\"Rheinland-Pfalz, Germany\">Rheinland-Pfalz, Germany</td><td style=\"text-align:left\" title=\"2958.98692826458\">2958.98692826458</td><td style=\"text-align:left\" title=\"2.781500785968396\">2.781500785968396</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Saarland\">Saarland</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"49.3964\">49.3964</td><td style=\"text-align:left\" title=\"7.023\">7.023</td><td style=\"text-align:left\" title=\"32807\">32807</td><td style=\"text-align:left\" title=\"946\">946</td><td style=\"text-align:left\" title=\"30330\">30330</td><td style=\"text-align:left\" title=\"1531\">1531</td><td style=\"text-align:left\" title=\"Saarland, Germany\">Saarland, Germany</td><td style=\"text-align:left\" title=\"3312.135477819989\">3312.135477819989</td><td style=\"text-align:left\" title=\"2.8835309537598683\">2.8835309537598683</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Sachsen\">Sachsen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.1045\">51.1045</td><td style=\"text-align:left\" title=\"13.2017\">13.2017</td><td style=\"text-align:left\" title=\"229450\">229450</td><td style=\"text-align:left\" title=\"8475\">8475</td><td style=\"text-align:left\" title=\"205400\">205400</td><td style=\"text-align:left\" title=\"15575\">15575</td><td style=\"text-align:left\" title=\"Sachsen, Germany\">Sachsen, Germany</td><td style=\"text-align:left\" title=\"5626.619538261626\">5626.619538261626</td><td style=\"text-align:left\" title=\"3.6936151667029855\">3.6936151667029855</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Sachsen-Anhalt\">Sachsen-Anhalt</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.9503\">51.9503</td><td style=\"text-align:left\" title=\"11.6923\">11.6923</td><td style=\"text-align:left\" title=\"76541\">76541</td><td style=\"text-align:left\" title=\"2803\">2803</td><td style=\"text-align:left\" title=\"67780\">67780</td><td style=\"text-align:left\" title=\"5958\">5958</td><td style=\"text-align:left\" title=\"Sachsen-Anhalt, Germany\">Sachsen-Anhalt, Germany</td><td style=\"text-align:left\" title=\"3466.0269046030894\">3466.0269046030894</td><td style=\"text-align:left\" title=\"3.6620895990384237\">3.6620895990384237</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Schleswig-Holstein\">Schleswig-Holstein</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"54.2194\">54.2194</td><td style=\"text-align:left\" title=\"9.6961\">9.6961</td><td style=\"text-align:left\" title=\"51864\">51864</td><td style=\"text-align:left\" title=\"1448\">1448</td><td style=\"text-align:left\" title=\"46260\">46260</td><td style=\"text-align:left\" title=\"4156\">4156</td><td style=\"text-align:left\" title=\"Schleswig-Holstein, Germany\">Schleswig-Holstein, Germany</td><td style=\"text-align:left\" title=\"1790.443785920036\">1790.443785920036</td><td style=\"text-align:left\" title=\"2.7919173222273637\">2.7919173222273637</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Thuringen\">Thuringen</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"51.011\">51.011</td><td style=\"text-align:left\" title=\"10.8453\">10.8453</td><td style=\"text-align:left\" title=\"99350\">99350</td><td style=\"text-align:left\" title=\"3444\">3444</td><td style=\"text-align:left\" title=\"86860\">86860</td><td style=\"text-align:left\" title=\"9046\">9046</td><td style=\"text-align:left\" title=\"Thuringen, Germany\">Thuringen, Germany</td><td style=\"text-align:left\" title=\"4635.710602875681\">4635.710602875681</td><td style=\"text-align:left\" title=\"3.466532460996477\">3.466532460996477</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Unknown\">Unknown</td><td style=\"text-align:left\" title=\"Germany\">Germany</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"9072\">9072</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"9072\">9072</td><td style=\"text-align:left\" title=\"Unknown, Germany\">Unknown, Germany</td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"0.0\">0.0</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.48",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.52.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Anzahl an Zeilen: 3983\nAnzahl an Zeilen von Deutschland: 17\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.49",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.53.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_65.jupyter.kts (5:19 - 46) Unresolved reference: anzahlErhoehteSterblichkeit\nLine_65.jupyter.kts (10:85 - 112) Unresolved reference: anzahlErhoehteSterblichkeit"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.50",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.54.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Richtig!\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.51",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.55.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "listen: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattenListe: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.52",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.56.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "woerter: [Schere, Matratze, Transport]\nwoerterMap: [[S, c, h, e, r, e], [M, a, t, r, a, t, z, e], [T, r, a, n, s, p, o, r, t]]\nwoerterMapFlatten: [S, c, h, e, r, e, M, a, t, r, a, t, z, e, T, r, a, n, s, p, o, r, t]\nwoerterFlatMap: [S, c, h, e, r, e, M, a, t, r, a, t, z, e, T, r, a, n, s, p, o, r, t]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.53",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.57.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Das Wort in woerter mit den meisten a ist: Hafen\nDas Element von Liste, dass den größten gemeinsamen Teiler mit 100 besitzt, ist: 128\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.54",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.58.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "liste1: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nliste2: [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nliste1.zip(liste2): [(1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7), (8, -8), (9, -9)]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.55",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.59.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "listeUnzip1: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlisteUnzip2: [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.56",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.60.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "listeZipWithNext: [12, 23, 34, 45, 56, 67, 78, 89]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.57",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.61.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "fruechte: [Apfel, Ananas, Banane, Clementine, Datteln]\nEs wurden Einträge gefunden und mit removeAll() entfernt, die mehr als 1 a enthalten: true\nfruechte nach dem Entfernen: [Apfel, Clementine, Datteln] \n\nfruechte2: [Apfel, Ananas, Banane, Clementine, Datteln]\nEs wurden Einträge gefunden und mit removeIf() entfernt, die mehr als 1 a enthalten: true\nfruechte2 nach dem Entfernen: [Apfel, Clementine, Datteln]\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.58",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.62.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Richtig!\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.59",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.63.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Die Summe der Einträge von liste ist 39.\nDie Summe der Beträge der Einträge von liste ist 51. \n\nAnzahl der bestätigten Fälle weltweit: 133103485\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.60",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.64.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Das Bundesland mit den wenigsten bestätigten Fällen ist: Bremen\nDas Element der Liste liste mit dem kleinsten Betrag ist: 0\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.61",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.65.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Das Bundesland mit den meisten bestätigten Fällen ist: Nordrhein-Westfalen\nDas Element der Liste liste mit dem größten Betrag ist: 9\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.62",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.66.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Afghanistan: 2512\nAlbania: 2291\nAlgeria: 3116\nAndorra: 119\nAngola: 547\n\nZahl: 3\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.63",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.67.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "1 & -1\n2 & -2\n3 & -3\n4 & -4\n5 & -5\n6 & -6\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.64",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.68.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0\njava.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\njava.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\njava.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\njava.base/java.util.Objects.checkIndex(Objects.java:359)\njava.base/java.util.ArrayList.get(ArrayList.java:427)\nLine_97_jupyter.<init>(Line_97.jupyter.kts:11)\njava.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\njava.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:64)\njava.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\njava.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)\njava.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.evalWithConfigAndOtherScriptsResults(BasicJvmScriptEvaluator.kt:96)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.invoke$suspendImpl(BasicJvmScriptEvaluator.kt:41)\nkotlin.script.experimental.jvm.BasicJvmScriptEvaluator.invoke(BasicJvmScriptEvaluator.kt)\nkotlin.script.experimental.jvm.BasicJvmReplEvaluator.eval(BasicJvmReplEvaluator.kt:51)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl$doEval$resultWithDiagnostics$1.invokeSuspend(repl.kt:604)\nkotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\nkotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:56)\nkotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)\nkotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:84)\nkotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\nkotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\nkotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\nkotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl.doEval(repl.kt:604)\norg.jetbrains.kotlin.jupyter.ReplForJupyterImpl.eval(repl.kt:434)\norg.jetbrains.kotlin.jupyter.ProtocolKt$shellMessagesHandler$res$1.invoke(protocol.kt:248)\norg.jetbrains.kotlin.jupyter.ProtocolKt$shellMessagesHandler$res$1.invoke(protocol.kt)\norg.jetbrains.kotlin.jupyter.ProtocolKt.evalWithIO(protocol.kt:400)\norg.jetbrains.kotlin.jupyter.ProtocolKt.shellMessagesHandler(protocol.kt:247)\norg.jetbrains.kotlin.jupyter.IkotlinKt.kernelServer(ikotlin.kt:127)\norg.jetbrains.kotlin.jupyter.IkotlinKt.kernelServer$default(ikotlin.kt:95)\norg.jetbrains.kotlin.jupyter.IkotlinKt.main(ikotlin.kt:72)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.65",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.69.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Super! Alle 3983 Tests bestanden!\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.66",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.70.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "DataFrame with 3983 observations\nFIPS                 [Str]  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ...\nAdmin2               [Str]  , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ...\nProvince_State       [Str]  , , , , , , , , Australian Capital Territory, New South Wales, Northern Territory, Queensland, South...\nCountry_Region       [Str]  Afghanistan, Albania, Algeria, Andorra, Angola, Antigua and Barbuda, Argentina, Armenia, Australia, ...\nLast_Update          [Str]  2021-04-08 04:21:13, 2021-04-08 04:21:13, 2021-04-08 04:21:13, 2021-04-08 04:21:13, 2021-04-08 04:21...\nLat                  [Str]  33.93911, 41.1533, 28.0339, 42.5063, -11.2027, 17.0608, -38.4161, 40.0691, -35.4735, -33.8688, -12.4...\nLong_                [Str]  67.709953, 20.1683, 1.6596, 1.5218, 17.8739, -61.7964, -63.6167, 45.0382, 149.0124, 151.2093, 130.84...\nConfirmed            [Int]  56873, 127192, 118004, 12363, 23010, 1177, 2450068, 198898, 123, 5318, 112, 1500, 663, 234, 20484, 9...\nDeaths               [Int]  2512, 2291, 3116, 119, 547, 29, 56832, 3647, 3, 54, 0, 6, 4, 13, 820, 9, 9546, 3780, 189, 547, 9447,...\nRecovered            [Str]  51940, 95600, 82192, 11616, 21545, 911, 2174625, 178227, 120, 0, 106, 1366, 651, 221, 19664, 928, 52...\nActive               [Str]  2421, 29301, 32696, 628, 918, 237, 218611, 17024, 0, 5264, 6, 128, 8, 0, 0, 14, 33688, 28144, 296, 1...\nCombined_Key         [Str]  Afghanistan, Albania, Algeria, Andorra, Angola, Antigua and Barbuda, Argentina, Armenia, Australian ...\nIncident_Rate        [Str]  146.0966446014229, 4419.765098339009, 269.1019230717044, 16000.776548243059, 70.01099120837206, 1201...\nCase_Fatality_Ratio  [Str]  4.416858614808433, 1.801213912824706, 2.6405884546286567, 0.9625495429911833, 2.3772272924815296, 2....\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.67",
   "versions": [
    {
     "start_checkpoint": 1618052509951,
     "parent": "c.71.0",
     "raw": [
      {
       "execution_count": 64,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Afghanistan\">Afghanistan</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"33.93911\">33.93911</td><td style=\"text-align:left\" title=\"67.709953\">67.709953</td><td style=\"text-align:left\" title=\"56873\">56873</td><td style=\"text-align:left\" title=\"2512\">2512</td><td style=\"text-align:left\" title=\"51940\">51940</td><td style=\"text-align:left\" title=\"2421\">2421</td><td style=\"text-align:left\" title=\"Afghanistan\">Afghanistan</td><td style=\"text-align:left\" title=\"146.0966446014229\">146.0966446014229</td><td style=\"text-align:left\" title=\"4.416858614808433\">4.416858614808433</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Albania\">Albania</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"41.1533\">41.1533</td><td style=\"text-align:left\" title=\"20.1683\">20.1683</td><td style=\"text-align:left\" title=\"127192\">127192</td><td style=\"text-align:left\" title=\"2291\">2291</td><td style=\"text-align:left\" title=\"95600\">95600</td><td style=\"text-align:left\" title=\"29301\">29301</td><td style=\"text-align:left\" title=\"Albania\">Albania</td><td style=\"text-align:left\" title=\"4419.765098339009\">4419.765098339009</td><td style=\"text-align:left\" title=\"1.801213912824706\">1.801213912824706</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Algeria\">Algeria</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"28.0339\">28.0339</td><td style=\"text-align:left\" title=\"1.6596\">1.6596</td><td style=\"text-align:left\" title=\"118004\">118004</td><td style=\"text-align:left\" title=\"3116\">3116</td><td style=\"text-align:left\" title=\"82192\">82192</td><td style=\"text-align:left\" title=\"32696\">32696</td><td style=\"text-align:left\" title=\"Algeria\">Algeria</td><td style=\"text-align:left\" title=\"269.1019230717044\">269.1019230717044</td><td style=\"text-align:left\" title=\"2.6405884546286567\">2.6405884546286567</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Andorra\">Andorra</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"42.5063\">42.5063</td><td style=\"text-align:left\" title=\"1.5218\">1.5218</td><td style=\"text-align:left\" title=\"12363\">12363</td><td style=\"text-align:left\" title=\"119\">119</td><td style=\"text-align:left\" title=\"11616\">11616</td><td style=\"text-align:left\" title=\"628\">628</td><td style=\"text-align:left\" title=\"Andorra\">Andorra</td><td style=\"text-align:left\" title=\"16000.776548243059\">16000.776548243059</td><td style=\"text-align:left\" title=\"0.9625495429911833\">0.9625495429911833</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Angola\">Angola</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-11.2027\">-11.2027</td><td style=\"text-align:left\" title=\"17.8739\">17.8739</td><td style=\"text-align:left\" title=\"23010\">23010</td><td style=\"text-align:left\" title=\"547\">547</td><td style=\"text-align:left\" title=\"21545\">21545</td><td style=\"text-align:left\" title=\"918\">918</td><td style=\"text-align:left\" title=\"Angola\">Angola</td><td style=\"text-align:left\" title=\"70.01099120837206\">70.01099120837206</td><td style=\"text-align:left\" title=\"2.3772272924815296\">2.3772272924815296</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Antigua and Barbuda\">Antigua and Barbuda</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"17.0608\">17.0608</td><td style=\"text-align:left\" title=\"-61.7964\">-61.7964</td><td style=\"text-align:left\" title=\"1177\">1177</td><td style=\"text-align:left\" title=\"29\">29</td><td style=\"text-align:left\" title=\"911\">911</td><td style=\"text-align:left\" title=\"237\">237</td><td style=\"text-align:left\" title=\"Antigua and Barbuda\">Antigua and Barbuda</td><td style=\"text-align:left\" title=\"1201.9034392614985\">1201.9034392614985</td><td style=\"text-align:left\" title=\"2.463891248937978\">2.463891248937978</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-38.4161\">-38.4161</td><td style=\"text-align:left\" title=\"-63.6167\">-63.6167</td><td style=\"text-align:left\" title=\"2450068\">2450068</td><td style=\"text-align:left\" title=\"56832\">56832</td><td style=\"text-align:left\" title=\"2174625\">2174625</td><td style=\"text-align:left\" title=\"218611\">218611</td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"5421.010905510044\">5421.010905510044</td><td style=\"text-align:left\" title=\"2.319609088400812\">2.319609088400812</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Armenia\">Armenia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"40.0691\">40.0691</td><td style=\"text-align:left\" title=\"45.0382\">45.0382</td><td style=\"text-align:left\" title=\"198898\">198898</td><td style=\"text-align:left\" title=\"3647\">3647</td><td style=\"text-align:left\" title=\"178227\">178227</td><td style=\"text-align:left\" title=\"17024\">17024</td><td style=\"text-align:left\" title=\"Armenia\">Armenia</td><td style=\"text-align:left\" title=\"6712.193502099394\">6712.193502099394</td><td style=\"text-align:left\" title=\"1.8336031533750967\">1.8336031533750967</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Australian Capital Territory\">Australian Capital Territory</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-35.4735\">-35.4735</td><td style=\"text-align:left\" title=\"149.0124\">149.0124</td><td style=\"text-align:left\" title=\"123\">123</td><td style=\"text-align:left\" title=\"3\">3</td><td style=\"text-align:left\" title=\"120\">120</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Australian Capital Territory, Australia\">Australian Capital Territory, Australia</td><td style=\"text-align:left\" title=\"28.73160476524177\">28.73160476524177</td><td style=\"text-align:left\" title=\"2.4390243902439024\">2.4390243902439024</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"New South Wales\">New South Wales</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-33.8688\">-33.8688</td><td style=\"text-align:left\" title=\"151.2093\">151.2093</td><td style=\"text-align:left\" title=\"5318\">5318</td><td style=\"text-align:left\" title=\"54\">54</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"5264\">5264</td><td style=\"text-align:left\" title=\"New South Wales, Australia\">New South Wales, Australia</td><td style=\"text-align:left\" title=\"65.50874599655087\">65.50874599655087</td><td style=\"text-align:left\" title=\"1.0154193305754042\">1.0154193305754042</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Northern Territory\">Northern Territory</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-12.4634\">-12.4634</td><td style=\"text-align:left\" title=\"130.8456\">130.8456</td><td style=\"text-align:left\" title=\"112\">112</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"106\">106</td><td style=\"text-align:left\" title=\"6\">6</td><td style=\"text-align:left\" title=\"Northern Territory, Australia\">Northern Territory, Australia</td><td style=\"text-align:left\" title=\"45.602605863192174\">45.602605863192174</td><td style=\"text-align:left\" title=\"0.0\">0.0</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Queensland\">Queensland</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-27.4698\">-27.4698</td><td style=\"text-align:left\" title=\"153.0251\">153.0251</td><td style=\"text-align:left\" title=\"1500\">1500</td><td style=\"text-align:left\" title=\"6\">6</td><td style=\"text-align:left\" title=\"1366\">1366</td><td style=\"text-align:left\" title=\"128\">128</td><td style=\"text-align:left\" title=\"Queensland, Australia\">Queensland, Australia</td><td style=\"text-align:left\" title=\"29.322646857589678\">29.322646857589678</td><td style=\"text-align:left\" title=\"0.4\">0.4</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"South Australia\">South Australia</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-34.9285\">-34.9285</td><td style=\"text-align:left\" title=\"138.6007\">138.6007</td><td style=\"text-align:left\" title=\"663\">663</td><td style=\"text-align:left\" title=\"4\">4</td><td style=\"text-align:left\" title=\"651\">651</td><td style=\"text-align:left\" title=\"8\">8</td><td style=\"text-align:left\" title=\"South Australia, Australia\">South Australia, Australia</td><td style=\"text-align:left\" title=\"37.74551665243381\">37.74551665243381</td><td style=\"text-align:left\" title=\"0.6033182503770739\">0.6033182503770739</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Tasmania\">Tasmania</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-42.8821\">-42.8821</td><td style=\"text-align:left\" title=\"147.3272\">147.3272</td><td style=\"text-align:left\" title=\"234\">234</td><td style=\"text-align:left\" title=\"13\">13</td><td style=\"text-align:left\" title=\"221\">221</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Tasmania, Australia\">Tasmania, Australia</td><td style=\"text-align:left\" title=\"43.69747899159664\">43.69747899159664</td><td style=\"text-align:left\" title=\"5.555555555555555\">5.555555555555555</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Victoria\">Victoria</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-37.8136\">-37.8136</td><td style=\"text-align:left\" title=\"144.9631\">144.9631</td><td style=\"text-align:left\" title=\"20484\">20484</td><td style=\"text-align:left\" title=\"820\">820</td><td style=\"text-align:left\" title=\"19664\">19664</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Victoria, Australia\">Victoria, Australia</td><td style=\"text-align:left\" title=\"308.96393610763363\">308.96393610763363</td><td style=\"text-align:left\" title=\"4.003124389767623\">4.003124389767623</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Western Australia\">Western Australia</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-31.9505\">-31.9505</td><td style=\"text-align:left\" title=\"115.8605\">115.8605</td><td style=\"text-align:left\" title=\"951\">951</td><td style=\"text-align:left\" title=\"9\">9</td><td style=\"text-align:left\" title=\"928\">928</td><td style=\"text-align:left\" title=\"14\">14</td><td style=\"text-align:left\" title=\"Western Australia, Australia\">Western Australia, Australia</td><td style=\"text-align:left\" title=\"36.151448338782025\">36.151448338782025</td><td style=\"text-align:left\" title=\"0.9463722397476341\">0.9463722397476341</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Austria\">Austria</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"47.5162\">47.5162</td><td style=\"text-align:left\" title=\"14.5501\">14.5501</td><td style=\"text-align:left\" title=\"566008\">566008</td><td style=\"text-align:left\" title=\"9546\">9546</td><td style=\"text-align:left\" title=\"522774\">522774</td><td style=\"text-align:left\" title=\"33688\">33688</td><td style=\"text-align:left\" title=\"Austria\">Austria</td><td style=\"text-align:left\" title=\"6284.508793746669\">6284.508793746669</td><td style=\"text-align:left\" title=\"1.6865486000197878\">1.6865486000197878</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Azerbaijan\">Azerbaijan</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"40.1431\">40.1431</td><td style=\"text-align:left\" title=\"47.5769\">47.5769</td><td style=\"text-align:left\" title=\"276464\">276464</td><td style=\"text-align:left\" title=\"3780\">3780</td><td style=\"text-align:left\" title=\"244540\">244540</td><td style=\"text-align:left\" title=\"28144\">28144</td><td style=\"text-align:left\" title=\"Azerbaijan\">Azerbaijan</td><td style=\"text-align:left\" title=\"2726.691274191441\">2726.691274191441</td><td style=\"text-align:left\" title=\"1.367266624225939\">1.367266624225939</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bahamas\">Bahamas</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"25.025885\">25.025885</td><td style=\"text-align:left\" title=\"-78.035889\">-78.035889</td><td style=\"text-align:left\" title=\"9296\">9296</td><td style=\"text-align:left\" title=\"189\">189</td><td style=\"text-align:left\" title=\"8811\">8811</td><td style=\"text-align:left\" title=\"296\">296</td><td style=\"text-align:left\" title=\"Bahamas\">Bahamas</td><td style=\"text-align:left\" title=\"2363.902677190984\">2363.902677190984</td><td style=\"text-align:left\" title=\"2.033132530120482\">2.033132530120482</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bahrain\">Bahrain</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"26.0275\">26.0275</td><td style=\"text-align:left\" title=\"50.55\">50.55</td><td style=\"text-align:left\" title=\"151931\">151931</td><td style=\"text-align:left\" title=\"547\">547</td><td style=\"text-align:left\" title=\"141119\">141119</td><td style=\"text-align:left\" title=\"10265\">10265</td><td style=\"text-align:left\" title=\"Bahrain\">Bahrain</td><td style=\"text-align:left\" title=\"8928.803355463706\">8928.803355463706</td><td style=\"text-align:left\" title=\"0.3600318565664677\">0.3600318565664677</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.68",
   "versions": [
    {
     "start_checkpoint": 1618056280791,
     "parent": "c.75.0",
     "raw": [
      {
       "execution_count": 141,
       "output_type": "execute_result",
       "data": {
        "text/html": "<html><body><table><tr><th style=\"text-align:left\">FIPS</th><th style=\"text-align:left\">Admin2</th><th style=\"text-align:left\">Province_State</th><th style=\"text-align:left\">Country_Region</th><th style=\"text-align:left\">Last_Update</th><th style=\"text-align:left\">Lat</th><th style=\"text-align:left\">Long_</th><th style=\"text-align:left\">Confirmed</th><th style=\"text-align:left\">Deaths</th><th style=\"text-align:left\">Recovered</th><th style=\"text-align:left\">Active</th><th style=\"text-align:left\">Combined_Key</th><th style=\"text-align:left\">Incident_Rate</th><th style=\"text-align:left\">Case_Fatality_Ratio</th></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Afghanistan\">Afghanistan</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"33.93911\">33.93911</td><td style=\"text-align:left\" title=\"67.709953\">67.709953</td><td style=\"text-align:left\" title=\"56873\">56873</td><td style=\"text-align:left\" title=\"2512\">2512</td><td style=\"text-align:left\" title=\"51940\">51940</td><td style=\"text-align:left\" title=\"2421\">2421</td><td style=\"text-align:left\" title=\"Afghanistan\">Afghanistan</td><td style=\"text-align:left\" title=\"146.0966446014229\">146.0966446014229</td><td style=\"text-align:left\" title=\"4.416858614808433\">4.416858614808433</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Albania\">Albania</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"41.1533\">41.1533</td><td style=\"text-align:left\" title=\"20.1683\">20.1683</td><td style=\"text-align:left\" title=\"127192\">127192</td><td style=\"text-align:left\" title=\"2291\">2291</td><td style=\"text-align:left\" title=\"95600\">95600</td><td style=\"text-align:left\" title=\"29301\">29301</td><td style=\"text-align:left\" title=\"Albania\">Albania</td><td style=\"text-align:left\" title=\"4419.765098339009\">4419.765098339009</td><td style=\"text-align:left\" title=\"1.801213912824706\">1.801213912824706</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Algeria\">Algeria</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"28.0339\">28.0339</td><td style=\"text-align:left\" title=\"1.6596\">1.6596</td><td style=\"text-align:left\" title=\"118004\">118004</td><td style=\"text-align:left\" title=\"3116\">3116</td><td style=\"text-align:left\" title=\"82192\">82192</td><td style=\"text-align:left\" title=\"32696\">32696</td><td style=\"text-align:left\" title=\"Algeria\">Algeria</td><td style=\"text-align:left\" title=\"269.1019230717044\">269.1019230717044</td><td style=\"text-align:left\" title=\"2.6405884546286567\">2.6405884546286567</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Andorra\">Andorra</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"42.5063\">42.5063</td><td style=\"text-align:left\" title=\"1.5218\">1.5218</td><td style=\"text-align:left\" title=\"12363\">12363</td><td style=\"text-align:left\" title=\"119\">119</td><td style=\"text-align:left\" title=\"11616\">11616</td><td style=\"text-align:left\" title=\"628\">628</td><td style=\"text-align:left\" title=\"Andorra\">Andorra</td><td style=\"text-align:left\" title=\"16000.776548243059\">16000.776548243059</td><td style=\"text-align:left\" title=\"0.9625495429911833\">0.9625495429911833</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Angola\">Angola</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-11.2027\">-11.2027</td><td style=\"text-align:left\" title=\"17.8739\">17.8739</td><td style=\"text-align:left\" title=\"23010\">23010</td><td style=\"text-align:left\" title=\"547\">547</td><td style=\"text-align:left\" title=\"21545\">21545</td><td style=\"text-align:left\" title=\"918\">918</td><td style=\"text-align:left\" title=\"Angola\">Angola</td><td style=\"text-align:left\" title=\"70.01099120837206\">70.01099120837206</td><td style=\"text-align:left\" title=\"2.3772272924815296\">2.3772272924815296</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Antigua and Barbuda\">Antigua and Barbuda</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"17.0608\">17.0608</td><td style=\"text-align:left\" title=\"-61.7964\">-61.7964</td><td style=\"text-align:left\" title=\"1177\">1177</td><td style=\"text-align:left\" title=\"29\">29</td><td style=\"text-align:left\" title=\"911\">911</td><td style=\"text-align:left\" title=\"237\">237</td><td style=\"text-align:left\" title=\"Antigua and Barbuda\">Antigua and Barbuda</td><td style=\"text-align:left\" title=\"1201.9034392614985\">1201.9034392614985</td><td style=\"text-align:left\" title=\"2.463891248937978\">2.463891248937978</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-38.4161\">-38.4161</td><td style=\"text-align:left\" title=\"-63.6167\">-63.6167</td><td style=\"text-align:left\" title=\"2450068\">2450068</td><td style=\"text-align:left\" title=\"56832\">56832</td><td style=\"text-align:left\" title=\"2174625\">2174625</td><td style=\"text-align:left\" title=\"218611\">218611</td><td style=\"text-align:left\" title=\"Argentina\">Argentina</td><td style=\"text-align:left\" title=\"5421.010905510044\">5421.010905510044</td><td style=\"text-align:left\" title=\"2.319609088400812\">2.319609088400812</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Armenia\">Armenia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"40.0691\">40.0691</td><td style=\"text-align:left\" title=\"45.0382\">45.0382</td><td style=\"text-align:left\" title=\"198898\">198898</td><td style=\"text-align:left\" title=\"3647\">3647</td><td style=\"text-align:left\" title=\"178227\">178227</td><td style=\"text-align:left\" title=\"17024\">17024</td><td style=\"text-align:left\" title=\"Armenia\">Armenia</td><td style=\"text-align:left\" title=\"6712.193502099394\">6712.193502099394</td><td style=\"text-align:left\" title=\"1.8336031533750967\">1.8336031533750967</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Australian Capital Territory\">Australian Capital Territory</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-35.4735\">-35.4735</td><td style=\"text-align:left\" title=\"149.0124\">149.0124</td><td style=\"text-align:left\" title=\"123\">123</td><td style=\"text-align:left\" title=\"3\">3</td><td style=\"text-align:left\" title=\"120\">120</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Australian Capital Territory, Australia\">Australian Capital Territory, Australia</td><td style=\"text-align:left\" title=\"28.73160476524177\">28.73160476524177</td><td style=\"text-align:left\" title=\"2.4390243902439024\">2.4390243902439024</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"New South Wales\">New South Wales</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-33.8688\">-33.8688</td><td style=\"text-align:left\" title=\"151.2093\">151.2093</td><td style=\"text-align:left\" title=\"5318\">5318</td><td style=\"text-align:left\" title=\"54\">54</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"5264\">5264</td><td style=\"text-align:left\" title=\"New South Wales, Australia\">New South Wales, Australia</td><td style=\"text-align:left\" title=\"65.50874599655087\">65.50874599655087</td><td style=\"text-align:left\" title=\"1.0154193305754042\">1.0154193305754042</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Northern Territory\">Northern Territory</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-12.4634\">-12.4634</td><td style=\"text-align:left\" title=\"130.8456\">130.8456</td><td style=\"text-align:left\" title=\"112\">112</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"106\">106</td><td style=\"text-align:left\" title=\"6\">6</td><td style=\"text-align:left\" title=\"Northern Territory, Australia\">Northern Territory, Australia</td><td style=\"text-align:left\" title=\"45.602605863192174\">45.602605863192174</td><td style=\"text-align:left\" title=\"0.0\">0.0</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Queensland\">Queensland</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-27.4698\">-27.4698</td><td style=\"text-align:left\" title=\"153.0251\">153.0251</td><td style=\"text-align:left\" title=\"1500\">1500</td><td style=\"text-align:left\" title=\"6\">6</td><td style=\"text-align:left\" title=\"1366\">1366</td><td style=\"text-align:left\" title=\"128\">128</td><td style=\"text-align:left\" title=\"Queensland, Australia\">Queensland, Australia</td><td style=\"text-align:left\" title=\"29.322646857589678\">29.322646857589678</td><td style=\"text-align:left\" title=\"0.4\">0.4</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"South Australia\">South Australia</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-34.9285\">-34.9285</td><td style=\"text-align:left\" title=\"138.6007\">138.6007</td><td style=\"text-align:left\" title=\"663\">663</td><td style=\"text-align:left\" title=\"4\">4</td><td style=\"text-align:left\" title=\"651\">651</td><td style=\"text-align:left\" title=\"8\">8</td><td style=\"text-align:left\" title=\"South Australia, Australia\">South Australia, Australia</td><td style=\"text-align:left\" title=\"37.74551665243381\">37.74551665243381</td><td style=\"text-align:left\" title=\"0.6033182503770739\">0.6033182503770739</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Tasmania\">Tasmania</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-42.8821\">-42.8821</td><td style=\"text-align:left\" title=\"147.3272\">147.3272</td><td style=\"text-align:left\" title=\"234\">234</td><td style=\"text-align:left\" title=\"13\">13</td><td style=\"text-align:left\" title=\"221\">221</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Tasmania, Australia\">Tasmania, Australia</td><td style=\"text-align:left\" title=\"43.69747899159664\">43.69747899159664</td><td style=\"text-align:left\" title=\"5.555555555555555\">5.555555555555555</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Victoria\">Victoria</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-37.8136\">-37.8136</td><td style=\"text-align:left\" title=\"144.9631\">144.9631</td><td style=\"text-align:left\" title=\"20484\">20484</td><td style=\"text-align:left\" title=\"820\">820</td><td style=\"text-align:left\" title=\"19664\">19664</td><td style=\"text-align:left\" title=\"0\">0</td><td style=\"text-align:left\" title=\"Victoria, Australia\">Victoria, Australia</td><td style=\"text-align:left\" title=\"308.96393610763363\">308.96393610763363</td><td style=\"text-align:left\" title=\"4.003124389767623\">4.003124389767623</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Western Australia\">Western Australia</td><td style=\"text-align:left\" title=\"Australia\">Australia</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"-31.9505\">-31.9505</td><td style=\"text-align:left\" title=\"115.8605\">115.8605</td><td style=\"text-align:left\" title=\"951\">951</td><td style=\"text-align:left\" title=\"9\">9</td><td style=\"text-align:left\" title=\"928\">928</td><td style=\"text-align:left\" title=\"14\">14</td><td style=\"text-align:left\" title=\"Western Australia, Australia\">Western Australia, Australia</td><td style=\"text-align:left\" title=\"36.151448338782025\">36.151448338782025</td><td style=\"text-align:left\" title=\"0.9463722397476341\">0.9463722397476341</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Austria\">Austria</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"47.5162\">47.5162</td><td style=\"text-align:left\" title=\"14.5501\">14.5501</td><td style=\"text-align:left\" title=\"566008\">566008</td><td style=\"text-align:left\" title=\"9546\">9546</td><td style=\"text-align:left\" title=\"522774\">522774</td><td style=\"text-align:left\" title=\"33688\">33688</td><td style=\"text-align:left\" title=\"Austria\">Austria</td><td style=\"text-align:left\" title=\"6284.508793746669\">6284.508793746669</td><td style=\"text-align:left\" title=\"1.6865486000197878\">1.6865486000197878</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Azerbaijan\">Azerbaijan</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"40.1431\">40.1431</td><td style=\"text-align:left\" title=\"47.5769\">47.5769</td><td style=\"text-align:left\" title=\"276464\">276464</td><td style=\"text-align:left\" title=\"3780\">3780</td><td style=\"text-align:left\" title=\"244540\">244540</td><td style=\"text-align:left\" title=\"28144\">28144</td><td style=\"text-align:left\" title=\"Azerbaijan\">Azerbaijan</td><td style=\"text-align:left\" title=\"2726.691274191441\">2726.691274191441</td><td style=\"text-align:left\" title=\"1.367266624225939\">1.367266624225939</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bahamas\">Bahamas</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"25.025885\">25.025885</td><td style=\"text-align:left\" title=\"-78.035889\">-78.035889</td><td style=\"text-align:left\" title=\"9296\">9296</td><td style=\"text-align:left\" title=\"189\">189</td><td style=\"text-align:left\" title=\"8811\">8811</td><td style=\"text-align:left\" title=\"296\">296</td><td style=\"text-align:left\" title=\"Bahamas\">Bahamas</td><td style=\"text-align:left\" title=\"2363.902677190984\">2363.902677190984</td><td style=\"text-align:left\" title=\"2.033132530120482\">2.033132530120482</td></tr><tr><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"\"></td><td style=\"text-align:left\" title=\"Bahrain\">Bahrain</td><td style=\"text-align:left\" title=\"2021-04-08 04:21:13\">2021-04-08 04:21:13</td><td style=\"text-align:left\" title=\"26.0275\">26.0275</td><td style=\"text-align:left\" title=\"50.55\">50.55</td><td style=\"text-align:left\" title=\"151931\">151931</td><td style=\"text-align:left\" title=\"547\">547</td><td style=\"text-align:left\" title=\"141119\">141119</td><td style=\"text-align:left\" title=\"10265\">10265</td><td style=\"text-align:left\" title=\"Bahrain\">Bahrain</td><td style=\"text-align:left\" title=\"8928.803355463706\">8928.803355463706</td><td style=\"text-align:left\" title=\"0.3600318565664677\">0.3600318565664677</td></tr></table></body></html>"
       },
       "metadata": {
        "new_classpath": []
       }
      }
     ]
    }
   ]
  }
 ]
}