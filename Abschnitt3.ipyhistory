{
 "checkpoints": [
  {
   "timestamp": 1619004012983,
   "notebook": 0,
   "targetCells": [
    {
     "cell": "m.0.0",
     "changeType": "added",
     "index": 0
    },
    {
     "cell": "c.0.0",
     "changeType": "added",
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1619166384323,
   "notebook": 1,
   "targetCells": [
    {
     "cell": "m.1.0",
     "changeType": "added",
     "index": 0
    },
    {
     "cell": "c.1.0",
     "changeType": "added",
     "index": 1
    },
    {
     "cell": "m.2.0",
     "changeType": "added",
     "index": 2
    },
    {
     "cell": "c.2.0",
     "changeType": "added",
     "index": 3
    },
    {
     "cell": "m.3.0",
     "changeType": "added",
     "index": 4
    },
    {
     "cell": "c.3.0",
     "changeType": "added",
     "index": 5
    },
    {
     "cell": "m.4.0",
     "changeType": "added",
     "index": 6
    },
    {
     "cell": "c.4.0",
     "changeType": "added",
     "index": 7
    },
    {
     "cell": "m.5.0",
     "changeType": "added",
     "index": 8
    },
    {
     "cell": "c.5.0",
     "changeType": "added",
     "index": 9
    },
    {
     "cell": "m.6.0",
     "changeType": "added",
     "index": 10
    },
    {
     "cell": "c.6.0",
     "changeType": "added",
     "index": 11
    },
    {
     "cell": "m.7.0",
     "changeType": "added",
     "index": 12
    },
    {
     "cell": "c.7.0",
     "changeType": "added",
     "index": 13
    },
    {
     "cell": "m.8.0",
     "changeType": "added",
     "index": 14
    },
    {
     "cell": "c.8.0",
     "changeType": "added",
     "index": 15
    },
    {
     "cell": "m.9.0",
     "changeType": "added",
     "index": 16
    },
    {
     "cell": "c.9.0",
     "changeType": "added",
     "index": 17
    },
    {
     "cell": "c.10.0",
     "changeType": "added",
     "index": 18
    },
    {
     "cell": "m.10.0",
     "changeType": "added",
     "index": 19
    },
    {
     "cell": "c.11.0",
     "changeType": "added",
     "index": 20
    }
   ]
  },
  {
   "timestamp": 1619166409884,
   "notebook": 2,
   "targetCells": [
    {
     "cell": "c.1.0",
     "changeType": "output changed",
     "output": [
      "o.0.1"
     ],
     "index": 1
    },
    {
     "cell": "c.12.0",
     "changeType": "added",
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167416345,
   "notebook": 3,
   "targetCells": [
    {
     "cell": "c.12.1",
     "changeType": "edited",
     "output": [
      "o.8.0"
     ],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167430512,
   "notebook": 4,
   "targetCells": [
    {
     "cell": "c.12.2",
     "changeType": "edited",
     "output": [],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167469117,
   "notebook": 5,
   "targetCells": [
    {
     "cell": "c.12.2",
     "changeType": "output changed",
     "output": [
      "o.9.0"
     ],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167519480,
   "notebook": 6,
   "targetCells": [
    {
     "cell": "c.12.3",
     "changeType": "edited",
     "output": [],
     "index": 17
    }
   ]
  },
  {
   "timestamp": 1619167525913,
   "notebook": 7,
   "targetCells": [
    {
     "cell": "c.12.4",
     "changeType": "edited",
     "output": [
      "o.10.0"
     ],
     "index": 17
    },
    {
     "cell": "m.9.1",
     "changeType": "edited",
     "index": 16
    }
   ]
  },
  {
   "timestamp": 1619273398309,
   "notebook": 8,
   "targetCells": [
    {
     "cell": "c.13.0",
     "changeType": "added",
     "index": 1
    },
    {
     "cell": "c.14.0",
     "changeType": "added",
     "index": 17
    },
    {
     "cell": "m.11.0",
     "changeType": "added",
     "index": 18
    },
    {
     "cell": "c.15.0",
     "changeType": "added",
     "index": 19
    },
    {
     "cell": "c.16.0",
     "changeType": "added",
     "index": 20
    },
    {
     "cell": "m.12.0",
     "changeType": "added",
     "index": 21
    },
    {
     "cell": "c.17.0",
     "changeType": "added",
     "index": 22
    },
    {
     "cell": "m.13.0",
     "changeType": "added",
     "index": 23
    },
    {
     "cell": "c.18.0",
     "changeType": "added",
     "index": 24
    },
    {
     "cell": "m.14.0",
     "changeType": "added",
     "index": 25
    },
    {
     "cell": "c.19.0",
     "changeType": "added",
     "index": 26
    },
    {
     "cell": "m.15.0",
     "changeType": "added",
     "index": 27
    },
    {
     "cell": "c.20.0",
     "changeType": "added",
     "index": 28
    },
    {
     "cell": "m.16.0",
     "changeType": "added",
     "index": 29
    },
    {
     "cell": "c.21.0",
     "changeType": "added",
     "index": 30
    },
    {
     "cell": "m.17.0",
     "changeType": "added",
     "index": 31
    },
    {
     "cell": "m.18.0",
     "changeType": "added",
     "index": 32
    },
    {
     "cell": "c.22.0",
     "changeType": "added",
     "index": 33
    },
    {
     "cell": "m.19.0",
     "changeType": "added",
     "index": 34
    },
    {
     "cell": "m.20.0",
     "changeType": "added",
     "index": 35
    },
    {
     "cell": "c.23.0",
     "changeType": "added",
     "index": 36
    },
    {
     "cell": "m.21.0",
     "changeType": "added",
     "index": 37
    },
    {
     "cell": "c.24.0",
     "changeType": "added",
     "index": 38
    },
    {
     "cell": "m.22.0",
     "changeType": "added",
     "index": 39
    },
    {
     "cell": "c.25.0",
     "changeType": "added",
     "index": 40
    },
    {
     "cell": "m.23.0",
     "changeType": "added",
     "index": 41
    },
    {
     "cell": "c.26.0",
     "changeType": "added",
     "index": 42
    },
    {
     "cell": "m.24.0",
     "changeType": "added",
     "index": 43
    },
    {
     "cell": "m.25.0",
     "changeType": "added",
     "index": 44
    },
    {
     "cell": "c.27.0",
     "changeType": "added",
     "index": 45
    },
    {
     "cell": "m.26.0",
     "changeType": "added",
     "index": 46
    },
    {
     "cell": "c.28.0",
     "changeType": "added",
     "index": 47
    },
    {
     "cell": "m.27.0",
     "changeType": "added",
     "index": 48
    },
    {
     "cell": "c.29.0",
     "changeType": "added",
     "index": 49
    },
    {
     "cell": "m.28.0",
     "changeType": "added",
     "index": 50
    },
    {
     "cell": "c.30.0",
     "changeType": "added",
     "index": 51
    },
    {
     "cell": "c.31.0",
     "changeType": "added",
     "index": 53
    }
   ]
  },
  {
   "timestamp": 1619273440670,
   "notebook": 9,
   "targetCells": [
    {
     "cell": "c.32.0",
     "changeType": "added",
     "index": 50
    }
   ]
  },
  {
   "timestamp": 1619273462931,
   "notebook": 10,
   "targetCells": [
    {
     "cell": "c.32.1",
     "changeType": "edited",
     "output": [
      "o.29.0"
     ],
     "index": 50
    }
   ]
  },
  {
   "timestamp": 1619344122936,
   "notebook": 11,
   "targetCells": [
    {
     "cell": "m.29.0",
     "changeType": "added",
     "index": 34
    },
    {
     "cell": "c.33.0",
     "changeType": "added",
     "index": 35
    },
    {
     "cell": "c.34.0",
     "changeType": "added",
     "index": 36
    },
    {
     "cell": "m.30.0",
     "changeType": "added",
     "index": 50
    },
    {
     "cell": "m.31.0",
     "changeType": "added",
     "index": 54
    },
    {
     "cell": "c.35.0",
     "changeType": "added",
     "index": 55
    },
    {
     "cell": "m.32.0",
     "changeType": "added",
     "index": 56
    },
    {
     "cell": "c.36.0",
     "changeType": "added",
     "index": 57
    },
    {
     "cell": "m.33.0",
     "changeType": "added",
     "index": 58
    },
    {
     "cell": "c.37.0",
     "changeType": "added",
     "index": 59
    },
    {
     "cell": "c.38.0",
     "changeType": "added",
     "index": 60
    },
    {
     "cell": "m.34.0",
     "changeType": "added",
     "index": 61
    },
    {
     "cell": "m.35.0",
     "changeType": "added",
     "index": 62
    },
    {
     "cell": "m.36.0",
     "changeType": "added",
     "index": 63
    },
    {
     "cell": "m.37.0",
     "changeType": "added",
     "index": 64
    },
    {
     "cell": "c.39.0",
     "changeType": "added",
     "index": 65
    }
   ]
  },
  {
   "timestamp": 1619344680409,
   "notebook": 12,
   "targetCells": [
    {
     "cell": "c.40.0",
     "changeType": "added",
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619344804639,
   "notebook": 13,
   "targetCells": [
    {
     "cell": "c.40.1",
     "changeType": "edited",
     "output": [],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619344843467,
   "notebook": 14,
   "targetCells": [
    {
     "cell": "c.40.2",
     "changeType": "edited",
     "output": [],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619344920701,
   "notebook": 15,
   "targetCells": [
    {
     "cell": "c.40.3",
     "changeType": "edited",
     "output": [],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619344948011,
   "notebook": 16,
   "targetCells": [
    {
     "cell": "c.40.4",
     "changeType": "edited",
     "output": [],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619344965296,
   "notebook": 17,
   "targetCells": [
    {
     "cell": "c.40.5",
     "changeType": "edited",
     "output": [
      "o.35.0"
     ],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619344997121,
   "notebook": 18,
   "targetCells": [
    {
     "cell": "c.40.6",
     "changeType": "edited",
     "output": [
      "o.36.0"
     ],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619345039116,
   "notebook": 19,
   "targetCells": [
    {
     "cell": "c.40.7",
     "changeType": "edited",
     "output": [
      "o.37.0"
     ],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619345077293,
   "notebook": 20,
   "targetCells": [
    {
     "cell": "c.40.8",
     "changeType": "edited",
     "output": [
      "o.38.0"
     ],
     "index": 62
    }
   ]
  },
  {
   "timestamp": 1619345085096,
   "notebook": 21,
   "targetCells": [
    {
     "cell": "c.40.9",
     "changeType": "edited",
     "output": [
      "o.39.0"
     ],
     "index": 62
    },
    {
     "cell": "m.34.1",
     "changeType": "edited",
     "index": 61
    },
    {
     "cell": "c.41.0",
     "changeType": "added",
     "index": 63
    },
    {
     "cell": "c.42.0",
     "changeType": "added",
     "index": 64
    },
    {
     "cell": "c.43.0",
     "changeType": "added",
     "index": 65
    }
   ]
  },
  {
   "timestamp": 1619427664533,
   "notebook": 22,
   "targetCells": [
    {
     "cell": "m.38.0",
     "changeType": "added",
     "index": 0
    },
    {
     "cell": "c.44.0",
     "changeType": "added",
     "index": 60
    },
    {
     "cell": "m.39.0",
     "changeType": "added",
     "index": 63
    },
    {
     "cell": "c.45.0",
     "changeType": "added",
     "index": 64
    },
    {
     "cell": "m.40.0",
     "changeType": "added",
     "index": 65
    },
    {
     "cell": "c.46.0",
     "changeType": "added",
     "index": 66
    },
    {
     "cell": "m.41.0",
     "changeType": "added",
     "index": 67
    },
    {
     "cell": "c.47.0",
     "changeType": "added",
     "index": 68
    },
    {
     "cell": "m.42.0",
     "changeType": "added",
     "index": 69
    },
    {
     "cell": "c.48.0",
     "changeType": "added",
     "index": 70
    },
    {
     "cell": "m.43.0",
     "changeType": "added",
     "index": 71
    },
    {
     "cell": "c.49.0",
     "changeType": "added",
     "index": 72
    },
    {
     "cell": "m.44.0",
     "changeType": "added",
     "index": 73
    },
    {
     "cell": "c.50.0",
     "changeType": "added",
     "index": 74
    },
    {
     "cell": "m.45.0",
     "changeType": "added",
     "index": 75
    },
    {
     "cell": "c.51.0",
     "changeType": "added",
     "index": 76
    },
    {
     "cell": "m.46.0",
     "changeType": "added",
     "index": 77
    },
    {
     "cell": "c.52.0",
     "changeType": "added",
     "index": 78
    },
    {
     "cell": "m.47.0",
     "changeType": "added",
     "index": 79
    },
    {
     "cell": "c.53.0",
     "changeType": "added",
     "index": 80
    },
    {
     "cell": "c.54.0",
     "changeType": "added",
     "index": 82
    }
   ]
  },
  {
   "timestamp": 1619427699980,
   "notebook": 23,
   "targetCells": [
    {
     "cell": "m.38.1",
     "changeType": "edited",
     "index": 0
    }
   ]
  }
 ],
 "notebook": {
  "artifact_name": "n.0",
  "versions": [
   {
    "start_checkpoint": 1619004012983,
    "cells": [
     "m.0.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1619166384323,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619166409884,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.0",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167416345,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.1",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167430512,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.2",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167469117,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.2",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167519480,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.0",
     "c.12.3",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619167525913,
    "cells": [
     "m.1.0",
     "c.1.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.12.4",
     "c.9.0",
     "c.10.0",
     "m.10.0",
     "c.11.0"
    ]
   },
   {
    "start_checkpoint": 1619273398309,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.19.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.27.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.10.0",
     "c.31.0"
    ]
   },
   {
    "start_checkpoint": 1619273440670,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.19.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.27.0",
     "c.29.0",
     "c.32.0",
     "m.28.0",
     "c.30.0",
     "m.10.0",
     "c.31.0"
    ]
   },
   {
    "start_checkpoint": 1619273462931,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.19.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.27.0",
     "c.29.0",
     "c.32.1",
     "m.28.0",
     "c.30.0",
     "m.10.0",
     "c.31.0"
    ]
   },
   {
    "start_checkpoint": 1619344122936,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619344680409,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.0",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619344804639,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.1",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619344843467,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.2",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619344920701,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.3",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619344948011,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.4",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619344965296,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.5",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619344997121,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.6",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619345039116,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.7",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619345077293,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.0",
     "c.40.8",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619345085096,
    "cells": [
     "m.1.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.38.0",
     "m.34.1",
     "c.40.9",
     "c.41.0",
     "c.42.0",
     "c.43.0",
     "m.35.0",
     "m.36.0",
     "m.37.0",
     "c.39.0"
    ]
   },
   {
    "start_checkpoint": 1619427664533,
    "cells": [
     "m.38.0",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.44.0",
     "m.34.1",
     "c.40.9",
     "m.39.0",
     "c.45.0",
     "m.40.0",
     "c.46.0",
     "m.41.0",
     "c.47.0",
     "m.42.0",
     "c.48.0",
     "m.43.0",
     "c.49.0",
     "m.44.0",
     "c.50.0",
     "m.45.0",
     "c.51.0",
     "m.46.0",
     "c.52.0",
     "m.47.0",
     "c.53.0",
     "m.37.0",
     "c.54.0"
    ]
   },
   {
    "start_checkpoint": 1619427699980,
    "cells": [
     "m.38.1",
     "c.13.0",
     "m.2.0",
     "c.2.0",
     "m.3.0",
     "c.3.0",
     "m.4.0",
     "c.4.0",
     "m.5.0",
     "c.5.0",
     "m.6.0",
     "c.6.0",
     "m.7.0",
     "c.7.0",
     "m.8.0",
     "c.8.0",
     "m.9.1",
     "c.14.0",
     "m.11.0",
     "c.15.0",
     "c.16.0",
     "m.12.0",
     "c.17.0",
     "m.13.0",
     "c.18.0",
     "m.14.0",
     "c.19.0",
     "m.15.0",
     "c.20.0",
     "m.16.0",
     "c.21.0",
     "m.17.0",
     "m.18.0",
     "c.22.0",
     "m.29.0",
     "c.33.0",
     "c.34.0",
     "m.20.0",
     "c.23.0",
     "m.21.0",
     "c.24.0",
     "m.22.0",
     "c.25.0",
     "m.23.0",
     "c.26.0",
     "m.24.0",
     "m.25.0",
     "c.27.0",
     "m.26.0",
     "c.28.0",
     "m.30.0",
     "c.29.0",
     "m.28.0",
     "c.30.0",
     "m.31.0",
     "c.35.0",
     "m.32.0",
     "c.36.0",
     "m.33.0",
     "c.37.0",
     "c.44.0",
     "m.34.1",
     "c.40.9",
     "m.39.0",
     "c.45.0",
     "m.40.0",
     "c.46.0",
     "m.41.0",
     "c.47.0",
     "m.42.0",
     "c.48.0",
     "m.43.0",
     "c.49.0",
     "m.44.0",
     "c.50.0",
     "m.45.0",
     "c.51.0",
     "m.46.0",
     "c.52.0",
     "m.47.0",
     "c.53.0",
     "m.37.0",
     "c.54.0"
    ]
   }
  ]
 },
 "codeCells": [
  {
   "output_histories": {},
   "artifact_name": "c.0",
   "versions": [
    {
     "start_checkpoint": 1619004012983,
     "parent": "n.0.0",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.0"
   },
   "artifact_name": "c.1",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "literal": "class Person (val name: String, var alter: Int)\n\nval p1 = Person(\"Max Mustermann\", 21)\nprintln(\"Person 1, $p1: \\nName: ${p1.name}, Alter: ${p1.alter}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 63
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.1"
   },
   "artifact_name": "c.2",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "literal": "class Auto (\n    val marke: String, //Es wird ein Feld mit dem Namen marke und ein Getter hinzugefügt und bei Erzeugung mit dem übergebenen Wert gefüllt.\n    var farbe: String, //Es wird ein Feld mit dem Namen farbe und einem Getter sowie Setter hinzugefügt und bei Erzeugung mit dem übergebenen Wert gefüllt.\n    ps: Int //Dies ist lediglich ein Übergabeparameter, der im Konstruktor verwendet werden kann.\n)\n\nval a1 = Auto (\"BMW\", \"Gelb\", 220)\nprintln(\"Marke von a1: ${a1.marke}, Farbe von a1: ${a1.farbe}.\") //Benutzung der Getter von marke und farbe\n//println(a1.ps) -> Error, da ps kein Feld sondern nur ein Übergabeparameter ist\n//a1.marke = \"Audi\" -> Error, da das Feld marke nicht verändert werden kann und auch keinen Setter besitzt\na1.farbe = \"Rot\" //Aufruf des Setters von farbe. Das Feld farbe kann verändert werden, da ein Setter vorhanden ist und das Feld den Typ var besitzt\nprintln(\"Farbe von a1 nach Umlackierung: ${a1.farbe}.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 11,
      "ch": 54
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.2"
   },
   "artifact_name": "c.3",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "literal": "class Computer (){\n    val marke: String = \"Fuhitsu\"\n    var istAn: Boolean = false\n}\n\nval c1 = Computer ()\nprintln(\"Marke von c1: ${c1.marke}, ist c1 an?: ${c1.istAn}.\") //Benutzung der Getter von marke und istAn\n// c1.marke = \"LD\" -> Error, da das Feld marke nicht verändert werden kann und auch keinen Setter besitzt\nc1.istAn = true //Aufruf des Setters von istAn. Das Feld istAn kann verändert werden, da ein Setter vorhanden ist und das Feld den Typ var besitzt\nprintln(\"ist c1 an?: ${c1.istAn}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 9,
      "ch": 33
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.3"
   },
   "artifact_name": "c.4",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "literal": "class Flasche (val farbe: String, var füllung: Int)\nval f1 = Flasche (\"Grau\", 20)\nprintln(\"Die Flasche mit der Farbe ${f1.farbe} ist zu ${f1.füllung}% gefüllt.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 78
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.4"
   },
   "artifact_name": "c.5",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "literal": "class Bett (\n    laenge: Int, breite: Int, belegt: Boolean //Übergabeparameter bei Objekterzeugung. Können im init-Block verwendet werden.\n){\n    val laenge: Int\n    val breite: Int\n    var belegt: Boolean\n    \n    init { //primärer Konstruktor mit init-Block. In diesem kann auf die Parameter zugegriffen werden.\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = if (breite > 0) breite else 0\n        this.belegt = belegt\n    }\n}\nval b1 = Bett (160, 200, false)\nval b2 = Bett (-100, 50, true)\nprintln(\"Bett b1: Länge ${b1.laenge}, Breite ${b1.breite}, belegt ${b1.belegt}\")\nprintln(\"Bett b2: Länge ${b2.laenge}, Breite ${b2.breite}, belegt ${b2.belegt}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 16,
      "ch": 79
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.5"
   },
   "artifact_name": "c.6",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "literal": "class Tisch (\n    laenge: Int, breite: Int, farbe: String //Übergabeparameter bei Objekterzeugung. Können den Feldern direkt zugewiesen werden.\n){\n    val laenge: Int = if (laenge > 0) laenge else 0\n    val breite = if (breite > 0) breite else 0 //Kurzschreibweise ist zulässig. Dabei wird der Datentyp des Parameters übernommen\n    var farbe: String = farbe\n}\n\nval t1 = Tisch (100, 100, \"Braun\")\nval t2 = Tisch (-100, 50, \"Weiß\")\nprintln(\"Tisch t1: Länge ${t1.laenge}, Breite ${t1.breite}, Farbe ${t1.farbe}\")\nprintln(\"Tisch t2: Länge ${t2.laenge}, Breite ${t2.breite}, Farbe ${t2.farbe}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 11,
      "ch": 78
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.6"
   },
   "artifact_name": "c.7",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "literal": "class Stuhl (laenge: Int, breite: Int, var belegt: Boolean){\n    val laenge = if (laenge > 0) laenge else 0\n    val breite: Int\n    \n    init {\n        this.breite = if (breite > 0) breite else 0\n    }\n}\nval s1 = Stuhl (20, 20, true)\nval s2 = Stuhl (-20, 30, false)\nprintln(\"Stuhl s1: Länge ${s1.laenge}, Breite ${s1.breite}, belegt ${s1.belegt}\")\nprintln(\"Stuhl s2: Länge ${s2.laenge}, Breite ${s2.breite}, belegt ${s2.belegt}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 11,
      "ch": 80
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.7"
   },
   "artifact_name": "c.8",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "literal": "class Fenster { //Parameterklammern fehlen\n    val laenge: Int\n    val breite: Int\n    var zustand: String\n    \n    //Konstruktor eines normalen Fensters\n    constructor (laenge: Int, breite: Int, zustand: String){\n        println(\"Konstruktor eines normalen Fensters\")\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = if (breite > 0) breite else 0\n        this.zustand = zustand\n    }\n    //Konstruktor eines quadratischen Fensters\n    constructor (laenge: Int, zustand: String){\n        println(\"Konstruktor eines quadratischen Fensters\")\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = laenge\n        this.zustand = zustand\n    }\n    //Konstruktor eines neuen Fensters\n    constructor (laenge: Int, breite: Int){\n        println(\"Konstruktor eines neuen Fensters\")\n        this.laenge = if (laenge > 0) laenge else 0\n        this.breite = if (breite > 0) breite else 0\n        this.zustand = \"Neu\"\n    }\n}\n\nval fensterNormal = Fenster (50, -80, \"Gebraucht\")\nprintln(\"Fenster fensterNormal: Länge ${fensterNormal.laenge}, Breite ${fensterNormal.breite}, Zustand ${fensterNormal.zustand} \\n\")\nval fensterQuadrat = Fenster (60, \"Schmutzig\")\nprintln(\"Fenster fensterQuadrat: Länge ${fensterQuadrat.laenge}, Breite ${fensterQuadrat.breite}, Zustand ${fensterQuadrat.zustand} \\n\")\nval fensterNeu = Fenster (100, 120)\nprintln(\"Fenster fensterNeu: Länge ${fensterNeu.laenge}, Breite ${fensterNeu.breite}, Zustand ${fensterNeu.zustand}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 33,
      "ch": 116
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.9",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.10",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.11",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.8",
    "2": "o.9",
    "4": "o.10"
   },
   "artifact_name": "c.12",
   "versions": [
    {
     "start_checkpoint": 1619166409884,
     "parent": "n.0.2",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1619167416345,
     "parent": "n.0.3",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\")\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false, 0, \"Neu\")\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\")\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false)\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie()\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")"
    },
    {
     "start_checkpoint": 1619167430512,
     "parent": "n.0.4",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\")\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false)\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\")\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false)\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie()\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")"
    },
    {
     "start_checkpoint": 1619167519480,
     "parent": "n.0.6",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\") //Benutzt den primären Konstruktor\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false) //Benutzt den anderen sekundären Konstruktor\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\") //primärer Konstruktor\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false) //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie() //sekundärer Konstruktor: Neue BB Einmalbatterie\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")"
    },
    {
     "start_checkpoint": 1619167525913,
     "parent": "n.0.7",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\") //Benutzt den primären Konstruktor\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false) //Benutzt den anderen sekundären Konstruktor\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\") //primärer Konstruktor\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}.\")\nval neueBatterie = Batterie(3000, false) //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}.\")\nval BBBatterie = Batterie() //sekundärer Konstruktor: Neue BB Einmalbatterie\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}.\")"
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.11"
   },
   "artifact_name": "c.13",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "class Person (val name: String, var alter: Int)\n\nval p1 = Person(\"Max Mustermann\", 21)\nprintln(\"Person p1, $p1: \\nName: ${p1.name}, Alter: ${p1.alter}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 64
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.12"
   },
   "artifact_name": "c.14",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "//primärer Konstruktor: Defaultkonstruktor\nclass Batterie (val kapazitaet: Int, val wiederaufladbar: Boolean, var ladezyklen: Int, val status: String){\n    //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\n    constructor (kapazitaet: Int, wiederaufladbar: Boolean) : this(kapazitaet, wiederaufladbar, 0, \"Neu\") //Benutzt den primären Konstruktor\n    //sekundärer Konstruktor: Neue BB Einmalbatterie\n    constructor () : this(2400, false) //Benutzt den anderen sekundären Konstruktor\n}\nval eigeneBatterie = Batterie(2000, true, 42, \"Gebraucht\") //primärer Konstruktor\nprintln(\"Batterie eigeneBatterie: Kapazität ${eigeneBatterie.kapazitaet}, Wiederaufladbar ${eigeneBatterie.wiederaufladbar}, Ladezyklen ${eigeneBatterie.ladezyklen}, Status ${eigeneBatterie.status}\")\nval neueBatterie = Batterie(3000, false) //sekundärer Konstruktor: Neue Batterie mit Angabe von Kapazität und Wiederaufladbarkeit\nprintln(\"Batterie neueBatterie: Kapazität ${neueBatterie.kapazitaet}, Wiederaufladbar ${neueBatterie.wiederaufladbar}, Ladezyklen ${neueBatterie.ladezyklen}, Status ${neueBatterie.status}\")\nval BBBatterie = Batterie() //sekundärer Konstruktor: Neue BB Einmalbatterie\nprintln(\"Batterie BBBatterie: Kapazität ${BBBatterie.kapazitaet}, Wiederaufladbar ${BBBatterie.wiederaufladbar}, Ladezyklen ${BBBatterie.ladezyklen}, Status ${BBBatterie.status}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 178
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.13"
   },
   "artifact_name": "c.15",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "//TODO\n\n//Tests\nvar fehler = 0\nval test1 = Pizza(25, listOf(\"Schinken\"), false)\nif( test1.groeße != 25 || test1.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test1.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 1! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test1.groeße}, Beläge ${test1.belaege}, Geschnitten ${test1.geschnitten}\")\n}\nval test2 = Pizza(31, listOf(\"Schinken\"), false)\nif( test2.groeße != -1 || test2.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test2.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 2! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test2.groeße}, Beläge ${test2.belaege}, Geschnitten ${test2.geschnitten}\")\n}\nval test3 = Pizza(14, listOf(\"Schinken\"), false)\nif( test3.groeße != -1 || test3.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test3.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 3! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test3.groeße}, Beläge ${test3.belaege}, Geschnitten ${test3.geschnitten}\")\n}\nval test4 = Pizza(31, listOf(\"Schinken\"), false)\nif( test4.groeße != -1 || test4.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test4.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 4! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test4.groeße}, Beläge ${test4.belaege}, Geschnitten ${test4.geschnitten}\")\n}\nval test5 = Pizza(28, emptyList(), true)\nif( test5.groeße != 28 || test5.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test5.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 5! Richtig wäre: Größe 28, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test5.groeße}, Beläge ${test5.belaege}, Geschnitten ${test5.geschnitten}\")\n}\nval test6 = Pizza(15)\nif( test6.groeße != 15 || test6.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test6.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 6! Richtig wäre: Größe 15, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test6.groeße}, Beläge ${test6.belaege}, Geschnitten ${test6.geschnitten}\")\n}\nval test7 = Pizza()\nif( test7.groeße != 25 || test7.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Thunfisch\", \"Zwiebeln\", \"Peperoni\") || test7.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 7! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Thunfisch, Zwiebeln, Peperoni], Geschnitten false \\n  Ist: Größe ${test7.groeße}, Beläge ${test7.belaege}, Geschnitten ${test7.geschnitten}\")\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 42,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.14"
   },
   "artifact_name": "c.16",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "//Lösung\nclass Pizza (groeße: Int, belaege: List<String>, geschnitten: Boolean){\n    val groeße: Int\n    val belaege: MutableList<String>\n    val geschnitten: Boolean\n    \n    init {\n        this.groeße = if (15 <= groeße && groeße <= 30) groeße else -1\n        this.belaege = mutableListOf(\"Tomatensoße\", \"Mozzarella\")\n        this.belaege += belaege\n        this.geschnitten = geschnitten\n    }\n    \n    constructor (groeße: Int) : this(groeße, emptyList(), true)\n    constructor () : this(25, listOf(\"Thunfisch\", \"Zwiebeln\", \"Peperoni\"), true)\n}\n\n//Tests\nvar fehler = 0\nval test1 = Pizza(25, listOf(\"Schinken\"), false)\nif( test1.groeße != 25 || test1.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test1.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 1! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test1.groeße}, Beläge ${test1.belaege}, Geschnitten ${test1.geschnitten}\")\n}\nval test2 = Pizza(31, listOf(\"Schinken\"), false)\nif( test2.groeße != -1 || test2.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test2.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 2! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test2.groeße}, Beläge ${test2.belaege}, Geschnitten ${test2.geschnitten}\")\n}\nval test3 = Pizza(14, listOf(\"Schinken\"), false)\nif( test3.groeße != -1 || test3.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test3.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 3! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test3.groeße}, Beläge ${test3.belaege}, Geschnitten ${test3.geschnitten}\")\n}\nval test4 = Pizza(31, listOf(\"Schinken\"), false)\nif( test4.groeße != -1 || test4.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Schinken\") || test4.geschnitten != false ){\n    fehler++\n    println(\"Fehler bei Test 4! Richtig wäre: Größe -1, Beläge [Tomatensoße, Mozzarella, Schinken], Geschnitten false \\n  Ist: Größe ${test4.groeße}, Beläge ${test4.belaege}, Geschnitten ${test4.geschnitten}\")\n}\nval test5 = Pizza(28, emptyList(), true)\nif( test5.groeße != 28 || test5.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test5.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 5! Richtig wäre: Größe 28, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test5.groeße}, Beläge ${test5.belaege}, Geschnitten ${test5.geschnitten}\")\n}\nval test6 = Pizza(15)\nif( test6.groeße != 15 || test6.belaege != listOf(\"Tomatensoße\", \"Mozzarella\") || test6.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 6! Richtig wäre: Größe 15, Beläge [Tomatensoße, Mozzarella], Geschnitten true \\n  Ist: Größe ${test6.groeße}, Beläge ${test6.belaege}, Geschnitten ${test6.geschnitten}\")\n}\nval test7 = Pizza()\nif( test7.groeße != 25 || test7.belaege != listOf(\"Tomatensoße\", \"Mozzarella\", \"Thunfisch\", \"Zwiebeln\", \"Peperoni\") || test7.geschnitten != true ){\n    fehler++\n    println(\"Fehler bei Test 7! Richtig wäre: Größe 25, Beläge [Tomatensoße, Mozzarella, Thunfisch, Zwiebeln, Peperoni], Geschnitten false \\n  Ist: Größe ${test7.groeße}, Beläge ${test7.belaege}, Geschnitten ${test7.geschnitten}\")\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 57,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.15"
   },
   "artifact_name": "c.17",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "public class Person (name: String, alter: Int){\n    val name: String = name\n        get() = \"Name: $field\" //Wird auf das Feld name zugegeriffen, wird der String \"Name: name\" zurückgegeben\n        //Kein Setter möglich, da val\n    var alter = if (alter > 0) alter else -1\n        get() = field //Standardgetter\n        set(value){ //Eigener Setter. Der neue Wert wird in value gespeichert\n            field = if (value > field) value else field //Das Feld wird auf den neuen Wert gesetzt, falls dieser größer als der Aktuelle ist.\n        }\n}\nval p1 = Person (\"Max Mustermann\", -10)\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}\")\np1.alter = 21\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}\")\np1.alter = -10\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 15,
      "ch": 50
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.16"
   },
   "artifact_name": "c.18",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "public class Person (name: String, alter: Int){\n    val name: String = name\n        get() = \"Name: $field\" //Wird auf das Feld name zugegeriffen, wird der String \"Name: name\" zurückgegeben\n        //Kein Setter möglich, da val\n    var alter = if (alter > 0) alter else -1\n        get() = field //Standardgetter\n        set(value){ //Eigener Setter. Der neue Wert wird in value gespeichert\n            field = if (value > field) value else field //Das Feld wird auf den neuen Wert gesetzt, falls dieser größer als der Aktuelle ist.\n        }\n    val istVolljaerig //Datentyp Boolean aus dem Getter\n        get() = alter > 17\n}\nval p1 = Person (\"Max Mustermann\", 21)\nprintln(\"Person p1: ${p1.name}, Alter ${p1.alter}, Volljährig ${p1.istVolljaerig}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 13,
      "ch": 82
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.17"
   },
   "artifact_name": "c.19",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "public class Person (name: String, alter: Int){\n    val name = name\n    var alter = alter\n    val istVolljaehrig: Boolean by lazy {\n        println(\"Wird berechnet...\")\n        alter > 18\n    }\n}\nval p1 = Person(\"Erika Musterfrau\", 32)\nprintln(p1.istVolljaehrig)\nprintln(p1.istVolljaehrig)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 10,
      "ch": 25
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.18"
   },
   "artifact_name": "c.20",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "public class Person (name: String, alter: Int){\n    val name = name\n    var alter = alter\n    lateinit var istVolljaehrig: String\n    \n    fun berechneIstVolljaehrig(){\n        istVolljaehrig = if (alter > 17) \"Volljährig\" else \"Nicht Volljährig\"\n    }\n}\nval p1 = Person (\"Max Mustermann\", 30)\n//println(p1.istVolljaehrig) //Error: UninitializedPropertyAccessException: lateinit property istVolljaehrig has not been initialized\np1.berechneIstVolljaehrig() //istVolljaehrig wird berechnet\nprintln(p1.istVolljaehrig)",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 12,
      "ch": 25
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.19"
   },
   "artifact_name": "c.21",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "public class Person (name: String, alter: Int){\n    val name = name\n    var alter = alter\n    lateinit var istVolljaehrig: String\n    \n    fun berechneIstVolljaehrig(){\n        istVolljaehrig = if (alter > 17) \"Volljährig\" else \"Nicht Volljährig\"\n    }\n    fun istInitialisiert() = this::istVolljaehrig.isInitialized\n}\n\nval p1 = Person (\"Max Mustermann\", 30)\nprintln(p1.istInitialisiert())\np1.berechneIstVolljaehrig() //istVolljaehrig wird berechnet\nprintln(p1.istInitialisiert())",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 14,
      "ch": 29
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.20"
   },
   "artifact_name": "c.22",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "class Person(val name: String, var alter: Int){\n    fun hatGeburtstag() = alter++ //Objektmethode\n    override fun toString() = \"$name ist $alter Jahre alt.\" //Objektmethode die die Methode toString() überschreibt\n}\n\nval p1 = Person(\"Max Mustermann\", 30)\nprintln(\"Vor Geburtstag: $p1\")\np1.hatGeburtstag()\nprintln(\"Nach Geburtstag: $p1\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 8,
      "ch": 30
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.21"
   },
   "artifact_name": "c.23",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "data class Punkt(val x: Int, val y: Int, val z: Int)\nval p1 = Punkt (0,0,0)\nprintln(\"Punkt p1: $p1\") //Verwendung der automatisch generierten toString()-Methode\nval p2 = Punkt (1,1,1)\nif (p1 == p2) //Verwendung der automatisch generierten equals()-Methode\n    println(\"p1 und p2 sind gleich.\")\nelse\n    println(\"p1 und p2 sind ungleich.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 38
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.22"
   },
   "artifact_name": "c.24",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "val p1 = Punkt (0,1,2)\nprintln(\"p1.component1(): ${p1.component1()}\")\nval (x, y, z) = p1\nprintln(\"x: $x, y: $y, z: $z\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 3,
      "ch": 29
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.23"
   },
   "artifact_name": "c.25",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "val p1 = Punkt (0,1,2)\nval p2 = p1.copy()\nprintln(\"p1: $p1\")\nprintln(\"p2: $p2\")\nval p3 = p1.copy(x=4)\nprintln(\"p3: $p3\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 5,
      "ch": 17
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.24"
   },
   "artifact_name": "c.26",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "data class Punkt (val x: Int, val y: Int, val z: Int){\n    val istUrsprung = x == 0 && y == 0 && z == 0\n}\nval p1 = Punkt (0,0,0)\nprintln(\"Punkt p1 ist im Ursprung: ${p1.istUrsprung}, $p1\")\nval p2 = Punkt (1,1,1)\nprintln(\"Punkt p2 ist im Ursprung: ${p2.istUrsprung}, $p2\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 6,
      "ch": 58
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.25"
   },
   "artifact_name": "c.27",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "private val satz = object {\n    val subjekt = \"Kotlin\"\n    val praedikat = \"ist\"\n    val objekt = \"Programmiersprache\"\n    val vollstaendig = \"Kotlin ist eine Programmiersprache\"\n}\n\nprintln(\"Das Subjekt des Satzes ${satz.vollstaendig} ist ${satz.subjekt} \")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 74
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.26"
   },
   "artifact_name": "c.28",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "object Rechner {\n    val zahl: Int\n    init {\n        println(\"Singleton Rechner wurde erzeugt.\")\n        zahl = (0..10).random()\n    }\n    \n    fun addieren(a: Int, b: Int) = a + b\n}\n\nval a = 5\nval b = 10\nprintln(\"Berechnung ohne Singleton: ${a+b}\")\nprintln(\"Berechnung mit Singleton: ${Rechner.addieren(a,b)}\")\nprintln(\"Zufallszahl des Singletons: ${Rechner.zahl}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 14,
      "ch": 53
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.27"
   },
   "artifact_name": "c.29",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "class Student(val name: String, var alter: Int){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    \n    var matrikelnummer: Int\n    \n    init {\n        matrikelnummer = zaehler\n    }\n}\n\nval s1 = Student (\"Max\", 21)\nval s2 = Student (\"Anna\", 25)\nval s3 = Student (\"Simon\", 26)\nval s4 = Student (\"Sophie\", 19)\nprintln(\"Die Marikelnummer von ${s1.name} ist ${s1.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s2.name} ist ${s2.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s3.name} ist ${s3.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s4.name} ist ${s4.matrikelnummer}.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 20,
      "ch": 68
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.28"
   },
   "artifact_name": "c.30",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "literal": "import java.time.LocalTime\n\nclass Zahlen(){\n    companion object {\n        var nummer = 1\n            get() = field\n    }\n    object Zwei {\n        var nummer = 2\n    }\n    object Drei {\n        var nummer = 3\n    }\n    object Zeit {\n        fun gibZeit() = LocalTime.now()\n    }\n}\n\nprintln(\"Die Nummer des Standard Companion Objects ist ${Zahlen.nummer}.\")\nprintln(\"Die Nummer des Companion Objects Zwei ist ${Zahlen.Zwei.nummer}.\")\nprintln(\"Die Nummer des Companion Objects Drei ist ${Zahlen.Drei.nummer}.\")\nprintln(\"Es ist aktuell ${Zahlen.Zeit.gibZeit()} Uhr.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 21,
      "ch": 54
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.31",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.29"
   },
   "artifact_name": "c.32",
   "versions": [
    {
     "start_checkpoint": 1619273440670,
     "parent": "n.0.9",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1619273462931,
     "parent": "n.0.10",
     "literal": "var zaehler = 0\n\nclass Student(val name: String, var alter: Int){\n    \n    var matrikelnummer: Int\n    \n    init {\n        matrikelnummer = zaehler++\n    }\n}\n\nval s1 = Student (\"Max\", 21)\nval s2 = Student (\"Anna\", 25)\nval s3 = Student (\"Simon\", 26)\nval s4 = Student (\"Sophie\", 19)\nprintln(\"Die Marikelnummer von ${s1.name} ist ${s1.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s2.name} ist ${s2.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s3.name} ist ${s3.matrikelnummer}.\")\nprintln(\"Die Marikelnummer von ${s4.name} ist ${s4.matrikelnummer}.\")"
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.30"
   },
   "artifact_name": "c.33",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "literal": "//TODO\n\n//Test\nvar fehler = 0\nval p1 = Parkplatzverwaltung(mutableListOf(true, true, false, false, true))\nif (p1.toString() != \"xx--x\"){\n    println(\"Fehler! p1 sollte eigentlich 'xx--x' sein, ist jedoch '$p1'\")\n    fehler++\n}\nif (!p1.einparken(3)){\n    println(\"Fehler! Parkplatz Nummer 3 sollte eigentlich belegt werden können. Parkplatz: $p1\")\n    fehler++\n}\nif (p1.einparken(3)){\n    println(\"Fehler! Parkplatz Nummer 3 sollte eigentlich nicht belegt werden können. Parkplatz: $p1\")\n    fehler++\n}\nif (p1.toString() != \"xx-xx\"){\n    println(\"Fehler! p1 sollte eigentlich 'xx--x' sein, ist jedoch '$p1'\")\n    fehler++\n}\nval p2 = Parkplatzverwaltung()\nif (p2.toString() != \"-----\"){\n    println(\"Fehler! p2 sollte eigentlich '-----' sein, ist jedoch '$p2'\")\n    fehler++\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 29,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.31"
   },
   "artifact_name": "c.34",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "literal": "//Lösung\nclass Parkplatzverwaltung(parkplatz: MutableList<Boolean>){\n    private val parkplatz: MutableList<Boolean> = parkplatz\n    \n    constructor() : this(MutableList<Boolean>(5) { false })\n    \n    fun einparken(nummer: Int): Boolean {\n        return if (!parkplatz[nummer]) {\n            parkplatz[nummer] = true\n            true\n        }\n        else {\n            false\n        }\n    } \n\n    override fun toString(): String {\n        var res = \"\"\n        parkplatz.forEach {\n            res += if (it) \"x\" else \"-\"\n        }\n        return res\n    }\n}\n\n//Test\nvar fehler = 0\nval p1 = Parkplatzverwaltung(mutableListOf(true, true, false, false, true))\nif (p1.toString() != \"xx--x\"){\n    println(\"Fehler! p1 sollte eigentlich 'xx--x' sein, ist jedoch '$p1'\")\n    fehler++\n}\nif (!p1.einparken(3)){\n    println(\"Fehler! Parkplatz Nummer 3 sollte eigentlich belegt werden können. Parkplatz: $p1\")\n    fehler++\n}\nif (p1.einparken(3)){\n    println(\"Fehler! Parkplatz Nummer 3 sollte eigentlich nicht belegt werden können. Parkplatz: $p1\")\n    fehler++\n}\nif (p1.toString() != \"xx-xx\"){\n    println(\"Fehler! p1 sollte eigentlich 'xx--x' sein, ist jedoch '$p1'\")\n    fehler++\n}\nval p2 = Parkplatzverwaltung()\nif (p2.toString() != \"-----\"){\n    println(\"Fehler! p2 sollte eigentlich '-----' sein, ist jedoch '$p2'\")\n    fehler++\n}\nif(fehler == 0)\n    println(\"Super! Alle Tests bestanden!\")\nelse\n    println(\"Bei $fehler Tests kamen Fehler auf.\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 52,
      "ch": 49
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.32"
   },
   "artifact_name": "c.35",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "literal": "enum class Wochentag {\n    MONTAG, DIENSTAG, MITTWOCH, DONNERSTAG, FREITAG, SAMSTAG, SONNTAG\n}\n\nclass Tag (val name : Wochentag)\n\nval montag = Tag(Wochentag.MONTAG)\nprintln(\"Der Name von montag ist ${montag.name}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 48
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.33"
   },
   "artifact_name": "c.36",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "literal": "print(\"Alle Einträge des Enums: \")\nWochentag.values().forEach { \n    print(\"$it, \")\n}\n\nprintln()\nprintln(\"Vollständiger Name von FREITAG: ${Wochentag.valueOf(\"FREITAG\")}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 6,
      "ch": 73
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.34"
   },
   "artifact_name": "c.37",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "literal": "enum class Wochentag (val nummer: Int){\n    MONTAG(1), DIENSTAG(2), MITTWOCH(3), DONNERSTAG(4), FREITAG(5), SAMSTAG(6), SONNTAG(7);\n    \n    val zufallszahl = (0..10).random()\n    \n    fun istWochenende() = if (this == SAMSTAG || this == SONNTAG) true else false\n}\n\nval montag = Wochentag.MONTAG\nprintln(\"Montag ist ein Tag des Wochenendes: ${montag.istWochenende()}, Nummer des Tags: ${montag.nummer}, Zufallszahl: ${montag.zufallszahl}\")\nval samstag = Wochentag.SAMSTAG\nprintln(\"Samstag ist ein Tag des Wochenendes: ${samstag.istWochenende()}, Nummer des Tags: ${samstag.nummer}, Zufallszahl: ${montag.zufallszahl}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 11,
      "ch": 145
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.38",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.11",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.39",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.11",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "5": "o.35",
    "6": "o.36",
    "7": "o.37",
    "8": "o.38",
    "9": "o.39"
   },
   "artifact_name": "c.40",
   "versions": [
    {
     "start_checkpoint": 1619344680409,
     "parent": "n.0.12",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1619344804639,
     "parent": "n.0.13",
     "literal": "open class Person(val name: String, var alter: Int)\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n}"
    },
    {
     "start_checkpoint": 1619344843467,
     "parent": "n.0.14",
     "literal": "open class Person(val name: String, var alter: Int){\n    fun wasBinIch() = println(\"Ich bin eine Person\")\n}\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n}"
    },
    {
     "start_checkpoint": 1619344920701,
     "parent": "n.0.15",
     "literal": "open class Person(val name: String, var alter: Int)\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n}"
    },
    {
     "start_checkpoint": 1619344948011,
     "parent": "n.0.16",
     "literal": "open class Person(val name: String, var alter: Int)\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n}\n\nval p1 = Person (\"Max Mustermann\", 25)\nval s1 = Student (\"Erika Mustermann\", 21)"
    },
    {
     "start_checkpoint": 1619344965296,
     "parent": "n.0.17",
     "literal": "open class Person(val name: String, var alter: Int)\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n}\n\nval p1 = Person (\"Max Mustermann\", 25)\nval s1 = Student (\"Erika Mustermann\", 21)\nprintln(\"p1: $p1\")\nprintln(\"s1: $s1\")"
    },
    {
     "start_checkpoint": 1619344997121,
     "parent": "n.0.18",
     "literal": "open class Person(val name: String, var alter: Int)\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n}\n\nval p1 = Person (\"Max Mustermann\", 25)\nval s1 = Student (\"Erika Mustermann\", 21)\nprintln(\"p1: ${p1.toString()}\")\nprintln(\"s1: $s1\")"
    },
    {
     "start_checkpoint": 1619345039116,
     "parent": "n.0.19",
     "literal": "open class Person(val name: String, var alter: Int){\n    override fun toString() = \"Ich bin $name und bin $alter Jahre alt.\"\n}\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n}\n\nval p1 = Person (\"Max Mustermann\", 25)\nval s1 = Student (\"Erika Mustermann\", 21)\nprintln(\"p1: $p1\")\nprintln(\"s1: $s1\")"
    },
    {
     "start_checkpoint": 1619345077293,
     "parent": "n.0.20",
     "literal": "open class Person(val name: String, var alter: Int){\n    override fun toString() = \"Ich bin $name und bin $alter Jahre alt.\"\n}\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n    \n    override fun toString() = \"Ich bin $name, bin $alter Jahre alt und besitze die Matrikelnummer §matrikelnummer.\"\n}\n\nval p1 = Person (\"Max Mustermann\", 25)\nval s1 = Student (\"Erika Mustermann\", 21)\nprintln(\"p1: $p1\")\nprintln(\"s1: $s1\")"
    },
    {
     "start_checkpoint": 1619345085096,
     "parent": "n.0.22",
     "literal": "open class Person(val name: String, var alter: Int){\n    override fun toString() = \"Ich bin $name und bin $alter Jahre alt.\"\n}\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n    \n    override fun toString() = \"Ich bin $name, bin $alter Jahre alt und besitze die Matrikelnummer $matrikelnummer.\"\n}\n\nval p1 = Person (\"Max Mustermann\", 25)\nval s1 = Student (\"Erika Mustermann\", 21)\nprintln(\"p1: $p1\")\nprintln(\"s1: $s1\")"
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.41",
   "versions": [
    {
     "start_checkpoint": 1619345085096,
     "parent": "n.0.21",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.42",
   "versions": [
    {
     "start_checkpoint": 1619345085096,
     "parent": "n.0.21",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.43",
   "versions": [
    {
     "start_checkpoint": 1619345085096,
     "parent": "n.0.21",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.44",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.40"
   },
   "artifact_name": "c.45",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "open class Person(val name: String, var alter: Int){\n    open val schlachtruf\n        get() = \"Für die Horde!\"\n    \n    open fun hatGeburtstag() {\n        println(\"$name hat Geburtstag. Alles Gute!\")\n        alter++\n    } \n    override fun toString() = \"Ich bin $name und bin $alter Jahre alt. $schlachtruf\"\n}\n\nclass Student(name: String, alter: Int) : Person (name, alter){\n    companion object {\n        var zaehler = 0\n            get() = field++\n    }\n    val matrikelnummer = zaehler\n    \n    override val schlachtruf\n        get() = \"Für die Allianz!\"\n    \n    override fun hatGeburtstag() {\n        println(\"$name hat Geburtstag. Alles Gute!\")\n        alter--\n    } \n    \n    override fun toString() = \"Ich bin $name, bin $alter Jahre alt und habe die Matrikelnummer $matrikelnummer. $schlachtruf Oder vielleicht doch: ${super.schlachtruf}?\"\n}\n\nval p1 = Person (\"Max Mustermann\", 25)\nval s1 = Student (\"Erika Mustermann\", 21)\nprintln(\"p1: $p1\")\np1.hatGeburtstag()\nprintln(\"p1: $p1\")\nprintln(\"s1: $s1\")\ns1.hatGeburtstag()\nprintln(\"s1: $s1\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 36,
      "ch": 17
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.41"
   },
   "artifact_name": "c.46",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "open class Punkt2D (val x: Int, val y: Int){\n    override fun toString() = \"x: $x, y: $y\"\n}\n\nclass Punkt3D : Punkt2D{\n    val z: Int\n    \n    //sekundäre Konstruktoren\n    constructor (x: Int, y: Int, z: Int) : super (x, y) {\n        this.z = z\n    }\n    constructor () : super (0, 0) {\n        this.z = 0\n    }\n    \n    override fun toString() = \"${super.toString()}, z: $z\"\n}\n\nval p1 = Punkt3D (4, 2, 8)\nprintln(\"Punkt p1: $p1\")\nval p2 = Punkt3D()\nprintln(\"Punkt p2: $p2\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 21,
      "ch": 23
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.42"
   },
   "artifact_name": "c.47",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "abstract class Computer (val kerne: Int, val farbe: String){\n    var istAn = false\n    abstract fun einschalten()\n}\n\nclass Laptop (kerne: Int, farbe: String, val hatTouchscreen: Boolean) : Computer(kerne, farbe){\n    var istAufgeklappt = false\n    override fun einschalten() {\n        if (!istAufgeklappt) \n            istAufgeklappt = true\n        istAn = true\n        println(\"Laptop wurde eingeschalten.\")\n    }\n}\n\nclass Standcomputer (kerne: Int, farbe: String) : Computer(kerne, farbe){\n    override fun einschalten() {\n        istAn = true\n        println(\"Standcomputer wurde eingeschalten.\")\n    }\n}\n\n//val c1 = Computer (8, \"Schwarz\") -> Error: Cannot create an instance of an abstract class\nval l1 = Laptop(6, \"Rot\", false)\nl1.einschalten()\nval s1 = Standcomputer(12, \"Weiß\")\ns1.einschalten()",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 26,
      "ch": 15
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.43"
   },
   "artifact_name": "c.48",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "//Kotlin Fehelr??\n\nsealed class Fehler\ndata class Laufzeitfehler(val f: Int) : Fehler()\ndata class Kompilierfehler() : Fehler()\ndata class Referenzfehler() : Fehler()\n\nval f1 = Kompilierfehler()\n\nwhen (f1){\n    is Laufzeitfehler -> println(\"Es ist ein Laufzeitfehler aufgetreten.\")\n    is Kompilierfehler -> println(\"Es ist ein Kompilierfehler aufgetreten.\")\n    is Referenzfehler -> println(\"Es ist ein Referenzfehler aufgetreten.\")\n}",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 13,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.44"
   },
   "artifact_name": "c.49",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "interface Addition {\n    val dieZahl: Int\n    \n    fun add2(a: Int, b: Int): Int\n    fun add3(a: Int, b: Int, c: Int) = a + b + c\n}\n\nclass Rechner : Addition {\n    override val dieZahl = 42\n    override fun add2(a: Int, b: Int) = a + b\n}\n\nval rechner = Rechner()\nprintln(\"rechner.dieZahl: ${rechner.dieZahl}\")\nprintln(\"rechner.add2(5,3): ${rechner.add2(5,3)}\")\nprintln(\"rechner.add3(5,9,3): ${rechner.add3(5,9,3)}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 15,
      "ch": 53
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.45"
   },
   "artifact_name": "c.50",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "data class Speicher<T> (var platz1: T, var platz2: T, var platz3: T)\n\nval s1 = Speicher(1,2,3)\nval s2 = Speicher(listOf(1,2,3),listOf(1,2,3),listOf(1,2,3))\nval s3 = Speicher(\"Kotlin\",\"Java\",\"C\")\nprintln(\"s1: $s1\")\nprintln(\"s2: $s2\")\nprintln(\"s3: $s3\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 17
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.46"
   },
   "artifact_name": "c.51",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "class Gleichheitstest<T: Comparable<T>>{\n    fun istGleich(a: T, b: T) = if(a.compareTo(b) == 0) true else false\n}\nval gleichheitstestInt = Gleichheitstest<Int>()\nprintln(\"gleichheitstestInt.istGleich(3,3): ${gleichheitstestInt.istGleich(3,3)}\")\nprintln(\"gleichheitstestInt.istGleich(10,3): ${gleichheitstestInt.istGleich(10,3)}\")\nval gleichheitstestString = Gleichheitstest<String>()\nprintln(\"gleichheitstestString.istGleich('Kotlin','Kotlin'): ${gleichheitstestString.istGleich(\"Kotlin\",\"Kotlin\")}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 7,
      "ch": 115
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.47"
   },
   "artifact_name": "c.52",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "fun <T: Comparable<T>> istGleich(a: T, b: T) = if(a.compareTo(b) == 0) true else false\nprintln(\"istGleich(3,3): ${istGleich(3,3)}\")\nprintln(\"istGleich('Kotlin','Kotlin'): ${istGleich(\"Kotlin\",\"Kotlin\")}\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 2,
      "ch": 71
     }
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.48"
   },
   "artifact_name": "c.53",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "literal": "fun <T: Comparable<T>> MutableList<T>.entferneMinimum(): T?{\n    val min = minOrNull()\n    return if (min != null){\n        remove(min)\n        min\n    }\n    else {\n        null\n    }\n}\n\nval liste = mutableListOf(3,6,1,8,10)\nprintln(\"Entferntes Element: ${liste.entferneMinimum()}\")\nprintln(\"liste: $liste\")",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 13,
      "ch": 23
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.54",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  }
 ],
 "markdownCells": [
  {
   "artifact_name": "m.0",
   "versions": [
    {
     "start_checkpoint": 1619004012983,
     "parent": "n.0.0",
     "markdown": "# Abschnitt 3\nThema dieses Abschnittes wird die objektorientierte Programmierung sein.\n\n## Lektion 1 - Einführung\nAufgrund der Kompatibilität mit Java ist Kotlin eine objektorientierte Sprache. Dabei werden alle Daten als Objekte behandelt. Es sind alle bekannten objektorientierte Konzepte vorhanden, jedoch angepasst und teilweise auch vereinfacht. Dazu ein Beispiel. Es soll eine Klasse `Person` implementiert werden, die zwei Felder besitzt, `name` vom Typ `String`, das nur bei Objekterzeugung gesetzt wird, und `alter` vom Typ `Int`, das immer verändert werden kann.\n\n\n<table style=\"font-size:16px\">\n<thead>\n  <tr>\n    <th>Kotlin</th>\n    <th>Java</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>class Person (val name: String, var alter: Int)</code></td>\n    <td><code>public class Person{<br>&nbsp;&nbsp;&nbsp;&nbsp;private String name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Person(String name, int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibName(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibAlter(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String setzeAlter(int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></td>\n  </tr>\n</tbody>\n</table>\n\nEs ist zu erkennen, dass der Kotlincode deutlich kürzer und auch übersichtlicher ist. Jedoch wird er Ihnen aktuell wenig aussagen. In den folgenden Lektionen wird das Beispiel Schritt für Schritt erklärt.\n\n## Lektion 2 - Felder"
    }
   ]
  },
  {
   "artifact_name": "m.1",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.11",
     "markdown": "# Abschnitt 3\nThema dieses Abschnittes wird die objektorientierte Programmierung sein.\n\n## Lektion 1 - Klassen\nAufgrund der Kompatibilität mit Java ist auch Kotlin eine objektorientierte Sprache. Deswegen werden im Hintergrund alle Daten als Objekte behandelt. In Kotlin sind alle bekannten objektorientierte Konzepte vorhanden, jedoch angepasst und teilweise auch vereinfacht. Dazu ein Einführungsbeispiel. Es soll eine Klasse `Person` implementiert werden, die zwei Felder besitzt: `name` vom Typ `String`, das nur bei Objekterzeugung gesetzt wird, und `alter` vom Typ `Int`, das immer verändert werden kann.\n\n\n<table style=\"font-size:16px\">\n<thead>\n  <tr>\n    <th>Kotlin</th>\n    <th>Java</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>class Person (val name: String, var alter: Int)</code></td>\n    <td><code>public class Person{<br>&nbsp;&nbsp;&nbsp;&nbsp;private String name;<br>&nbsp;&nbsp;&nbsp;&nbsp;private int alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Person(String name, int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibName(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibAlter(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String setzeAlter(int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></td>\n  </tr>\n</tbody>\n</table>"
    }
   ]
  },
  {
   "artifact_name": "m.2",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "markdown": "Es ist zu erkennen, dass der Kotlincode deutlich kürzer und übersichtlicher ist. Warum er so aussieht wird in den folgenden Lektionen genauer besprochen.\n\n### Felder\nFelder können Klassen einfach Hinzugefügt werden. Die erste Möglichkeit ist durch die Übergabeparameter der Klasse. Diese entsprechen den Parametern des Konstruktors und sind im Kopf der Klasse angesiedelt. Wird diesen bei öffentlicher Sichtbarkeit eine Variablenart (`val` oder `var`) zugewiesen, werden die Parameter zu Feldern umgewandelt. Das heißt es wird im Hintergrund ein Feld mit dem Namen des Parameters angelegt, welches bei Objekterzeugung mit dem Wert des Übergabeparameters gefüllt wird. Außerdem wird immer ein unsichtbarer Standard-Getter erzeugt. Wird dem Parameter `var` zugeordnet, wird zusätzlich ein rudimentärer Setter der Klasse hinzugefügt."
    }
   ]
  },
  {
   "artifact_name": "m.3",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "markdown": "Eine weitere Möglichkeit Felder zu definieren ist klassisch zu Beginn im Rumpf der Klasse. Diese werden jedoch nicht automatisch bei Objekterzeugung, sondern mit dem angegebenen Standardwert gefüllt. Diesen wird auch je nach Typ im Hintergrund ein Getter und Setter bei Seite gestellt."
    }
   ]
  },
  {
   "artifact_name": "m.4",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "markdown": "### Konstruktor\nMit dem Konstruktor können die Felder mit Werten bestückt werden. Aufgrund des Konstruktorwirrars in Java, unterscheidet Kotlin zwischen 2 verschiedenenen Arten:\n* primärer Konstruktor: Dieser Konstruktor muss mindestens ein Mal in jeder Klasse enthalten sein. Falls er nicht explizit definiert wird, wird ein automatisch generierter Konstruktor implizit hinzugefügt.\n* sekundärer Konstruktor: Eine Anweisung, die auf den primären Konstruktor verweist und eine alternative Handhabung des primären Konstruktors ermöglicht.\n#### Primärer Konstruktor\nDer primäre Konstruktor besitzt drei verschiedene Erscheinungsformen:\n<ul>\n    <li>Defaultkonstruktor</li>\n    <li>Konstruktor mit <code>init</code>-Block</li>\n    <li>Konstruktor durch direkte Zuweisung</li>\n</ul>\n\nIm folgenden wird auf alle Arten Bezug genommen und im Anschluss ein Vergleich angestellt.\n##### Defaultkonstruktor\nDen Defaultkonstruktor wurde bereits bei den [Feldern](#Felder) kennengelernt. Dieser wird vom Compiler für alle Parameter, die einem Variablentyp zugewiesen sind, generiert.  "
    }
   ]
  },
  {
   "artifact_name": "m.5",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "markdown": "##### Konstruktor mit `init`-Block\nNatürlich kann der Konstruktor auch selbst, wie in Java gewohnt, definiert werden. Dieser ist zwischen der Deklaration der Felder und den Objektmethoden anzusiedeln. Eingeleitet wird er mit dem Schlüsselwort `init` gefolgt von einem Methodenrumpf. Anders als von Java gewöhnt werden dessen Parameter nicht direkt im Kopf des Konstruktors angegeben, sondern im Kopf der Klasse. Die dort definierten Parameter können im Konstruktor benutzt werden. Bei Namenskonflikten findet wieder das Schlüsselwort `this` Anwendung, das das aktuelle Objekt referenziert."
    }
   ]
  },
  {
   "artifact_name": "m.6",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "markdown": "##### Konstruktor durch direkte Initialisierung\nEine weitere Möglichkeit der Initialisierung ist die Felder direkt bei der Deklaration den Parametern oder festgelegten Werten zuzuweisen."
    }
   ]
  },
  {
   "artifact_name": "m.7",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "markdown": "##### Vergleich\nJede Erscheinungsform des Konstruktors hat seine Vorteile und Anwendungsbereiche. Während der Defaultkonstruktor bei einfachen Klassen, bei denen nicht mit den Übergabedaten vor der Zuweisung gearbeitet werden, zu bevorzugen ist, bieten die expliziten Konstruktoren genau das. Auf dem ersten Blick scheint es so, als benötige man den Konstruktor mit einem `init`-Block nicht, da die Parameter scheinbar mit dem gleichen Ergebnis direkt zugewiesen werden können. Jedoch ist dieser bei komplexeren Klassen zu bevorzugen, da dort alle Daten erst auf Richtigkeit geprüft werden und so beispielweise auch mit `try` und `catch` gearbeitet werden kann (näheres dazu in [Lektion X](Lektion-X---Fehlerbehandlung)).\n\n##### Kombination\nDie verschiedenen Konstruktoren können auch beliebig miteinander kombiniert werden. "
    }
   ]
  },
  {
   "artifact_name": "m.8",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.22",
     "markdown": "##### Mehrere primäre Konstruktoren\nEine wichtige Eigenschaft einer Klasse fehlt aber noch: Die Erzeugung eines Objekts mit unterschiedlichen Parameterprofilen. Dazu können in der Klasse mehrere primäre Konstruktoren implementiert werden. Diesen wird das Schlüsselwort `constructor` vorangestellt. Außerdem bekommt jeder Konstruktor sein eigenes Parameterprofil, mit dem dieser dann in dessen Rumpf arbeiten kann. Die Konstruktoren ähnelm dabei dem `init`-Verfahren, da sie alle ihren eigenen Rumpf besitzen. Die Parameterklammern der Klasse werden weggelassen."
    }
   ]
  },
  {
   "artifact_name": "m.9",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.1",
     "markdown": "#### Sekundärer Konstruktor"
    },
    {
     "start_checkpoint": 1619167525913,
     "parent": "n.0.22",
     "markdown": "#### Sekundärer Konstruktor\nMit Hilfe eines sekundären Konstruktors ist es einfach möglich alternative Objekterzeugungen zu implementierten. Dazu wird ein primärer Konstruktor mit `this()` mit zu bestimmenden Parametern aufgerufen. Auch kann ein anderer sekündärer Konstruktor aufgerufen, jedoch muss am Ende ein Primärer benutzt werden, da nur dieser das Objekt erzeugen kann. Die Implementierung eines sekundären Konstruktors ähnelt der bei Benutzung mehrerer primärer Konstruktoren. Jedoch ist nur eine Anweisung erlaubt, die von den Parametern mit `:` getrennt wird. Diese muss einen Konstruktor aufrufen (`this()` oder `super()`)."
    }
   ]
  },
  {
   "artifact_name": "m.10",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "n.0.8",
     "markdown": "## Lektion X - Fehlerbehandlung"
    }
   ]
  },
  {
   "artifact_name": "m.11",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "### Aufgabe\nImplementieren Sie eine Klasse `Pizza`. Jede Pizza soll eine Größe `groeße` (zwischen 15 und 30 [cm], ansonsten -1) und eine Liste aus Belägen `belaege` (Standardmäßig bereits mit Tomatensoße und Käse befüllt) enthalten. Außerdem soll gespeichert werden, ob sie geschnitten `geschnitten` werden soll. Wählen Sie einen passenden primären Konstruktor, der für jedes Feld einen Übergabeparameter besitzt. Fügen Sie außerdem weitere (sekundäre) Konstruktoren hinzu, die eine Pizza Magaritha (Tomatensoße, Mozzarella) und eine 25cm Pizza al Tonno (Tomatensoße, Mozzarella, Thunfisch, Zwiebeln, Peperoni) initialisieren. Beide Pizzas sollen geschnitten werden."
    }
   ]
  },
  {
   "artifact_name": "m.12",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "### Getter und Setter\nEs können aber auch eigene Getter und Setter für jedes Feld definiert werden, falls der Variablentyp dies zulässt. Sie müssen direkt nach den Feld definiert werden. Auf der aktuelle Wert des Feldes kann mit `field` zugegriffen werden. Der Setter bekommt den neuen Wert als Parameter übergeben. Der Datentyp des Parameters muss nicht angegeben werden, da dieser durch das Feld gegeben ist, jedoch muss ihm ein Name zugewiesen werden, der im Rumpf den neuen Wert repräsentiert. Ein Wert wird dem Feld mit einer Zuweisung an `field` geändert. Es sind immer die Datentypen der Felder zu beachten."
    }
   ]
  },
  {
   "artifact_name": "m.13",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "#### Computed Properties\nDurch die Definition eigener Getter können Felder auch kleine Methoden darstellen ohne einen eigenen Wert zu speichern. So können beispielsweise berechnete Wahrheitswerte zurückgegeben werden. Diese Handhabung kann rudimentäre Methoden ersetzen. Als Beispiel wird die bereits kennengelernte Klasse `Person` mit einem berechnetem Feld `istVolljaerig` ergänzt."
    }
   ]
  },
  {
   "artifact_name": "m.14",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "#### Lazy Properties\nEine Variable oder ein Feld des Typs `val` kann mit dem Schlüsselwort `by lazy` träge gemacht werden. Das heißt, dass der Wert erst bei Verwendung berechnet wird. Dazu ist ein Lambda-Ausdruck nötig, dessen Ergebnis der Wert des Feldes oder der Variable ist. Wird die Variable danach noch einmal verwendet, wird der Wert jedoch nicht noch einmal berechnet, sondern der gespeicherte Wert wird verwendet.\n\nQuiz: Wie oft wird \"Wird berechnet...\" ausgegeben?"
    }
   ]
  },
  {
   "artifact_name": "m.15",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "#### `lateinit`\nEin weiteres ähnliches Konstrukt ist `lateinit`. Dies findet Anwendung, wenn ein Feld erst nach der Objekterzeugung einen Wert zurgewiesen bekommt. Dieses Feld kann dann im Konstruktor ignoriert werden.<br />\nVorraussetzungen:\n* Das Feld ist vom Typ `var`\n* Der Datentyp des Feldes ist nonnullable\n* Der Datentyp des Feldes ist nicht primitiv"
    }
   ]
  },
  {
   "artifact_name": "m.16",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "Einem `lateinit` Feld ist zusätzlich gespeichert, ob es bereits initialisiert wurde. Diese Information kann mit `this::name.isInitialized` abgerufen werden."
    }
   ]
  },
  {
   "artifact_name": "m.17",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "### Sichtbarkeiten\nBis jetzt wurden alle Variablen, Felder und Klassen öffentlich implementiert. Jedoch gibt es in Kotlin wie auch in Java Sichtbarkeiten, mit denen der Zugriff eingeschränkt werden kann.\n* `private`: Das Element kann nur in der Klasse verwendet werden. \n* `protected`: Erweitertung von `private`. Zusätzlich können auf die Elemente auch in Unterklassen zugegriffen werden.\n* `internal`: Erweiterung von `protected`. Das Element kann im ganzen Modul verwendet werden. Module können sich als größere Pakete vorgestellt werden.\n* `public`: Das Element kann überall benutzt werden."
    }
   ]
  },
  {
   "artifact_name": "m.18",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "### Methoden\nObjektmethoden sind mit normalen statischen Methoden zu vergleichen. Es kann die Kurzschreibweise angewendet und eine Sichtbarkeit zugewiesen werden. Auf Objektmethoden kann, wie in Java, mit der Punktnotation zugegriffen werden. Soll eine bereits generierte Methode, zum Beispiel `toString()`, überschrieben werden, muss der Methode das Schlüsselwort `override` vorangestellt werden."
    }
   ]
  },
  {
   "artifact_name": "m.19",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Aufgabe ??"
    }
   ]
  },
  {
   "artifact_name": "m.20",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "## Lektion 2 - Datenklassen\nZusätzlich zu normalen Klassen bietet Kotlin auch die Möglichkeit Klassen zu erstellen, die nur die Aufgabe der Speicherung von Daten haben. Auf den ersten Blick könnte dies auch mit normalen Klassen bewerkstelligt werden. Jedoch müssen dann alle Methoden per Hand implementiert werden. Beispielsweise `toString()`oder auch `equals()`. Um dem aus dem Weg zu gehen, gibt es Datenklassen. Für diese generiert der Kotlin-Compiler im Hintergrund folgende Methoden: `componentN()`, `copy()`, `equals()`, `hashCode()`, `toString()`. Gekennzeichnet werden Datenklassen mit dem Schlüsselwort `data class`."
    }
   ]
  },
  {
   "artifact_name": "m.21",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "Durch die Verwendung der `componentN()`-Methode kann auf mehrere Felder der Datenklasse zugeggriffen werden. Dabei bekommt jedes Feld eine eigene Nummer, beispielsweise x die Nummer 1, zugewisen. Wird `N` durch die Nummer ersetzt und auf dem Objekt aufgerufen, wird das Feld zurückgegeben. Auch können dadurch mehrere Felder abgerufen werden, indem eine Folge als Rückgabe erwartet wird."
    }
   ]
  },
  {
   "artifact_name": "m.22",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "Mit Hilfe von `copy()` kann ein neues Objekt mit den gleichen Daten erzeugt werden. Sollen bestimmte Felder aber einen anderen Wert bekommen, kann dies der Methode mit Namen des Feldes und dem gewünschten Wert übergeben werden."
    }
   ]
  },
  {
   "artifact_name": "m.23",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "Zusätzlich können auch weitere Felder in der Datenklasse hinzugefügt werden. Diese werden jedoch nicht bei den automatisch generierten Methoden berücksichtigt. Außerdem darf der primäre Konstruktor keine Parameter besitzen. Somit können die eigens erstellten Felder in der Klasse nur berechnet und nicht mit einem Parameter gefüllt werden."
    }
   ]
  },
  {
   "artifact_name": "m.24",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "### Aufgabe - TODO"
    }
   ]
  },
  {
   "artifact_name": "m.25",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "## Lektion 3 - Objekte\nEine Besonderheit von Kotlin ist, dass nicht jedes Objekt eine Klasse benötigt. Dadurch kann beispielsweise ein statisches Feld simuliert werden oder unkompliziert mehrere Daten an einem Ort zusammengefasst werden.\n### Ad-hoc Objekte\nMit sogeannten Ad-hoc Objekten können Daten ähnlich einer Map komprimiert werden. Es kann ein Objekt erzeugt werden ohne vorher eine Klasse angelegt zu haben. Dies ist mit dem Schlüsselwort `object` einzuleiten. Wie auch einer Klasse können dem Ad-hoch Objekt Felder zugewiesen werden."
    }
   ]
  },
  {
   "artifact_name": "m.26",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "### Singletons\nSingletons sind Objekte, die nur ein Mal erzeugt werden können und bis zum Ende der Ausführung bestehen. Ein solches Objekt wird mit dem Schlüsselwort `object` gekennzeichnet und kann nicht einer Variable zugewiesen werden, da es erst bei der ersten Benutzung erzeugt wird. Deswegen kann es auch nicht erzeugt werden. Dies wird automatisch beim ersten Aufruf, der in der Punktnotation mit dem Namen des Singletons erfolgt. Ein Singleton kann aus Feldern und Methoden bestehen. Ein Konstruktor kann jedoch nicht angewendet werden, da die Erzeugung ohne Übergabeparameter stattfindet."
    }
   ]
  },
  {
   "artifact_name": "m.27",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.8",
     "markdown": "### Companion Objekte\nEiner Klasse können sogenannte Companion Objekte angehängt werden. Diese sind für alle Objekte der Klasse gleich und ähneln somit statischen Variablen oder Methoden. Sie können nur in einer Klasse implementiert werden und besitzen das Schlüsselwort `companion object`. Im Hintergrund ist ein solches Konstrukt nichts weiter als ein Singleton einer Klasse das alle Objekte verwenden können. In dem Objekt können Felder und Methoden implementiert werden."
    }
   ]
  },
  {
   "artifact_name": "m.28",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "n.0.22",
     "markdown": "Falls in einer Klasse mehrere Companion Objekte gewünscht sind, ist ab dem Zweiten das Schlüsselwort `companion` wegzulassen und außerdem ein Name anzugeben. Außerhalb der Klasse kann auf das Objekt nur durch die Klasse und nicht einem Objekt der Klasse zugegriffen werden."
    }
   ]
  },
  {
   "artifact_name": "m.29",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "markdown": "### Aufgabe\nImplementieren Sie eine Klasse `Parkplatzverwaltung`, die einen Parkplatz repräsentieren soll. Der Grundriss und die Belegung soll mit Hilfe einer Liste der Länge 5 verwirklicht werden. Ist ein Parkplatz belegt, so soll an diesem Eintrag `true` stehen. Benutzen Sie passende Sichtbarkeiten. Standardmäßig wird bei Erzeugung eine passendes Liste übergeben. Falls kein Parameter übergeben wird, soll ein leerer Parkplatz erstellt werden. Implementieren Sie zusätzlich eine Methode `einparken()` die die Nummer des Parkplatzes übergeben bekommt und diesen belegt falls möglich. Bei Erfolg soll `true` zurückgegebn werden, ansonsten `false`. Gehen Sie davon aus, dass nur korrekte Parameter übergeben werden. Überschreiben Sie zusätzlich die Methode `toString()`, die den Parkplatz übersichtlich nach folgendem Muster ausgegeben soll: <br />\n<p>--x-- (Parkplatz Nummer 2 ist belegt)</p>"
    }
   ]
  },
  {
   "artifact_name": "m.30",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "markdown": "### Companion Objekte\nEiner Klasse können sogenannte Companion Objekte angehängt werden. Diese sind für alle Objekte der Klasse gleich und ähneln somit statischen Variablen oder Methoden. Sie können nur in einer Klasse implementiert werden und besitzen das Schlüsselwort `companion object`. Im Hintergrund ist ein solches Konstrukt nichts weiter als ein Singleton einer Klasse das alle Objekte verwenden können. In dem Objekt können Felder und Methoden implementiert werden.<br />\nAnstelle eines Companion Objects könnte auch eine Top-Level-Variable verwendet werden. Jedoch läge dort kein Zusammenhang zwischen den Klassen vor und die Variable könnte auch von anderen Objekten verändert werden."
    }
   ]
  },
  {
   "artifact_name": "m.31",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "markdown": "## Lektion 4 - Enumeration\nMit Hilfe einer Enumeration kann ein eigener limitierter Datentyp erstellt werden, der nur gewisse Werte annehmen kann. Der Klasse wird dann das Schlüsselwort `enum` vorrangestellt. Soll ein Wert des Enums verwendet werden, muss der Name der Enumeration zusätzlich angegeben werden."
    }
   ]
  },
  {
   "artifact_name": "m.32",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "markdown": "Auf alle möglichen Werte eines Enums kann mit `values()` zugegriffen werden. Zurückgegeben wird ein Array. Soll auf das Enum-Objekt eines Strings zugegriffen werden, kann dies mit `valueOf()` mit dem String als Parameter, bewerkstelligt werden. Wird kein passendes Element gefunden, wird eine `IllegalArgumentException` geworfen."
    }
   ]
  },
  {
   "artifact_name": "m.33",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "markdown": "Da Enums als vollständige Klassen angesehen werden, können ihnen Felder und sogar Methoden hinzugefügt werden. Sollen Felder mit einem bestimmten Wert der von dem Wert des Enums anhängt gefüllt werden, kann hinter dem Wert des Enums die Werte für den Konstruktor übergeben werden."
    }
   ]
  },
  {
   "artifact_name": "m.34",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.11",
     "markdown": "## Lektion 5 - Vererbung"
    },
    {
     "start_checkpoint": 1619345085096,
     "parent": "n.0.22",
     "markdown": "## Lektion 5 - Vererbung\nIn Kotlin kann nicht von einer beliebigen Klasse geerbt werden. Diese muss als Vorraussetzung den Vorsatz `open` besitzen. Dies signaliesiert, dass eine Vererbung stattfinden darf. Der Namen der Klasse, von der geerbt werden soll, ist mit einem `:` getrennt hinter den Parameterklammern der erbenden Klasse zu schreiben. Dem Konstruktor der super-Klasse werden die Parameter direkt im Kopf der Klasse übergeben. "
    }
   ]
  },
  {
   "artifact_name": "m.35",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.11",
     "markdown": "## Lektion 6 - Schnittstellen"
    }
   ]
  },
  {
   "artifact_name": "m.36",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.11",
     "markdown": "## Lektion 7 - Generizität"
    }
   ]
  },
  {
   "artifact_name": "m.37",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "n.0.22",
     "markdown": "## Lektion 8 - Fehlerbehandlung"
    }
   ]
  },
  {
   "artifact_name": "m.38",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "sealed class Expr\ndata class Const(val number: Double) : Expr()\ndata class Sum(val e1: Expr, val e2: Expr) : Expr()\nobject NotANumber : Expr()# Abschnitt 3\nThema dieses Abschnittes wird die objektorientierte Programmierung sein.\n\n## Lektion 1 - Klassen\nAufgrund der Kompatibilität mit Java ist auch Kotlin eine objektorientierte Sprache. Deswegen werden im Hintergrund alle Daten als Objekte behandelt. In Kotlin sind alle bekannten objektorientierte Konzepte vorhanden, jedoch angepasst und teilweise auch vereinfacht. Dazu ein Einführungsbeispiel. Es soll eine Klasse `Person` implementiert werden, die zwei Felder besitzt: `name` vom Typ `String`, das nur bei Objekterzeugung gesetzt wird, und `alter` vom Typ `Int`, das immer verändert werden kann.\n\n\n<table style=\"font-size:16px\">\n<thead>\n  <tr>\n    <th>Kotlin</th>\n    <th>Java</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>class Person (val name: String, var alter: Int)</code></td>\n    <td><code>public class Person{<br>&nbsp;&nbsp;&nbsp;&nbsp;private String name;<br>&nbsp;&nbsp;&nbsp;&nbsp;private int alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Person(String name, int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibName(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibAlter(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String setzeAlter(int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></td>\n  </tr>\n</tbody>\n</table>"
    },
    {
     "start_checkpoint": 1619427699980,
     "parent": "n.0.23",
     "markdown": "# Abschnitt 3\nThema dieses Abschnittes wird die objektorientierte Programmierung sein.\n\n## Lektion 1 - Klassen\nAufgrund der Kompatibilität mit Java ist auch Kotlin eine objektorientierte Sprache. Deswegen werden im Hintergrund alle Daten als Objekte behandelt. In Kotlin sind alle bekannten objektorientierte Konzepte vorhanden, jedoch angepasst und teilweise auch vereinfacht. Dazu ein Einführungsbeispiel. Es soll eine Klasse `Person` implementiert werden, die zwei Felder besitzt: `name` vom Typ `String`, das nur bei Objekterzeugung gesetzt wird, und `alter` vom Typ `Int`, das immer verändert werden kann.\n\n\n<table style=\"font-size:16px\">\n<thead>\n  <tr>\n    <th>Kotlin</th>\n    <th>Java</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>class Person (val name: String, var alter: Int)</code></td>\n    <td><code>public class Person{<br>&nbsp;&nbsp;&nbsp;&nbsp;private String name;<br>&nbsp;&nbsp;&nbsp;&nbsp;private int alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;public Person(String name, int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibName(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String gibAlter(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String setzeAlter(int alter){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.alter = alter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></td>\n  </tr>\n</tbody>\n</table>"
    }
   ]
  },
  {
   "artifact_name": "m.39",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "### Felder und Methoden überschreiben\nSollen Felder oder Methoden der super-Klasse in der sub-Klasse überschrieben werden, müssen diese auch mit `open` gekennzeichnet werden. Erst dann ist es möglich das gleiche Feld oder die gleiche Methode in der sub-Klasse mit dem Zusatz `override` zu definieren. Soll auf das Feld oder die Methode der Oberklasse zugegriffen werden, findet das Schlüsselwort `super` Anwendung. Bei Mehrfachvererbung wird die nächst höhere Klasse angesprochen."
    }
   ]
  },
  {
   "artifact_name": "m.40",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "### Sekundäre Konstruktoren\nWir sind bis jetzt von dem einfachen Fall ausgegangen, dass die Unterklasse einen primären Konstruktor besitzt. Jedoch gibt es auch die Möglichkeit diese nut mit sekunären Konstruktoren auszustatten. Diese müssen jedoch immer den primären Konstruktor der Oberklasse aufrufen."
    }
   ]
  },
  {
   "artifact_name": "m.41",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "### Abstrakte Klassen\nDas Konzept der abtrakten Klasse sollte bereits aus Java bekannt sein. Auch in Kotlin gibt es die Möglichkeit unintiierbare Klassen mit abstrakten Methoden zu implementieren. Diesen wird das Schlüsselwort `abstract` vorangestellt und können ohne Probleme geerbt werden. Die Subklassen müssen jedoch die Methoden vervollständigen."
    }
   ]
  },
  {
   "artifact_name": "m.42",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "### Geschlossene Klassen\nEine geschlossene Klasse ist eine besondere abstrakte Klasse. Ihr wird das Schlüsselwort `sealed` vorangestellt und sie besitzt einen privaten Konstruktor. Außerdem darf von der Klasse nur in der Datei geerbt werden. Dieses Konstrukt ist somit eine Alternative zu einer Enumeration. Da alle Subtypen bekannt sind, kann bei Verwendung einer `when`-Verzweifung der default-Fall weggelassen werden."
    }
   ]
  },
  {
   "artifact_name": "m.43",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "## Lektion 6 - Schnittstellen\nEin wichtiges objektorientiertes Konzept ist das der Schnittstelle. Ein bekanntes Beispiel ist hier das `Comparable`-Interface, das eine `compareTo()`-Methode vorschreibt. Aber anstelle des Vorschreibens von Methoden können auch Zugriffe definiert werden. Eine Schnittstelle hat das Schlüsselwort `interface` und wird bei der implementierenden Klasse ähnlich zur Vererbung angegeben. In einem Interface können sowohl Methoden voll implementiert oder nur deren Kopf angegeben werden, sodass diese von jeder Klasse selbst vervollständigt werden muss. Außerdem können sie auch Felder beinhalten.\nKotlin bietet bereits einige vorimplementierte Schnittstellen an:\n\n<table style=\"font-size:16px\">\n<thead>\n  <tr>\n    <th>Name</th>\n    <th>Funktion</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>Appendable</td>\n    <td>append()</td>\n  </tr>\n  <tr>\n    <td>Closeable</td>\n    <td>close()</td>\n  </tr>\n  <tr>\n    <td>Compareable</td>\n    <td>compare()</td>\n  </tr>\n  <tr>\n    <td>Iterable</td>\n    <td>Verarbeitung der Elemente in einer Schleife</td>\n  </tr>\n  <tr>\n    <td>Collection</td>\n    <td>allgemeine Aufzählung</td>\n  </tr>\n  <tr>\n    <td>List</td>\n    <td>Liste</td>\n  </tr>\n  <tr>\n    <td>Map</td>\n    <td>Dictionary</td>\n  </tr>\n  <tr>\n    <td>Set</td>\n    <td>Menge</td>\n  </tr>\n</tbody>\n</table>"
    }
   ]
  },
  {
   "artifact_name": "m.44",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "## Lektion 7 - Generizität\n### Generische Klassen\nBei manchen Softwareprojekten kommt man um generische Klassen nicht vorbei, falls mehrfache Arbeit vermieden werden soll. An sich unterscheiden sich die Unterschiede von solchen Klassen in Kotlin und Java nicht. Der generische Datentyp wird nach dem Klassennamen in `<>` angegeben und kann in der Klasse anstelle normalen Datentypen eingesetzt werden."
    }
   ]
  },
  {
   "artifact_name": "m.45",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "Soll der generische Datentyp eingeschränkt werden, kann dies durch ein Interface passieren. Dieses gibt vor welche Methoden der Datentyp implementieren muss."
    }
   ]
  },
  {
   "artifact_name": "m.46",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "### Generische Funktionen\nGenerizität findet aber nicht nur bei Klassen, sondern auch bei Funktionen Anwendung. Jedoch wird hier der generische Typ vor dem Namen der Funktion angegeben. Bei Aufruf der Methode muss der Typ nicht angegeben werden, sondern wird vom Kompiler erkannt."
    }
   ]
  },
  {
   "artifact_name": "m.47",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "n.0.22",
     "markdown": "### Generische Erweiterungsfunktionen\nErweiterungsfunktionen einer bestimmten Klasse wurden bereits in Abschnitt 1 kennengelernt. Dieses Konzept kann aber auch auf generische Klassen übertragen werden. So können beispielsweise einer generischen Liste neue Methoden hinzugefügt werden."
    }
   ]
  }
 ],
 "rawCells": [],
 "snippets": [],
 "output": [
  {
   "artifact_name": "o.0",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.1.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_6.jupyter.kts (4:57 - 62) Cannot access 'alter': it is private in 'Person'"
      }
     ]
    },
    {
     "start_checkpoint": 1619166409884,
     "parent": "c.1.0",
     "raw": [
      {
       "name": "stdout",
       "text": "Person 1, Line_0_jupyter$Person@642b2176: \nName: Max Mustermann, Alter: 21\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.1",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.2.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Marke von a1: BMW, Farbe von a1: Gelb.\nFarbe von a1 nach Umlackierung: Rot.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.2",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.3.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Marke von c1: Fuhitsu, ist c1 an?: false.\nist c1 an?: true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.3",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.4.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Die Flasche mit der Farbe Grau ist zu 20% gefüllt.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.4",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.5.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Bett b1: Länge 160, Breite 200, belegt false\nBett b2: Länge 0, Breite 50, belegt true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.5",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.6.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Tisch t1: Länge 100, Breite 100, Farbe Braun\nTisch t2: Länge 0, Breite 50, Farbe Weiß\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.6",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.7.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Stuhl s1: Länge 20, Breite 20, belegt true\nStuhl s2: Länge 0, Breite 30, belegt false\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.7",
   "versions": [
    {
     "start_checkpoint": 1619166384323,
     "parent": "c.8.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Konstruktor eines normalen Fensters\nFenster fensterNormal: Länge 50, Breite 0, Zustand Gebraucht \n\nKonstruktor eines quadratischen Fensters\nFenster fensterQuadrat: Länge 60, Breite 60, Zustand Schmutzig \n\nKonstruktor eines neuen Fensters\nFenster fensterNeu: Länge 100, Breite 120, Zustand Neu\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.8",
   "versions": [
    {
     "start_checkpoint": 1619167416345,
     "parent": "c.12.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.9",
   "versions": [
    {
     "start_checkpoint": 1619167469117,
     "parent": "c.12.2",
     "raw": [
      {
       "name": "stdout",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.10",
   "versions": [
    {
     "start_checkpoint": 1619167525913,
     "parent": "c.12.4",
     "raw": [
      {
       "name": "stdout",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht.\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu.\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.11",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.13.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Person p1, Line_0_jupyter$Person@642b2176: \nName: Max Mustermann, Alter: 21\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.12",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.14.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Batterie eigeneBatterie: Kapazität 2000, Wiederaufladbar true, Ladezyklen 42, Status Gebraucht\nBatterie neueBatterie: Kapazität 3000, Wiederaufladbar false, Ladezyklen 0, Status Neu\nBatterie BBBatterie: Kapazität 2400, Wiederaufladbar false, Ladezyklen 0, Status Neu\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.13",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.15.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_11.jupyter.kts (5:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (10:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (15:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (20:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (25:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (30:13 - 18) Unresolved reference: Pizza\nLine_11.jupyter.kts (35:13 - 18) Unresolved reference: Pizza"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.14",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.16.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_21.jupyter.kts (50:13 - 18) None of the following functions can be called with the arguments supplied: \npublic constructor Pizza(groeße: Int) defined in Line_21_jupyter.Pizza\npublic constructor Pizza(groeße: Int, belaege: List<String>, geschnitten: Boolean) defined in Line_21_jupyter.Pizza"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.15",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.17.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Person p1: Name: Max Mustermann, Alter -1\nPerson p1: Name: Max Mustermann, Alter 21\nPerson p1: Name: Max Mustermann, Alter 21\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.16",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.18.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Person p1: Name: Max Mustermann, Alter 21, Volljährig true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.17",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.19.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Volljährigkeit wird berechnet...\ntrue\ntrue\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.18",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.20.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Volljährig\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.19",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.21.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "false\ntrue\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.20",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.22.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Vor Geburtstag: Max Mustermann ist 30 Jahre alt.\nNach Geburtstag: Max Mustermann ist 31 Jahre alt.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.21",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.23.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Punkt p1: Punkt(x=0, y=0, z=0)\np1 und p2 sind ungleich.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.22",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.24.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "p1.component1(): 0\nx: 0, y: 1, z: 2\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.23",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.25.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "p1: Punkt(x=0, y=1, z=2)\np2: Punkt(x=0, y=1, z=2)\np3: Punkt(x=4, y=1, z=2)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.24",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.26.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Punkt p1 ist im Ursprung: true, Punkt(x=0, y=0, z=0)\nPunkt p2 ist im Ursprung: false, Punkt(x=1, y=1, z=1)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.25",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.27.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Kotlin\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.26",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.28.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Berechnung ohne Singleton: 15\nSingleton Rechner wurde erzeugt.\nBerechnung mit Singleton: 15\nZufallszahl des Singletons: 4\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.27",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.29.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Die Marikelnummer von Max ist 0.\nDie Marikelnummer von Anna ist 1.\nDie Marikelnummer von Simon ist 2.\nDie Marikelnummer von Sophie ist 3.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.28",
   "versions": [
    {
     "start_checkpoint": 1619273398309,
     "parent": "c.30.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Die Nummer des Standard Companion Objects ist 1.\nDie Nummer des Companion Objects Zwei ist 2.\nDie Nummer des Companion Objects Drei ist 3.\nEs ist aktuell 15:48:34.186670 Uhr.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.29",
   "versions": [
    {
     "start_checkpoint": 1619273462931,
     "parent": "c.32.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Die Marikelnummer von Max ist 0.\nDie Marikelnummer von Anna ist 1.\nDie Marikelnummer von Simon ist 2.\nDie Marikelnummer von Sophie ist 3.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.30",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "c.33.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Super! Alle Tests bestanden!\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.31",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "c.34.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Super! Alle Tests bestanden!\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.32",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "c.35.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Der Name von montag ist MONTAG\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.33",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "c.36.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Alle Einträge des Enums: MONTAG, DIENSTAG, MITTWOCH, DONNERSTAG, FREITAG, SAMSTAG, SONNTAG, \nVollständiger Name von FREITAG: FREITAG\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.34",
   "versions": [
    {
     "start_checkpoint": 1619344122936,
     "parent": "c.37.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Montag ist ein Tag des Wochenendes: false, Nummer des Tags: 1, Zufallszahl: 8\nSamstag ist ein Tag des Wochenendes: true, Nummer des Tags: 6, Zufallszahl: 8\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.35",
   "versions": [
    {
     "start_checkpoint": 1619344965296,
     "parent": "c.40.5",
     "raw": [
      {
       "name": "stdout",
       "text": "p1: Line_6_jupyter$Person@6c6fdf5d\ns1: Line_6_jupyter$Student@187c8f96\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.36",
   "versions": [
    {
     "start_checkpoint": 1619344997121,
     "parent": "c.40.6",
     "raw": [
      {
       "name": "stdout",
       "text": "p1: Line_7_jupyter$Person@25e9f5e6\ns1: Line_7_jupyter$Student@512319dc\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.37",
   "versions": [
    {
     "start_checkpoint": 1619345039116,
     "parent": "c.40.7",
     "raw": [
      {
       "name": "stdout",
       "text": "p1: Ich bin Max Mustermann und bin 25 Jahre alt.\ns1: Ich bin Erika Mustermann und bin 21 Jahre alt.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.38",
   "versions": [
    {
     "start_checkpoint": 1619345077293,
     "parent": "c.40.8",
     "raw": [
      {
       "name": "stdout",
       "text": "p1: Ich bin Max Mustermann und bin 25 Jahre alt.\ns1: Ich bin Erika Mustermann, bin 21 Jahre alt und besitze die Matrikelnummer §matrikelnummer.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.39",
   "versions": [
    {
     "start_checkpoint": 1619345085096,
     "parent": "c.40.9",
     "raw": [
      {
       "name": "stdout",
       "text": "p1: Ich bin Max Mustermann und bin 25 Jahre alt.\ns1: Ich bin Erika Mustermann, bin 21 Jahre alt und besitze die Matrikelnummer 0.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.40",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.45.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "p1: Ich bin Max Mustermann und bin 25 Jahre alt. Für die Horde!\nMax Mustermann hat Geburtstag. Alles Gute!\np1: Ich bin Max Mustermann und bin 26 Jahre alt. Für die Horde!\ns1: Ich bin Erika Mustermann, bin 21 Jahre alt und habe die Matrikelnummer 0. Für die Allianz! Oder vielleicht doch: Für die Horde!?\nErika Mustermann hat Geburtstag. Alles Gute!\ns1: Ich bin Erika Mustermann, bin 20 Jahre alt und habe die Matrikelnummer 0. Für die Allianz! Oder vielleicht doch: Für die Horde!?\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.41",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.46.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Punkt p1: x: 4, y: 2, z: 8\nPunkt p2: x: 0, y: 0, z: 0\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.42",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.47.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Laptop wurde eingeschalten.\nStandcomputer wurde eingeschalten.\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.43",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.48.0",
     "raw": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "Line_13.jupyter.kts (2:41 - 47) Cannot access '<init>': it is private in 'Fehler'\nLine_13.jupyter.kts (2:41 - 47) This type is sealed, so it can be inherited by only its own nested classes or objects\nLine_13.jupyter.kts (3:27 - 29) Data class must have at least one primary constructor parameter\nLine_13.jupyter.kts (3:32 - 38) Cannot access '<init>': it is private in 'Fehler'\nLine_13.jupyter.kts (3:32 - 38) This type is sealed, so it can be inherited by only its own nested classes or objects\nLine_13.jupyter.kts (4:26 - 28) Data class must have at least one primary constructor parameter\nLine_13.jupyter.kts (4:31 - 37) Cannot access '<init>': it is private in 'Fehler'\nLine_13.jupyter.kts (4:31 - 37) This type is sealed, so it can be inherited by only its own nested classes or objects\nLine_13.jupyter.kts (9:8 - 22) Incompatible types: Line_13_jupyter.Laufzeitfehler and Line_13_jupyter.Kompilierfehler\nLine_13.jupyter.kts (10:5 - 23) Check for instance is always 'true'\nLine_13.jupyter.kts (11:8 - 22) Incompatible types: Line_13_jupyter.Referenzfehler and Line_13_jupyter.Kompilierfehler"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.44",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.49.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "rechner.dieZahl: 42\nrechner.add2(5,3): 8\nrechner.add3(5,9,3): 17\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.45",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.50.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "s1: Speicher(platz1=1, platz2=2, platz3=3)\ns2: Speicher(platz1=[1, 2, 3], platz2=[1, 2, 3], platz3=[1, 2, 3])\ns3: Speicher(platz1=Kotlin, platz2=Java, platz3=C)\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.46",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.51.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "gleichheitstestInt.istGleich(3,3): true\ngleichheitstestInt.istGleich(10,3): false\ngleichheitstestString.istGleich('Kotlin','Kotlin'): true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.47",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.52.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "istGleich(3,3): true\nistGleich('Kotlin','Kotlin'): true\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.48",
   "versions": [
    {
     "start_checkpoint": 1619427664533,
     "parent": "c.53.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Entferntes Element: 1\nliste: [3, 6, 8, 10]\n"
      }
     ]
    }
   ]
  }
 ]
}